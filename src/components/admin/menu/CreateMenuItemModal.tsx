import React, { useState } from 'react';
import { MenuItemData, CreateMenuItemRequest } from '../../../types/menu';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
 * –ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–æ–ª–µ–π
 */
interface CreateMenuItemModalProps {
  menuTypeId: string;
  parentItems: MenuItemData[];
  onClose: () => void;
  onCreate: (data: CreateMenuItemRequest) => void;
}

const CreateMenuItemModal: React.FC<CreateMenuItemModalProps> = ({
  menuTypeId,
  parentItems,
  onClose,
  onCreate
}) => {
  const [formData, setFormData] = useState<Partial<CreateMenuItemRequest>>({
    type: 'COMPONENT',
    accessLevel: 'PUBLIC',
    language: '*',
    level: 1,
    menuTypeId
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.title || !formData.alias) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ COMPONENT
    if (formData.type === 'COMPONENT' && (!formData.component || !formData.view)) {
      alert('–î–ª—è —Ç–∏–ø–∞ "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ view');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Ç–∏–ø–∞ URL
    if (formData.type === 'URL' && !formData.externalUrl) {
      alert('–î–ª—è —Ç–∏–ø–∞ "–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ URL');
      return;
    }

    onCreate(formData as CreateMenuItemRequest);
  };

  // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è alias –∏–∑ title
  const generateAlias = (title: string) => {
    return title
      .toLowerCase()
      .replace(/[–∞-—è]/g, (char) => {
        const map: { [key: string]: string } = {
          '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
          '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
          '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
          '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
          '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        };
        return map[char] || char;
      })
      .replace(/[^a-z0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const getComponentDefaults = (component: string) => {
    switch (component) {
      case 'Website':
        return { view: 'page', targetId: '' };
      case 'Store':
        return { view: 'categories', targetId: '' };
      case 'Blog':
        return { view: 'list', targetId: 'news' };
      case 'Landing':
        return { view: 'page', targetId: '' };
      default:
        return { view: '', targetId: '' };
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-dark-2 rounded-lg p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-medium text-dark dark:text-white">
            –°–æ–∑–¥–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é
          </h3>
          <button
            onClick={onClose}
            className="text-body-color dark:text-dark-6 hover:text-dark dark:hover:text-white"
          >
            <svg width="24" height="24" viewBox="0 0 24 24" className="fill-current">
              <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* –ù–∞–∑–≤–∞–Ω–∏–µ */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é *
              </label>
              <input
                type="text"
                value={formData.title || ''}
                onChange={(e) => {
                  const title = e.target.value;
                  setFormData(prev => ({
                    ...prev,
                    title,
                    alias: generateAlias(title)
                  }));
                }}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
              />
            </div>

            {/* Alias */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                Alias (URL) *
              </label>
              <input
                type="text"
                value={formData.alias || ''}
                onChange={(e) => setFormData(prev => ({ ...prev, alias: e.target.value }))}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                placeholder="url-alias"
              />
            </div>
          </div>

          {/* –¢–∏–ø –∏ –∏–µ—Ä–∞—Ä—Ö–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* –¢–∏–ø –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                –¢–∏–ø –ø—É–Ω–∫—Ç–∞
              </label>
              <select
                value={formData.type || 'COMPONENT'}
                onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value as any }))}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
              >
                <option value="COMPONENT">üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç</option>
                <option value="URL">üîó –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞</option>
                <option value="HEADING">üìÇ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã</option>
                <option value="SEPARATOR">‚ûñ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å</option>
              </select>
            </div>

            {/* –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É–Ω–∫—Ç */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É–Ω–∫—Ç
              </label>
              <select
                value={formData.parentId || ''}
                onChange={(e) => {
                  const parentId = e.target.value || undefined;
                  const parent = parentItems.find(item => item.id === parentId);
                  setFormData(prev => ({ 
                    ...prev, 
                    parentId,
                    level: parent ? parent.level + 1 : 1
                  }));
                }}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
              >
                <option value="">–ö–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å</option>
                {parentItems.map((item) => (
                  <option key={item.id} value={item.id}>
                    {'  '.repeat(item.level - 1)}üìÅ {item.title} (Level {item.level})
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ç–∏–ø COMPONENT) */}
          {formData.type === 'COMPONENT' && (
            <div className="border border-blue-200 dark:border-blue-800 rounded-lg p-4 bg-blue-50 dark:bg-blue-900/20">
              <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-3">
                üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
              </h4>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç */}
                <div>
                  <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç *
                  </label>
                  <select
                    value={formData.component || ''}
                    onChange={(e) => {
                      const component = e.target.value;
                      const defaults = getComponentDefaults(component);
                      setFormData(prev => ({ 
                        ...prev, 
                        component,
                        ...defaults
                      }));
                    }}
                    className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</option>
                    <option value="Website">üåê Website</option>
                    <option value="Store">üõí Store</option>
                    <option value="Blog">üìù Blog</option>
                    <option value="Landing">üéØ Landing</option>
                  </select>
                </div>

                {/* View */}
                <div>
                  <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                    View *
                  </label>
                  <input
                    type="text"
                    value={formData.view || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, view: e.target.value }))}
                    className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                    placeholder="page, category, list..."
                  />
                </div>

                {/* Target ID */}
                <div>
                  <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                    Target ID
                  </label>
                  <input
                    type="text"
                    value={formData.targetId || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, targetId: e.target.value }))}
                    className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                    placeholder="ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                  />
                </div>
              </div>

              {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É */}
              {formData.component && (
                <div className="mt-3 p-3 bg-white dark:bg-dark-3 rounded border text-xs text-body-color dark:text-dark-6">
                  <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è {formData.component}:</strong>
                  {formData.component === 'Website' && (
                    <ul className="mt-1 space-y-1">
                      <li>‚Ä¢ view: page (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)</li>
                      <li>‚Ä¢ targetId: slug —Å—Ç—Ä–∞–Ω–∏—Ü—ã (home, about, contacts)</li>
                    </ul>
                  )}
                  {formData.component === 'Store' && (
                    <ul className="mt-1 space-y-1">
                      <li>‚Ä¢ view: categories (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π), category (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)</li>
                      <li>‚Ä¢ targetId: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–µ –¥–ª—è —Å–ø–∏—Å–∫–∞</li>
                    </ul>
                  )}
                  {formData.component === 'Blog' && (
                    <ul className="mt-1 space-y-1">
                      <li>‚Ä¢ view: list (—Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π), article (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è)</li>
                      <li>‚Ä¢ targetId: slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ ID —Å—Ç–∞—Ç—å–∏</li>
                    </ul>
                  )}
                </div>
              )}
            </div>
          )}

          {/* –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ (–µ—Å–ª–∏ —Ç–∏–ø URL) */}
          {formData.type === 'URL' && (
            <div className="border border-green-200 dark:border-green-800 rounded-lg p-4 bg-green-50 dark:bg-green-900/20">
              <h4 className="font-medium text-green-800 dark:text-green-200 mb-3">
                üîó –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
              </h4>
              <div>
                <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                  URL –∞–¥—Ä–µ—Å *
                </label>
                <input
                  type="url"
                  value={formData.externalUrl || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, externalUrl: e.target.value }))}
                  className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                  placeholder="https://example.com"
                />
              </div>
            </div>
          )}

          {/* –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ —è–∑—ã–∫ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
              </label>
              <select
                value={formData.accessLevel || 'PUBLIC'}
                onChange={(e) => setFormData(prev => ({ ...prev, accessLevel: e.target.value as any }))}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
              >
                <option value="PUBLIC">üåê –ü—É–±–ª–∏—á–Ω—ã–π (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)</option>
                <option value="REGISTERED">üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                <option value="SPECIAL">‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π (–∞–¥–º–∏–Ω—ã)</option>
                <option value="CUSTOM">üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π</option>
              </select>
            </div>

            {/* –Ø–∑—ã–∫ */}
            <div>
              <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                –Ø–∑—ã–∫
              </label>
              <select
                value={formData.language || '*'}
                onChange={(e) => setFormData(prev => ({ ...prev, language: e.target.value }))}
                className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
              >
                <option value="*">üåç –í—Å–µ —è–∑—ã–∫–∏</option>
                <option value="ru-RU">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                <option value="en-GB">üá¨üáß English</option>
                <option value="es-ES">üá™üá∏ Espa√±ol</option>
              </select>
            </div>
          </div>

          {/* SEO –ø–æ–ª—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) */}
          <details className="border border-gray-200 dark:border-gray-700 rounded-lg">
            <summary className="p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-dark-3 font-medium text-dark dark:text-white">
              üîç SEO –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            </summary>
            <div className="p-4 border-t border-gray-200 dark:border-gray-700 space-y-3">
              <div>
                <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                  Meta Title
                </label>
                <input
                  type="text"
                  value={formData.metaTitle || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, metaTitle: e.target.value }))}
                  className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                  placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-dark dark:text-white mb-2">
                  Meta Description
                </label>
                <textarea
                  value={formData.metaDescription || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, metaDescription: e.target.value }))}
                  className="w-full px-3 py-2 border border-stroke dark:border-dark-3 rounded-lg bg-white dark:bg-dark-3 text-dark dark:text-white"
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"
                  rows={2}
                />
              </div>
            </div>
          </details>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 px-4 py-2 border border-stroke dark:border-dark-3 rounded-lg text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-dark-3 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              disabled={!formData.title || !formData.alias}
              className="flex-1 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              –°–æ–∑–¥–∞—Ç—å –ø—É–Ω–∫—Ç
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateMenuItemModal;
