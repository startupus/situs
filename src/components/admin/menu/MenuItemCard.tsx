import React from 'react';
import { MenuItemData } from '../../../types/menu';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
 */
interface MenuItemCardProps {
  item: MenuItemData;
  level: number;
  onEdit: (item: MenuItemData) => void;
  onDelete: (itemId: string) => void;
  children?: React.ReactNode; // –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—É–Ω–∫—Ç–æ–≤
}

const MenuItemCard: React.FC<MenuItemCardProps> = ({
  item,
  level,
  onEdit,
  onDelete,
  children
}) => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'COMPONENT': return 'üß©';
      case 'URL': return 'üîó';
      case 'HEADING': return 'üìÇ';
      case 'SEPARATOR': return '‚ûñ';
      default: return '‚ùì';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
  const getAccessLevelColor = (accessLevel: string) => {
    switch (accessLevel) {
      case 'PUBLIC': return 'text-green-600 dark:text-green-400';
      case 'REGISTERED': return 'text-blue-600 dark:text-blue-400';
      case 'SPECIAL': return 'text-purple-600 dark:text-purple-400';
      case 'CUSTOM': return 'text-orange-600 dark:text-orange-400';
      default: return 'text-gray-600 dark:text-gray-400';
    }
  };

  return (
    <div className={`${level > 1 ? 'ml-6 border-l-2 border-primary/20 pl-4' : ''}`}>
      <div className="border border-stroke dark:border-dark-3 rounded-lg p-4 hover:shadow-md transition-shadow mb-2" data-testid="menu-item">
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <div className="flex items-center gap-3">
              {/* –ò–∫–æ–Ω–∫–∞ –ø–æ —Ç–∏–ø—É –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é */}
              <span className="text-lg" title={`–¢–∏–ø: ${item.type}`}>
                {getTypeIcon(item.type)}
              </span>
              
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-medium text-dark dark:text-white">
                    {item.title}
                  </h4>
                  
                  {/* –ë–µ–π–¥–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
                  <span className="text-xs bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 px-2 py-1 rounded">
                    Level {level}
                  </span>
                  
                  {!item.isPublished && (
                    <span className="text-xs bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded">
                      –°–∫—Ä—ã—Ç–æ
                    </span>
                  )}

                  <span className={`text-xs px-2 py-1 rounded ${getAccessLevelColor(item.accessLevel)}`}>
                    {item.accessLevel}
                  </span>
                </div>
                
                {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="flex flex-wrap items-center gap-3 text-sm text-body-color dark:text-dark-6">
                  <span className="font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                    /{item.alias}
                  </span>
                  
                  {item.component && (
                    <span className="flex items-center gap-1">
                      <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                      {item.component}
                    </span>
                  )}
                  
                  {item.view && (
                    <span className="text-purple-600 dark:text-purple-400">
                      view: {item.view}
                    </span>
                  )}
                  
                  {item.targetId && (
                    <span className="text-green-600 dark:text-green-400">
                      ‚Üí {item.targetId}
                    </span>
                  )}

                  {item.externalUrl && (
                    <span className="text-blue-600 dark:text-blue-400 truncate max-w-32">
                      {item.externalUrl}
                    </span>
                  )}
                  
                  <span className="text-gray-500 dark:text-gray-400">
                    {item.language === '*' ? 'üåç' : item.language}
                  </span>
                </div>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
                {item.parameters && item.parameters !== '{}' && (
                  <div className="mt-2 text-xs">
                    <details className="text-gray-600 dark:text-gray-400">
                      <summary className="cursor-pointer hover:text-gray-800 dark:hover:text-gray-200">
                        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ({Object.keys(JSON.parse(item.parameters)).length})
                      </summary>
                      <pre className="mt-1 p-2 bg-gray-100 dark:bg-gray-800 rounded text-xs overflow-x-auto">
                        {JSON.stringify(JSON.parse(item.parameters), null, 2)}
                      </pre>
                    </details>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex gap-2 ml-4">
            <button
              onClick={() => onEdit(item)}
              className="text-primary hover:text-primary/80 text-sm px-3 py-1 rounded border border-primary/20 hover:bg-primary/5 transition-colors"
              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é"
            >
              ‚úèÔ∏è
            </button>
            <button
              onClick={() => onDelete(item.id)}
              className="text-red-600 hover:text-red-700 dark:text-red-400 text-sm px-3 py-1 rounded border border-red-200 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
              title="–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é"
            >
              üóëÔ∏è
            </button>
          </div>
        </div>
      </div>
      
      {/* –î–æ—á–µ—Ä–Ω–∏–µ –ø—É–Ω–∫—Ç—ã */}
      {children}
    </div>
  );
};

export default MenuItemCard;
