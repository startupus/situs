import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { MenuTypeData, MenuItemData, CreateMenuItemRequest } from '../../types/menu';
import { useMenuSystemRealtime } from '../../hooks/useMenuSystemRealtime';
import MenuTypesSelector from './menu/MenuTypesSelector';
import MenuStatistics from './menu/MenuStatistics';
import MenuItemsList from './menu/MenuItemsList';
import MenuItemDragDrop from './menu/MenuItemDragDrop';
import MenuPreview from './menu/MenuPreview';
import CreateMenuItemModal from './menu/CreateMenuItemModal';
import EditMenuItemModal from './menu/EditMenuItemModal';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
 * –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é
 */
const MenuManager: React.FC = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const [selectedMenuType, setSelectedMenuType] = useState<string>('');
  const [showCreateItemModal, setShowCreateItemModal] = useState(false);
  const [editingItem, setEditingItem] = useState<MenuItemData | null>(null);
  const [viewMode, setViewMode] = useState<'list' | 'dragdrop' | 'preview'>('list');

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º real-time —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const { 
    menuTypes, 
    menuItems, 
    loading, 
    error, 
    lastUpdate,
    loadMenuTypes,
    loadMenuItems 
  } = useMenuSystemRealtime(projectId!, selectedMenuType);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (menuTypes.length > 0 && !selectedMenuType) {
      const mainMenu = menuTypes.find((mt: MenuTypeData) => mt.name === 'main');
      if (mainMenu) {
        setSelectedMenuType(mainMenu.id);
      }
    }
  }, [menuTypes, selectedMenuType]);



  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (SSE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫)
  const handleCreateMenuItem = async (data: CreateMenuItemRequest) => {
    try {
      const response = await fetch('http://localhost:3002/api/menu-items', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });

      const result = await response.json();
      if (result.success) {
        setShowCreateItemModal(false);
        // SSE —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
      } else {
        alert(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é');
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é');
    }
  };

  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
  const handleReorderItems = async (reorderedItems: Array<{
    id: string;
    orderIndex: number;
    level: number;
    parentId: string | null;
  }>) => {
    try {
      const response = await fetch('http://localhost:3002/api/menu-items/reorder', {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items: reorderedItems })
      });

      const result = await response.json();
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞');
      }

      // –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ SSE
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ reorder:', error);
      throw error;
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (SSE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫)
  const handleDeleteMenuItem = async (itemId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–µ–Ω—é?')) return;

    try {
      const response = await fetch(`http://localhost:3002/api/menu-items/${itemId}`, {
        method: 'DELETE'
      });

      const result = await response.json();
      if (result.success) {
        // SSE —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
      } else {
        alert(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é');
      }
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2"></div>
          <p className="text-body-color dark:text-dark-6">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
        <h3 className="text-lg font-medium text-red-800 dark:text-red-200 mb-2">–û—à–∏–±–∫–∞</h3>
        <p className="text-red-600 dark:text-red-400">{error}</p>
      </div>
    );
  }

  return (
    <div className="p-6" data-testid="menu-manager">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <div className="flex justify-between items-start">
          <div>
            <h1 className="text-2xl font-bold text-dark dark:text-white mb-2">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
            </h1>
            <p className="text-body-color dark:text-dark-6">
              –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            </p>
          </div>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä real-time —Å—Ç–∞—Ç—É—Å–∞ */}
          <div className="flex items-center gap-2 text-sm">
            <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            <span className="text-body-color dark:text-dark-6">
              –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            </span>
            <span className="text-xs text-gray-500 dark:text-gray-400">
              {lastUpdate.toLocaleTimeString()}
            </span>
          </div>
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–æ–≤ –º–µ–Ω—é */}
      <MenuTypesSelector
        projectId={projectId!}
        menuTypes={menuTypes}
        selectedMenuType={selectedMenuType}
        onMenuTypeChange={setSelectedMenuType}
        onMenuTypesUpdate={loadMenuTypes} // SSE –æ–±–Ω–æ–≤–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      />

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω—é */}
      {selectedMenuType && menuItems.length > 0 && (
        <MenuStatistics menuItems={menuItems} className="mb-6" />
      )}

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      {selectedMenuType && (
        <div className="mb-6">
          <div className="flex items-center gap-2 bg-white dark:bg-dark-2 rounded-lg p-1 border border-stroke dark:border-dark-3 w-fit">
            <button
              onClick={() => setViewMode('list')}
              className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'list' 
                  ? 'bg-primary text-white' 
                  : 'text-body-color dark:text-dark-6 hover:text-dark dark:hover:text-white'
              }`}
            >
              üìã –°–ø–∏—Å–æ–∫
            </button>
            <button
              onClick={() => setViewMode('dragdrop')}
              className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'dragdrop' 
                  ? 'bg-primary text-white' 
                  : 'text-body-color dark:text-dark-6 hover:text-dark dark:hover:text-white'
              }`}
            >
              üñ±Ô∏è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            </button>
            <button
              onClick={() => setViewMode('preview')}
              className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                viewMode === 'preview' 
                  ? 'bg-primary text-white' 
                  : 'text-body-color dark:text-dark-6 hover:text-dark dark:hover:text-white'
              }`}
            >
              üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            </button>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é */}
      {selectedMenuType && viewMode === 'list' && (
        <MenuItemsList
          menuItems={menuItems}
          onEditItem={setEditingItem}
          onDeleteItem={handleDeleteMenuItem}
          onCreateItem={() => setShowCreateItemModal(true)}
        />
      )}

      {/* Drag & Drop —Ä–µ–∂–∏–º */}
      {selectedMenuType && viewMode === 'dragdrop' && (
        <MenuItemDragDrop 
          items={menuItems}
          onReorder={handleReorderItems}
        />
      )}

      {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é */}
      {selectedMenuType && viewMode === 'preview' && (
        <MenuPreview 
          projectId={projectId!}
          selectedMenuType={selectedMenuType}
          menuItems={menuItems}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é */}
      {showCreateItemModal && (
        <CreateMenuItemModal
          menuTypeId={selectedMenuType}
          parentItems={menuItems.filter(item => item.level < 3)} // –ú–∞–∫—Å–∏–º—É–º 3 —É—Ä–æ–≤–Ω—è
          onClose={() => setShowCreateItemModal(false)}
          onCreate={handleCreateMenuItem}
        />
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é */}
      {editingItem && (
        <EditMenuItemModal
          item={editingItem}
          onClose={() => setEditingItem(null)}
          onUpdate={(updatedItem) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç
            setMenuItems(items => 
              items.map(item => item.id === updatedItem.id ? updatedItem : item)
            );
            setEditingItem(null);
          }}
        />
      )}
    </div>
  );
};



export default MenuManager;
