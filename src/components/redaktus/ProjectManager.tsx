import React, { useState, useEffect } from 'react';
import { getProject, getPage, updatePage, ProjectData, PageData } from '../../services/projectApi';

interface ProjectManagerProps {
  projectId?: string;
  pageId?: string;
  onProjectLoad?: (project: ProjectData) => void;
  onPageLoad?: (page: PageData) => void;
  onPageUpdate?: (page: PageData) => void;
  children: React.ReactNode;
}

interface ProjectManagerState {
  project: ProjectData | null;
  currentPage: PageData | null;
  loading: boolean;
  error: string | null;
  saving: boolean;
}

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ API, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
 */
export const ProjectManager: React.FC<ProjectManagerProps> = ({
  projectId,
  pageId,
  onProjectLoad,
  onPageLoad,
  onPageUpdate,
  children,
}) => {
  const [state, setState] = useState<ProjectManagerState>({
    project: null,
    currentPage: null,
    loading: false,
    error: null,
    saving: false,
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  useEffect(() => {
    if (!projectId) return;

    let cancelled = false;

    const loadProject = async () => {
      setState((prev) => ({ ...prev, loading: true, error: null }));

      try {
        console.log('üöÄ ProjectManager: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', projectId);
        const project = await getProject(projectId);

        if (cancelled) return;

        console.log('‚úÖ ProjectManager: –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', project.name);
        setState((prev) => ({ ...prev, project, loading: false }));

        if (onProjectLoad) {
          onProjectLoad(project);
        }
      } catch (error) {
        if (cancelled) return;

        console.error('‚ùå ProjectManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error);
        setState((prev) => ({
          ...prev,
          loading: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        }));
      }
    };

    loadProject();

    return () => {
      cancelled = true;
    };
  }, [projectId, onProjectLoad]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (!pageId) return;

    let cancelled = false;

    const loadPage = async () => {
      setState((prev) => ({ ...prev, loading: true, error: null }));

      try {
        console.log('üìÑ ProjectManager: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', pageId);
        const page = await getPage(pageId);

        if (cancelled) return;

        console.log('‚úÖ ProjectManager: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', page.title);
        setState((prev) => ({ ...prev, currentPage: page, loading: false }));

        if (onPageLoad) {
          onPageLoad(page);
        }
      } catch (error) {
        if (cancelled) return;

        console.error('‚ùå ProjectManager: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
        setState((prev) => ({
          ...prev,
          loading: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        }));
      }
    };

    loadPage();

    return () => {
      cancelled = true;
    };
  }, [pageId, onPageLoad]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const savePage = async (pageData: Partial<PageData>): Promise<void> => {
    if (!state.currentPage) {
      throw new Error('–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }

    setState((prev) => ({ ...prev, saving: true, error: null }));

    try {
      console.log('üíæ ProjectManager: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', state.currentPage.id);
      const updatedPage = await updatePage(state.currentPage.id, pageData);

      console.log('‚úÖ ProjectManager: –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      setState((prev) => ({ ...prev, currentPage: updatedPage, saving: false }));

      if (onPageUpdate) {
        onPageUpdate(updatedPage);
      }
    } catch (error) {
      console.error('‚ùå ProjectManager: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      setState((prev) => ({
        ...prev,
        saving: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
      }));
      throw error;
    }
  };

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const contextValue = {
    project: state.project,
    currentPage: state.currentPage,
    loading: state.loading,
    error: state.error,
    saving: state.saving,
    savePage,
  };

  // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ React Context –∏–ª–∏ –ø—Ä–æ–ø—Å—ã
  return <ProjectManagerContext.Provider value={contextValue}>{children}</ProjectManagerContext.Provider>;
};

// React Context –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞
export const ProjectManagerContext = React.createContext<{
  project: ProjectData | null;
  currentPage: PageData | null;
  loading: boolean;
  error: string | null;
  saving: boolean;
  savePage: (pageData: Partial<PageData>) => Promise<void>;
} | null>(null);

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useProjectManager = () => {
  const context = React.useContext(ProjectManagerContext);
  if (!context) {
    throw new Error('useProjectManager must be used within ProjectManager');
  }
  return context;
};
