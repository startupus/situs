// üèõÔ∏è Component Registry Types
// –¢–∏–ø—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

export interface ComponentMetadata {
  id: string;                    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  name: string;                  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
  description?: string;          // –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  category: ComponentCategory;   // –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  subcategory: string;          // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (buttons, cards, hero, etc.)
  source: ComponentSource;       // –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  preview: {
    thumbnail: string;           // URL –ø—Ä–µ–≤—å—é –∏–∑ tailgrids.com
    demo?: string;              // URL –¥–µ–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    screenshots?: string[];      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
  };
  component: {
    path: string;               // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    props: Record<string, any>; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ props
    dependencies?: string[];     // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  };
  tags: string[];              // –¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  readonly: boolean;           // –ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫
  featured?: boolean;          // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  popularity?: number;         // –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
  createdAt: string;          // –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  updatedAt: string;          // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
}

export type ComponentCategory = 'core' | 'pro' | 'templates' | 'custom';

export type ComponentSource = 'free' | 'pro' | 'templates' | 'ai-generated' | 'user-custom';

export interface ComponentInstance {
  id: string;                  // ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  sourceComponentId: string;   // ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  name: string;               // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è
  customProps: Record<string, any>; // –ö–∞—Å—Ç–æ–º–Ω—ã–µ props
  customCode?: string;        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
  projectId?: string;         // ID –ø—Ä–æ–µ–∫—Ç–∞
  createdAt: string;
  updatedAt: string;
}

export interface ComponentRegistry {
  version: string;            // –í–µ—Ä—Å–∏—è —Ä–µ–µ—Å—Ç—Ä–∞
  lastUpdated: string;       // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  components: ComponentMetadata[];
  categories: {
    [key in ComponentCategory]: {
      label: string;
      icon: string;
      description: string;
      subcategories: string[];
      componentIds: string[];   // ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    };
  };
  sources: {
    [key in ComponentSource]: {
      label: string;
      description: string;
      baseUrl?: string;        // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      readonly: boolean;
    };
  };
  stats: {
    totalComponents: number;
    componentsByCategory: Record<ComponentCategory, number>;
    componentsBySource: Record<ComponentSource, number>;
  };
}

export interface ComponentSearchQuery {
  query?: string;             // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
  category?: ComponentCategory;
  subcategory?: string;
  source?: ComponentSource;
  tags?: string[];
  featured?: boolean;
  sortBy?: 'name' | 'popularity' | 'createdAt' | 'updatedAt';
  sortOrder?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

export interface ComponentSearchResult {
  components: ComponentMetadata[];
  total: number;
  hasMore: boolean;
}

// –°–æ–±—ã—Ç–∏—è –¥–ª—è Component Registry
export interface ComponentRegistryEvents {
  'component:added': ComponentMetadata;
  'component:updated': ComponentMetadata;
  'component:removed': string; // componentId
  'instance:created': ComponentInstance;
  'instance:updated': ComponentInstance;
  'registry:synced': ComponentRegistry;
} 