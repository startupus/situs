#!/usr/bin/env node

import express from 'express';
import cors from 'cors';
import { createServer } from 'http';

const app = express();

// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
async function findFreePort(startPort: number = 3000): Promise<number> {
  return new Promise((resolve) => {
    const server = createServer();
    server.listen(startPort, () => {
      const port = (server.address() as any)?.port || startPort;
      server.close(() => resolve(port));
    });
    server.on('error', () => {
      resolve(findFreePort(startPort + 1));
    });
  });
}

// Minimal middleware - –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
app.use(cors());
app.use(express.json());

// –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`);
  next();
});

// –í–°–¢–†–û–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤)
// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'startupus-platform',
    architecture: 'monolithic-self-contained',
  });
});

// Currencies API (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
app.get('/api/currencies', (req, res) => {
  res.json({
    currencies: [
      { id: 'usd', name: 'US Dollar', symbol: '$', rate: 1.0 },
      { id: 'eur', name: 'Euro', symbol: '‚Ç¨', rate: 0.85 },
      { id: 'mnt', name: 'Mongolian Tugrik', symbol: '‚ÇÆ', rate: 2800 },
    ],
    timestamp: new Date().toISOString(),
  });
});

app.get('/api/currencies/stats', (req, res) => {
  res.json({
    totalCurrencies: 3,
    activeCurrencies: 3,
    lastUpdated: new Date().toISOString(),
  });
});

app.get('/api/currencies/:id', (req, res) => {
  const { id } = req.params;
  res.json({
    id,
    name: `Currency ${id.toUpperCase()}`,
    symbol: '$',
    rate: 1.0,
    active: true,
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Startupus Platform - Monolithic Architecture',
    status: 'running',
    endpoints: ['/health', '/api/currencies', '/api/currencies/stats'],
    architecture: 'self-contained',
  });
});

// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('[ERROR]', err.message);
  res.status(500).json({ error: 'Internal Server Error', architecture: 'monolithic' });
});

// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º –ø–æ—Ä—Ç–∞
async function startServer() {
  try {
    const PORT = await findFreePort(3000);

    app.listen(PORT, () => {
      console.log(`[${new Date().toISOString()}] üöÄ Startupus Platform running on port ${PORT}`);
      console.log(`[${new Date().toISOString()}] üìä Health check: http://localhost:${PORT}/health`);
      console.log(`[${new Date().toISOString()}] üèóÔ∏è  Architecture: Monolithic Self-Contained`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
startServer();

export default app;
