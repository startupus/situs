import { Injectable } from '@nestjs/common';
import { Prompt } from '@rekog/mcp-nest';

@Injectable()
export class EditorPrompts {
  /**
   * Промпт для создания компонента React
   */
  @Prompt({
    name: 'create-react-component',
    description: 'Создает React компонент с TypeScript',
    prompt: `Создай React компонент с TypeScript для {{componentName}}.

Требования:
- Используй функциональные компоненты с хуками
- Добавь типизацию TypeScript
- Следуй принципам TailGrids для стилизации
- Компонент должен быть переиспользуемым
- Добавь JSDoc комментарии

Контекст: {{context}}
Функциональность: {{functionality}}

Создай компонент, который соответствует этим требованиям.`,
  })
  async createReactComponent() {
    // Промпт уже определен в декораторе
  }

  /**
   * Промпт для рефакторинга кода
   */
  @Prompt({
    name: 'refactor-code',
    description: 'Рефакторит существующий код для улучшения качества',
    prompt: `Проанализируй и рефактори следующий код:

\`\`\`typescript
{{code}}
\`\`\`

Цели рефакторинга:
- Улучшить читаемость кода
- Оптимизировать производительность
- Следовать лучшим практикам TypeScript/React
- Убрать дублирование кода
- Улучшить типизацию

Предложи улучшенную версию кода с объяснением изменений.`,
  })
  async refactorCode() {
    // Промпт уже определен в декораторе
  }

  /**
   * Промпт для создания API эндпоинта
   */
  @Prompt({
    name: 'create-api-endpoint',
    description: 'Создает API эндпоинт с валидацией и обработкой ошибок',
    prompt: `Создай API эндпоинт для {{endpointName}}.

Требования:
- Используй NestJS
- Добавь валидацию с Zod
- Обработай ошибки
- Добавь документацию
- Следуй REST принципам

Модель данных:
{{dataModel}}

Операции: {{operations}}

Создай полный эндпоинт с контроллером, сервисом и валидацией.`,
  })
  async createApiEndpoint() {
    // Промпт уже определен в декораторе
  }

  /**
   * Промпт для оптимизации производительности
   */
  @Prompt({
    name: 'optimize-performance',
    description: 'Анализирует и оптимизирует производительность кода',
    prompt: `Проанализируй производительность следующего кода:

\`\`\`typescript
{{code}}
\`\`\`

Найди узкие места и предложи оптимизации:
- Мемоизация компонентов
- Оптимизация рендеринга
- Уменьшение количества ре-рендеров
- Оптимизация запросов к API
- Кэширование данных

Предложи конкретные изменения с объяснением их влияния на производительность.`,
  })
  async optimizePerformance() {
    // Промпт уже определен в декораторе
  }

  /**
   * Промпт для создания тестов
   */
  @Prompt({
    name: 'create-tests',
    description: 'Создает unit и integration тесты для кода',
    prompt: `Создай тесты для следующего кода:

\`\`\`typescript
{{code}}
\`\`\`

Требования к тестам:
- Покрытие основных сценариев
- Тестирование edge cases
- Мокирование зависимостей
- Читаемые названия тестов
- Использование Vitest

Создай полный набор тестов с setup и teardown.`,
  })
  async createTests() {
    // Промпт уже определен в декораторе
  }

  /**
   * Промпт для документации
   */
  @Prompt({
    name: 'generate-documentation',
    description: 'Генерирует документацию для кода или API',
    prompt: `Создай документацию для:

{{target}}

Тип документации: {{docType}}

Включи:
- Описание функциональности
- Примеры использования
- Параметры и возвращаемые значения
- Примеры кода
- Примечания и ограничения

Создай подробную и понятную документацию.`,
  })
  async generateDocumentation() {
    // Промпт уже определен в декораторе
  }
}
