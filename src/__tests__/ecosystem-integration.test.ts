import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import request from 'supertest';
import jwt from 'jsonwebtoken';
import { randomUUID } from 'crypto';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = 'test-secret-ecosystem';

describe('Ecosystem Integration Tests: Gateway + Agents', () => {
  let authToken: string;
  let testUserId: string;
  let gatewayUrl: string;
  let agentsUrl: string;

  beforeAll(async () => {
    testUserId = 'ecosystem-test-user';
    gatewayUrl = process.env.GATEWAY_SERVICE_URL || 'http://localhost:3010';
    agentsUrl = process.env.AGENTS_SERVICE_URL || 'http://localhost:3007';
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    authToken = jwt.sign(
      {
        userId: testUserId,
        email: 'ecosystem-test@example.com',
        scopes: ['agents:read', 'agents:write', 'agents:execute', 'gateway:access'],
      },
      process.env.JWT_SECRET || 'test-secret-ecosystem',
      { expiresIn: '1h' }
    );
  });

  afterAll(async () => {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    console.log('üßπ Ecosystem integration tests completed');
  });

  describe('Gateway Health Check', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ Gateway Service', async () => {
      const response = await request(gatewayUrl)
        .get('/health')
        .expect(200);

      expect(response.body).toHaveProperty('status');
      expect(response.body.status).toBe('healthy');
      expect(response.body.service).toBe('gateway-service');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ Gateway', async () => {
      const response = await request(gatewayUrl)
        .get('/health/detailed')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('checks');
      expect(response.body.checks).toHaveProperty('agents');
      expect(response.body.checks).toHaveProperty('loginus');
      expect(response.body.checks).toHaveProperty('bilingus');
    });
  });

  describe('Gateway ‚Üí Agents Integration', () => {
    it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gateway', async () => {
      const agentData = {
        name: 'Ecosystem Test Agent',
        description: '–ê–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã',
        type: 'CUSTOMER_SERVICE',
        config: {
          model: 'gpt-4',
          temperature: 0.7,
          maxTokens: 1000,
          systemPrompt: '–í—ã - –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.',
          capabilities: ['customer_support', 'ecosystem_testing'],
        },
      };

      const response = await request(gatewayUrl)
        .post('/api/v1/hubus/agents/agents')
        .set('Authorization', `Bearer ${authToken}`)
        .send(agentData)
        .expect(201);

      expect(response.body).toHaveProperty('id');
      expect(response.body.name).toBe(agentData.name);
      expect(response.body.type).toBe(agentData.type);
      expect(response.body.status).toBe('INACTIVE');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
      (global as any).ecosystemTestAgentId = response.body.id;
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gateway', async () => {
      const agentId = (global as any).ecosystemTestAgentId;
      
      const response = await request(gatewayUrl)
        .get(`/api/v1/hubus/agents/agents/${agentId}`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.id).toBe(agentId);
      expect(response.body.name).toBe('Ecosystem Test Agent');
    });

    it('–¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gateway', async () => {
      const agentId = (global as any).ecosystemTestAgentId;
      
      const response = await request(gatewayUrl)
        .patch(`/api/v1/hubus/agents/agents/${agentId}/activate`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body.status).toBe('ACTIVE');
    });

    it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gateway', async () => {
      const agentId = (global as any).ecosystemTestAgentId;
      
      const orchestrationRequest = {
        message: '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.',
        agentId: agentId,
        context: {
          source: 'ecosystem_integration_test',
          testId: randomUUID(),
        },
        metadata: {
          testType: 'ecosystem_integration',
          timestamp: new Date().toISOString(),
        },
      };

      const response = await request(gatewayUrl)
        .post('/api/v1/hubus/agents/orchestration/process')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orchestrationRequest)
        .expect(200);

      expect(response.body).toHaveProperty('response');
      expect(response.body).toHaveProperty('agentId');
      expect(response.body).toHaveProperty('sessionId');
      expect(response.body).toHaveProperty('confidence');
      expect(response.body.agentId).toBe(agentId);
      expect(response.body.confidence).toBeGreaterThan(0);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º session ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
      (global as any).ecosystemTestSessionId = response.body.sessionId;
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gateway', async () => {
      const recommendationRequest = {
        message: '–•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
        context: {
          source: 'ecosystem_integration_test',
          testId: randomUUID(),
        },
      };

      const response = await request(gatewayUrl)
        .post('/api/v1/hubus/agents/orchestration/recommend')
        .set('Authorization', `Bearer ${authToken}`)
        .send(recommendationRequest)
        .expect(200);

      expect(response.body).toHaveProperty('agentId');
      expect(response.body).toHaveProperty('agentName');
      expect(response.body).toHaveProperty('agentType');
      expect(response.body).toHaveProperty('confidence');
      expect(response.body).toHaveProperty('reasoning');
      expect(response.body.confidence).toBeGreaterThan(0);
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Gateway', async () => {
      const response = await request(gatewayUrl)
        .get('/api/v1/hubus/agents/orchestration/sessions')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('sessions');
      expect(response.body).toHaveProperty('total');
      expect(response.body.sessions).toBeInstanceOf(Array);
      expect(response.body.sessions.length).toBeGreaterThan(0);
    });
  });

  describe('Gateway ‚Üí Loginus Integration', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Loginus —á–µ—Ä–µ–∑ Gateway', async () => {
      const response = await request(gatewayUrl)
        .get('/api/v1/ecosystem/loginus/health')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('status');
      expect(response.body.service).toBe('loginus');
    });

    it('–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Gateway ‚Üí Loginus', async () => {
      const response = await request(gatewayUrl)
        .post('/api/v1/auth/validate')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('valid');
      expect(response.body.valid).toBe(true);
      expect(response.body).toHaveProperty('userId');
      expect(response.body.userId).toBe(testUserId);
    });
  });

  describe('Gateway ‚Üí Bilingus Integration', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Bilingus —á–µ—Ä–µ–∑ Gateway', async () => {
      const response = await request(gatewayUrl)
        .get('/api/v1/ecosystem/bilingus/health')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('status');
      expect(response.body.service).toBe('bilingus-service');
    });

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–ª–∏–Ω–≥–µ —á–µ—Ä–µ–∑ Gateway', async () => {
      const response = await request(gatewayUrl)
        .get('/api/v1/billing/balance')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(response.body).toHaveProperty('balance');
      expect(response.body).toHaveProperty('currency');
      expect(response.body).toHaveProperty('userId');
      expect(response.body.userId).toBe(testUserId);
    });
  });

  describe('End-to-End Flow: Full Ecosystem', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Üí –±–∏–ª–ª–∏–Ω–≥', async () => {
      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const authResponse = await request(gatewayUrl)
        .post('/api/v1/auth/validate')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(authResponse.body.valid).toBe(true);

      // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
      const agentData = {
        name: 'E2E Test Agent',
        description: '–ê–≥–µ–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        type: 'CUSTOMER_SERVICE',
        config: {
          model: 'gpt-4',
          temperature: 0.7,
          maxTokens: 1000,
          systemPrompt: '–í—ã - –∞–≥–µ–Ω—Ç –¥–ª—è E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã.',
          capabilities: ['customer_support', 'e2e_testing'],
        },
      };

      const agentResponse = await request(gatewayUrl)
        .post('/api/v1/hubus/agents/agents')
        .set('Authorization', `Bearer ${authToken}`)
        .send(agentData)
        .expect(201);

      const agentId = agentResponse.body.id;

      // 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
      await request(gatewayUrl)
        .patch(`/api/v1/hubus/agents/agents/${agentId}/activate`)
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      // 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
      const orchestrationRequest = {
        message: '–ü–æ–ª–Ω—ã–π E2E —Ç–µ—Å—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Hubus',
        agentId: agentId,
        context: {
          source: 'e2e_ecosystem_test',
          testId: randomUUID(),
        },
      };

      const orchestrationResponse = await request(gatewayUrl)
        .post('/api/v1/hubus/agents/orchestration/process')
        .set('Authorization', `Bearer ${authToken}`)
        .send(orchestrationRequest)
        .expect(200);

      expect(orchestrationResponse.body.response).toBeDefined();
      expect(orchestrationResponse.body.sessionId).toBeDefined();

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞
      const billingResponse = await request(gatewayUrl)
        .get('/api/v1/billing/balance')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(billingResponse.body.balance).toBeDefined();
      expect(billingResponse.body.userId).toBe(testUserId);

      // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
      const sessionsResponse = await request(gatewayUrl)
        .get('/api/v1/hubus/agents/orchestration/sessions')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(200);

      expect(sessionsResponse.body.sessions.length).toBeGreaterThan(0);
    });
  });

  describe('Error Handling and Resilience', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞', async () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–µ—Ä–≤–∏—Å—É
      const response = await request(gatewayUrl)
        .get('/api/v1/ecosystem/nonexistent/health')
        .set('Authorization', `Bearer ${authToken}`)
        .expect(404);

      expect(response.body).toHaveProperty('error');
      expect(response.body.error).toContain('Service not found');
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã', async () => {
      await request(gatewayUrl)
        .get('/api/v1/hubus/agents/agents')
        .set('Authorization', 'Bearer invalid-token')
        .expect(401);
    });

    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
      const limitedToken = jwt.sign(
        {
          userId: testUserId,
          email: 'limited@example.com',
          scopes: ['agents:read'], // –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        },
        process.env.JWT_SECRET || 'test-secret-ecosystem',
        { expiresIn: '1h' }
      );

      await request(gatewayUrl)
        .post('/api/v1/hubus/agents/agents')
        .set('Authorization', `Bearer ${limitedToken}`)
        .send({
          name: 'Test Agent',
          type: 'CUSTOMER_SERVICE',
          config: { model: 'gpt-4', capabilities: ['test'] },
        })
        .expect(403);
    });
  });

  describe('Performance and Load Testing', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', async () => {
      const startTime = Date.now();
      
      const requests = Array.from({ length: 10 }, (_, i) =>
        request(gatewayUrl)
          .get('/health')
          .expect(200)
      );

      const responses = await Promise.all(requests);
      const endTime = Date.now();
      const duration = endTime - startTime;

      // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
      responses.forEach(response => {
        expect(response.body.status).toBe('healthy');
      });

      // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥)
      expect(duration).toBeLessThan(5000);
    });

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º', async () => {
      const requests = [
        request(gatewayUrl)
          .get('/api/v1/ecosystem/loginus/health')
          .set('Authorization', `Bearer ${authToken}`),
        request(gatewayUrl)
          .get('/api/v1/ecosystem/bilingus/health')
          .set('Authorization', `Bearer ${authToken}`),
        request(gatewayUrl)
          .get('/health/detailed')
          .set('Authorization', `Bearer ${authToken}`),
      ];

      const responses = await Promise.all(requests);

      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body).toHaveProperty('status');
      });
    });
  });
}); 