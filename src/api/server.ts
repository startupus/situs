import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import apiRoutes from './routes';
import { errorHandler, notFoundHandler, handleUncaughtExceptions } from './middleware/error.middleware';
import { env, server, validateCriticalEnv, getConfigInfo } from './config/environment';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ API
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ middleware –ø–æ –æ–±—Ä–∞–∑—Ü—É Strapi
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
validateCriticalEnv();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
handleUncaughtExceptions();

const app = express();
const PORT = server.port;

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è middleware
app.use(helmet());
app.use(compression());
app.use(cors({
  origin: server.cors.origin,
  credentials: server.cors.credentials
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: server.rateLimit.windowMs,
  max: server.rateLimit.max,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP',
  standardHeaders: true,
  legacyHeaders: false,
});
app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api', apiRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use(notFoundHandler);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const appServer = app.listen(PORT, () => {
  const config = getConfigInfo();
  console.log(`üöÄ Situs API Server –∑–∞–ø—É—â–µ–Ω (–Ω–∞ –æ—Å–Ω–æ–≤–µ Strapi –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã)`);
  console.log(`üìç URL: ${server.url}`);
  console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.environment}`);
  console.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.database}`);
  console.log(`üîí CORS: ${config.cors ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
  console.log(`üìö Swagger: ${config.swagger ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
  console.log(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${server.url}/api`);
  console.log(`üîó Health check: ${server.url}/api/health`);
  if (env.DEV_MODE) {
    console.log(`üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω`);
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω. –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
  appServer.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('SIGINT –ø–æ–ª—É—á–µ–Ω. –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');
  appServer.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.');
    process.exit(0);
  });
});

export default app;