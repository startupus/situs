import { Request, Response, NextFunction } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Resource Ownership Middleware
 * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å OWASP A01:2021 - Broken Access Control
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É:
 * - –í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—É—Ä—Å–∞
 * - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
 * - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤)
 */

export interface ResourceOwnershipOptions {
  resourceType: 'project' | 'page' | 'user';
  paramName?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ req.params (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'id')
  allowAdmin?: boolean; // –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
  allowModerator?: boolean; // –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
}

/**
 * Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º
 */
export const requireResourceOwnership = (options: ResourceOwnershipOptions) => {
  return async (req: Request, res: Response, next: NextFunction) => {
    try {
      const {
        resourceType,
        paramName = 'id',
        allowAdmin = true,
        allowModerator = false
      } = options;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!req.user) {
        return res.status(401).json({
          error: {
            status: 401,
            name: 'UnauthorizedError',
            message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
            details: 'Resource ownership check failed: no authenticated user'
          }
        });
      }

      const userId = req.user.id;
      const userRole = req.user.role;
      const resourceId = req.params[paramName];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID —Ä–µ—Å—É—Ä—Å–∞
      if (!resourceId) {
        return res.status(400).json({
          error: {
            status: 400,
            name: 'BadRequestError',
            message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä ${paramName}`,
            details: `Resource ownership check failed: missing ${paramName} parameter`
          }
        });
      }

      // –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–µ—Å—É—Ä—Å–∞–º (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
      if (allowAdmin && userRole === 'admin') {
        console.log(`üîê Admin access granted: ${userId} -> ${resourceType}:${resourceId}`);
        return next();
      }

      // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —Ä–µ—Å—É—Ä—Å–∞–º (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
      if (allowModerator && userRole === 'moderator') {
        console.log(`üîê Moderator access granted: ${userId} -> ${resourceType}:${resourceId}`);
        return next();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–º
      const isOwner = await checkResourceOwnership(resourceType, resourceId, userId);

      if (!isOwner) {
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        console.warn(`üö® SECURITY: Unauthorized access attempt`);
        console.warn(`   User: ${userId} (${userRole})`);
        console.warn(`   Resource: ${resourceType}:${resourceId}`);
        console.warn(`   IP: ${req.ip}`);
        console.warn(`   User-Agent: ${req.get('User-Agent')}`);

        return res.status(403).json({
          error: {
            status: 403,
            name: 'ForbiddenError',
            message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
            details: `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É ${resourceType}`
          }
        });
      }

      // –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
      console.log(`‚úÖ Resource access granted: ${userId} -> ${resourceType}:${resourceId}`);
      next();

    } catch (error) {
      console.error('‚ùå Resource ownership check error:', error);
      return res.status(500).json({
        error: {
          status: 500,
          name: 'InternalServerError',
          message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞'
        }
      });
    }
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function checkResourceOwnership(
  resourceType: string,
  resourceId: string,
  userId: string
): Promise<boolean> {
  try {
    switch (resourceType) {
      case 'project':
        const project = await prisma.project.findFirst({
          where: {
            id: resourceId,
            userId: userId // –ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          },
          select: { id: true }
        });
        return !!project;

      case 'page':
        const page = await prisma.page.findFirst({
          where: {
            id: resourceId,
            project: {
              userId: userId // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–µ–∫—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
          },
          select: { id: true }
        });
        return !!page;

      case 'user':
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        return resourceId === userId;

      default:
        console.error(`‚ùå Unknown resource type: ${resourceType}`);
        return false;
    }
  } catch (error) {
    console.error(`‚ùå Database error checking ownership:`, error);
    return false;
  }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
 */
export const requireProjectOwnership = requireResourceOwnership({
  resourceType: 'project',
  allowAdmin: true,
  allowModerator: false
});

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
 */
export const requirePageOwnership = requireResourceOwnership({
  resourceType: 'page',
  allowAdmin: true,
  allowModerator: true // –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
});

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const requireUserProfileAccess = requireResourceOwnership({
  resourceType: 'user',
  allowAdmin: true,
  allowModerator: false
});

export default {
  requireResourceOwnership,
  requireProjectOwnership,
  requirePageOwnership,
  requireUserProfileAccess
};