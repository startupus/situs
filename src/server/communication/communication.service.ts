import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../database/prisma.service';

export enum CommunicationChannel {
  EMAIL = 'EMAIL',
  SMS = 'SMS',
  TELEGRAM = 'TELEGRAM',
  WHATSAPP = 'WHATSAPP',
  SLACK = 'SLACK'
}

export interface CommunicationMessage {
  to: string;
  subject?: string;
  content: string;
  template?: string;
  variables?: Record<string, any>;
}

export interface CommunicationResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

@Injectable()
export class CommunicationService {
  private readonly logger = new Logger(CommunicationService.name);

  constructor(private prisma: PrismaService) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
   */
  async sendMessage(
    channel: CommunicationChannel,
    message: CommunicationMessage
  ): Promise<CommunicationResult> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
      const settings = await this.getChannelSettings(channel);
      
      if (!settings?.enabled) {
        throw new Error(`–ö–∞–Ω–∞–ª ${channel} –æ—Ç–∫–ª—é—á–µ–Ω`);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      const processedContent = message.template 
        ? this.processTemplate(message.template, message.variables || {})
        : message.content;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      switch (channel) {
        case CommunicationChannel.EMAIL:
          return await this.sendEmail(message.to, message.subject || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', processedContent, settings.config);
        
        case CommunicationChannel.SMS:
          return await this.sendSMS(message.to, processedContent, settings.config);
        
        case CommunicationChannel.TELEGRAM:
          return await this.sendTelegram(message.to, processedContent, settings.config);
        
        case CommunicationChannel.WHATSAPP:
          return await this.sendWhatsApp(message.to, processedContent, settings.config);
        
        case CommunicationChannel.SLACK:
          return await this.sendSlack(message.to, processedContent, settings.config);
        
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª: ${channel}`);
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ ${channel}:`, error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏
   */
  async getChannelSettings(channel: CommunicationChannel) {
    return await this.prisma.communicationSettings.findUnique({
      where: { channel }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏
   */
  async updateChannelSettings(
    channel: CommunicationChannel,
    enabled: boolean,
    config: any,
    inviteTemplate?: string,
    reminderTemplate?: string
  ) {
    return await this.prisma.communicationSettings.upsert({
      where: { channel },
      update: {
        enabled,
        config,
        inviteTemplate,
        reminderTemplate,
      },
      create: {
        channel,
        enabled,
        config,
        inviteTemplate,
        reminderTemplate,
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–æ–≤
   */
  async getAllChannelSettings() {
    return await this.prisma.communicationSettings.findMany({
      orderBy: { channel: 'asc' }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
   */
  private processTemplate(template: string, variables: Record<string, any>): string {
    let processed = template;
    
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{\\s*${key}\\s*}}`, 'g');
      processed = processed.replace(regex, String(value));
    });
    
    return processed;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ email (MVP - —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
   */
  private async sendEmail(
    to: string,
    subject: string,
    content: string,
    config: any
  ): Promise<CommunicationResult> {
    this.logger.log(`üìß EMAIL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${to}`);
    this.logger.log(`–¢–µ–º–∞: ${subject}`);
    this.logger.log(`–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${content}`);
    this.logger.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    // –í MVP –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return {
      success: true,
      messageId: `email_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async sendSMS(
    to: string,
    content: string,
    config: any
  ): Promise<CommunicationResult> {
    this.logger.log(`üì± SMS (–∑–∞–≥–ª—É—à–∫–∞) –Ω–∞ ${to}: ${content}`);
    this.logger.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    return {
      success: false,
      error: 'SMS –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async sendTelegram(
    to: string,
    content: string,
    config: any
  ): Promise<CommunicationResult> {
    this.logger.log(`üì± TELEGRAM (–∑–∞–≥–ª—É—à–∫–∞) –Ω–∞ ${to}: ${content}`);
    this.logger.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    return {
      success: false,
      error: 'Telegram –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async sendWhatsApp(
    to: string,
    content: string,
    config: any
  ): Promise<CommunicationResult> {
    this.logger.log(`üì± WHATSAPP (–∑–∞–≥–ª—É—à–∫–∞) –Ω–∞ ${to}: ${content}`);
    this.logger.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    return {
      success: false,
      error: 'WhatsApp –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private async sendSlack(
    to: string,
    content: string,
    config: any
  ): Promise<CommunicationResult> {
    this.logger.log(`üí¨ SLACK (–∑–∞–≥–ª—É—à–∫–∞) –Ω–∞ ${to}: ${content}`);
    this.logger.log(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${JSON.stringify(config, null, 2)}`);
    
    return {
      success: false,
      error: 'Slack –∫–∞–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
    };
  }
}
