import 'reflect-metadata';
import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { AppModule } from './app.module';
import { GlobalExceptionFilter } from './common/filters/global-exception.filter';
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞
process.on('uncaughtException', (err) => {
  try { console.error('[FATAL] uncaughtException:', err); } catch {}
});
process.on('unhandledRejection', (reason) => {
  try { console.error('[FATAL] unhandledRejection:', reason); } catch {}
});

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ NestJS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * 
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç:
 * - –í–∞–ª–∏–¥–∞—Ü–∏—é
 * - CORS
 * - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 * - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã
 */
async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    forbidNonWhitelisted: true,
    transform: true,
  }));

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã
  app.useGlobalFilters(new GlobalExceptionFilter());
  app.useGlobalInterceptors(new LoggingInterceptor());

  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  app.enableCors({
    origin: ['http://localhost:5177', 'http://127.0.0.1:5177', 'http://localhost:3000', 'http://127.0.0.1:3000', '*'],
    credentials: false,
    methods: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    maxAge: 86400,
  });

  // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  // const config = new DocumentBuilder()
  //   .setTitle('Situs API')
  //   .setDescription('API –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤ Situs')
  //   .setVersion('1.0')
  //   .addBearerAuth()
  //   .addTag('auth', '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
  //   .addTag('projects', '–ü—Ä–æ–µ–∫—Ç—ã')
  //   .addTag('users', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
  //   .addTag('mcp', 'Model Context Protocol')
  //   .build();

  // const document = SwaggerModule.createDocument(app, config);
  // SwaggerModule.setup('api/docs', app, document);

  const port = Number(process.env.PORT || 3001);
  try { console.log(`[BOOT] About to listen on port ${port}`); } catch {}
  // –†—É—á–Ω–æ–π SSE endpoint –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Express)
  const httpAdapter: any = app.getHttpAdapter();
  const instance: any = httpAdapter.getInstance?.();
  try {
    const { ProjectsEventsService } = await import('./projects/projects-events.service');
    const events = app.get(ProjectsEventsService);
    // Preflight –¥–ª—è FF (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    instance.options('/api/projects/events', (req: any, res: any) => {
      const origin = req.headers.origin || '*';
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.setHeader('Vary', 'Origin');
      res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      res.status(204).end();
    });

    instance.get('/api/projects/events', (req: any, res: any) => {
      const origin = req.headers.origin || '*';
      res.setHeader('Access-Control-Allow-Origin', origin);
      res.setHeader('Vary', 'Origin');
      res.setHeader('Content-Type', 'text/event-stream; charset=utf-8');
      res.setHeader('Cache-Control', 'no-cache, no-transform');
      res.setHeader('Connection', 'keep-alive');
      res.setHeader('X-Accel-Buffering', 'no');
      res.flushHeaders?.();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —á—Ç–æ–±—ã FF –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–æ–∫–∞
      const subId = (req.query?.sub as string) || 'unknown';
      res.write(`: connected sub=${subId}\n`);
      res.write(`retry: 2000\n\n`);

      const send = (data: any) => res.write(`data: ${JSON.stringify(data)}\n\n`);
      const subscription = (events as any).asObservable().subscribe((evt: any) => send(evt.data ?? evt));
      // –ü—É–ª—å—Å
      const heartbeat = setInterval(() => { try { res.write(`: ping\n\n`); } catch {} }, 15000);
      req.on('close', () => { try { subscription.unsubscribe(); } catch {}; try { clearInterval(heartbeat); } catch {}; try { res.end(); } catch {} });
    });
  } catch (e: any) {
    console.warn('SSE not initialized:', e && (e.message || e));
  }
  await app.listen(port, '0.0.0.0');
  console.log('üöÄ Situs NestJS Server –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç', port);
  console.log(`üîó API –±–∞–∑–æ–≤—ã–π URL: http://localhost:${port}/api`);
  console.log(`üíö Health: http://localhost:${port}/health`);
  try { console.log(`[BOOT] Listening on http://localhost:${port}`); } catch {}

  console.log('üöÄ Situs NestJS Server –∑–∞–ø—É—â–µ–Ω!');
  console.log(`üîó API –±–∞–∑–æ–≤—ã–π URL: http://localhost:${port}/api`);
  console.log(`üíö Health: http://localhost:${port}/health`);
}

bootstrap().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
});
