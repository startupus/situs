import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Prisma ORM
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */
@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  constructor() {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–ª–≥–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    console.log('[Prisma] constructor start');
    super({
      log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['error'],
    });
    console.log('[Prisma] constructor end');
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è
   */
  async onModuleInit() {
    console.log('[Prisma] onModuleInit start');
    try {
      // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è dev-—Ä–µ–∂–∏–º–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
      const connectTimeout = process.env.NODE_ENV === 'production' ? 10000 : 3000;
      
      await Promise.race([
        this.$connect(),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('DB connect timeout')), connectTimeout)
        )
      ]);
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // Dev-seed: –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í—ã–ø–æ–ª–Ω—è–µ–º best-effort –±–µ–∑ await.
      if (process.env.NODE_ENV !== 'production') {
        setImmediate(async () => {
          try {
            const devEmail = 'dev@situs.local';
            await this.user.upsert({
              where: { email: devEmail },
              update: {},
              create: { username: 'dev', email: devEmail, password: 'dev' },
            });
            console.log('üë§ dev-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ (best-effort)');
          } catch (e: any) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å dev-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', (e && (e.message || e)));
          }
        });
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', (error && (error.message || error)));
      // –í dev-—Ä–µ–∂–∏–º–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫: API/health –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã
      if (process.env.NODE_ENV === 'production') {
        throw error;
      }
    }
    console.log('[Prisma] onModuleInit end');
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
   */
  async onModuleDestroy() {
    await this.$disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async cleanDatabase() {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ production');
    }

    const tablenames = await this.$queryRaw<Array<{ tablename: string }>>`
      SELECT tablename FROM pg_tables WHERE schemaname='public'
    `;

    for (const { tablename } of tablenames) {
      if (tablename !== '_prisma_migrations') {
        try {
          await this.$executeRawUnsafe(`TRUNCATE TABLE "public"."${tablename}" CASCADE;`);
        } catch (error: any) {
          console.log({ error: (error && (error.message || error)) });
        }
      }
    }
  }
}
