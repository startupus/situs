import { useState, useEffect, useCallback } from 'react';

export type InterfaceTheme = 'light' | 'dark';

export const useInterfaceTheme = () => {
  const [theme, setTheme] = useState<InterfaceTheme>('system');
  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –¢–û–õ–¨–ö–û –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const applyInterfaceTheme = useCallback((newTheme: 'light' | 'dark') => {
    console.log('üé® Interface Theme: Applying theme to interface only:', newTheme);

    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const interfaceContainer = document.querySelector('.redaktus-interface') as HTMLElement;
    const adminContainer = document.querySelector('.redaktus-admin') as HTMLElement;

    if (interfaceContainer) {
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º—ã
      interfaceContainer.classList.remove('interface-light', 'interface-dark', 'dark', 'light');

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Ç–æ–ª—å–∫–æ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
      interfaceContainer.classList.add(`interface-${newTheme}`);
      interfaceContainer.setAttribute('data-interface-theme', newTheme);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      if (newTheme === 'dark') {
        interfaceContainer.style.setProperty('--interface-bg', '#1f2937');
        interfaceContainer.style.setProperty('--interface-text', '#f9fafb');
        interfaceContainer.style.setProperty('--interface-border', '#374151');
        interfaceContainer.style.setProperty('--interface-surface', '#374151');
      } else {
        interfaceContainer.style.setProperty('--interface-bg', '#ffffff');
        interfaceContainer.style.setProperty('--interface-text', '#1f2937');
        interfaceContainer.style.setProperty('--interface-border', '#e5e7eb');
        interfaceContainer.style.setProperty('--interface-surface', '#f9fafb');
      }

      console.log('üé® Interface Theme: Interface theme applied:', newTheme);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –í–°–ï–ú –ø–∞–Ω–µ–ª—è–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const interfacePanels = document.querySelectorAll('.redaktus-interface-panel') as NodeListOf<HTMLElement>;
    interfacePanels.forEach((panel) => {
      panel.setAttribute('data-interface-theme', newTheme);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–Ω–µ–ª–∏
      if (newTheme === 'dark') {
        panel.style.setProperty('--interface-bg', '#1f2937');
        panel.style.setProperty('--interface-text', '#f9fafb');
        panel.style.setProperty('--interface-border', '#374151');
        panel.style.setProperty('--interface-surface', '#374151');
      } else {
        panel.style.setProperty('--interface-bg', '#ffffff');
        panel.style.setProperty('--interface-text', '#1f2937');
        panel.style.setProperty('--interface-border', '#e5e7eb');
        panel.style.setProperty('--interface-surface', '#f9fafb');
      }
    });

    if (adminContainer) {
      // –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∞–¥–º–∏–Ω—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
      adminContainer.classList.remove('admin-light', 'admin-dark', 'dark', 'light');
      adminContainer.classList.add(`admin-${newTheme}`);
      adminContainer.setAttribute('data-admin-theme', newTheme);
    }

    console.log('üé® Interface Theme: Applied to', interfacePanels.length, 'panels');
    // –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ document.documentElement - —ç—Ç–æ –∏–∑–æ–ª–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—É—é —Ç–µ–º—É
  const updateResolvedTheme = useCallback(() => {
    // –¢–µ–ø–µ—Ä—å —Ç–µ–º–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–∞ resolvedTheme
    if (theme !== resolvedTheme) {
      setResolvedTheme(theme);
      applyInterfaceTheme(theme);
    }
  }, [theme, resolvedTheme, applyInterfaceTheme]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const savedTheme = localStorage.getItem('interface-theme') as InterfaceTheme;
    if (savedTheme && ['light', 'dark'].includes(savedTheme)) {
      setTheme(savedTheme);
    } else {
      // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–µ–º–∞ system –∏–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º light
      setTheme('light');
      localStorage.setItem('interface-theme', 'light');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    updateResolvedTheme();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    };

    mediaQuery.addEventListener('change', handleChange);

    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    updateResolvedTheme();
    localStorage.setItem('interface-theme', theme);
  }, [theme]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã - —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É light –∏ dark
  const toggleTheme = () => {
    console.log('üé® Interface Theme: toggleTheme called!');

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É light –∏ dark
    const newTheme: InterfaceTheme = theme === 'light' ? 'dark' : 'light';
    console.log('üé® Interface Theme: Theme toggle:', theme, '->', newTheme);
    setTheme(newTheme);
  };

  return {
    theme,
    resolvedTheme,
    toggleTheme,
    setTheme,
  };
};
