import { useState, useEffect, useCallback } from 'react';

export type CanvasTheme = 'light' | 'dark' | 'system';

export const useCanvasTheme = () => {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
  const [theme, setTheme] = useState<CanvasTheme>('system');
  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
  const getSystemTheme = useCallback((): 'light' | 'dark' => {
    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    console.log('üé® Canvas: System theme detected:', isDark ? 'dark' : 'light');
    return isDark ? 'dark' : 'light';
  }, []);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –∫–∞–Ω–≤–∞—Å—É –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É TailGrids –ø–æ–¥—Ö–æ–¥—É
  const applyTheme = useCallback((newTheme: 'light' | 'dark') => {
    console.log('üé® Canvas: Attempting to apply theme:', newTheme);
    const canvasContainer = document.querySelector('.redaktus-canvas');
    console.log('üé® Canvas: Container found:', !!canvasContainer);
    
    if (canvasContainer) {
      console.log('üé® Canvas: Classes before:', canvasContainer.className);
      
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã
      canvasContainer.classList.remove('canvas-light', 'canvas-dark');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
      canvasContainer.classList.add(`canvas-${newTheme}`);
      
      // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TailWindCSS dark: –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
      // –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å dark –Ω–∞ –∫–∞–Ω–≤–∞—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      if (newTheme === 'dark') {
        canvasContainer.classList.add('dark');
      } else {
        canvasContainer.classList.remove('dark');
      }
      
      console.log('üé® Canvas: Classes after:', canvasContainer.className);
      console.log('üé® Canvas: Theme applied successfully:', newTheme);
    } else {
      console.warn('üé® Canvas: Container (.redaktus-canvas) not found!');
    }
  }, []);



  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    console.log('üé® Canvas: useEffect initialization');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('canvas-theme') as CanvasTheme;
    console.log('üé® Canvas: Saved theme from localStorage:', savedTheme);
    
    if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {
      console.log('üé® Canvas: Setting theme to:', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      console.log('üé® Canvas: System theme changed');
      if (theme === 'system') {
        const systemTheme = getSystemTheme();
        if (systemTheme !== resolvedTheme) {
          setResolvedTheme(systemTheme);
          applyTheme(systemTheme);
        }
      }
    };
    
    mediaQuery.addEventListener('change', handleChange);
    
    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [theme, resolvedTheme]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    console.log('üé® Canvas: Theme changed to:', theme);
    
    let newResolvedTheme: 'light' | 'dark';
    
    if (theme === 'system') {
      newResolvedTheme = getSystemTheme();
    } else {
      newResolvedTheme = theme;
    }
    
    console.log('üé® Canvas: Updating resolved theme from', resolvedTheme, 'to', newResolvedTheme);
    
    if (newResolvedTheme !== resolvedTheme) {
      setResolvedTheme(newResolvedTheme);
      applyTheme(newResolvedTheme);
    }
    
    localStorage.setItem('canvas-theme', theme);
  }, [theme, resolvedTheme]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    console.log('üé® Canvas: toggleTheme called! Current theme:', theme);
    const themes: CanvasTheme[] = ['system', 'light', 'dark'];
    const currentIndex = themes.indexOf(theme);
    const nextIndex = (currentIndex + 1) % themes.length;
    const newTheme = themes[nextIndex];
    console.log('üé® Canvas: Theme toggle:', theme, '->', newTheme);
    setTheme(newTheme);
  };

  return {
    theme,
    resolvedTheme,
    toggleTheme,
    setTheme
  };
}; 