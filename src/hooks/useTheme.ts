import { useState, useEffect, useCallback } from 'react';

export type Theme = 'light' | 'dark' | 'system';

export const useTheme = () => {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
  const [theme, setTheme] = useState<Theme>('system');
  const [resolvedTheme, setResolvedTheme] = useState<'light' | 'dark'>('light');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
  const getSystemTheme = useCallback((): 'light' | 'dark' => {
    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    return isDark ? 'dark' : 'light';
  }, []);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ì–õ–û–ë–ê–õ–¨–ù–û –∫ HTML —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  const applyTheme = useCallback(
    (newTheme: 'light' | 'dark') => {
      const htmlElement = document.documentElement;

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –¢–ï–ú–´ –ö –ö–û–†–ù–ï–í–û–ú–£ –≠–õ–ï–ú–ï–ù–¢–£
      if (newTheme === 'dark') {
        htmlElement.classList.add('dark');
        console.log('üé® GLOBAL: Dark theme applied to HTML root');
      } else {
        htmlElement.classList.remove('dark');
        console.log('üé® GLOBAL: Light theme applied to HTML root');
      }

      // –¢–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const interfaceContainer = document.querySelector('.redaktus-interface');
      if (interfaceContainer) {
        interfaceContainer.classList.remove('interface-light', 'interface-dark');
        interfaceContainer.classList.add(`interface-${newTheme}`);

        if (newTheme === 'dark') {
          interfaceContainer.classList.add('dark');
        } else {
          interfaceContainer.classList.remove('dark');
        }
      }

      console.log('üé® Theme system:', theme, '-> resolved:', newTheme);
    },
    [theme],
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—É—é —Ç–µ–º—É
  const updateResolvedTheme = useCallback(() => {
    let newResolvedTheme: 'light' | 'dark';

    if (theme === 'system') {
      newResolvedTheme = getSystemTheme();
    } else {
      newResolvedTheme = theme;
    }

    if (newResolvedTheme !== resolvedTheme) {
      setResolvedTheme(newResolvedTheme);
      applyTheme(newResolvedTheme);
    }
  }, [theme, resolvedTheme, getSystemTheme, applyTheme]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('interface-theme') as Theme;
    if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {
      setTheme(savedTheme);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    updateResolvedTheme();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        updateResolvedTheme();
      }
    };

    mediaQuery.addEventListener('change', handleChange);

    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    updateResolvedTheme();
    localStorage.setItem('interface-theme', theme);
  }, [theme]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    console.log('üé® Interface toggleTheme called!');
    const themes: Theme[] = ['system', 'light', 'dark'];
    const currentIndex = themes.indexOf(theme);
    const nextIndex = (currentIndex + 1) % themes.length;
    const newTheme = themes[nextIndex];
    console.log('üé® Interface theme toggle:', theme, '->', newTheme);
    setTheme(newTheme);
  };

  return {
    theme,
    resolvedTheme,
    toggleTheme,
    setTheme,
  };
};
