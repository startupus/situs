generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  FROZEN
  CLOSED
}

enum AccountType {
  PERSONAL
  BUSINESS
}

model Account {
  id            String         @id @default(uuid())
  userId        String
  balance       Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accountType   AccountType    @default(PERSONAL)
  deletedAt     DateTime?
  limits        Json?
  currency      String
  status        AccountStatus  @default(ACTIVE)
  // --- [START: relations for Payment/Subscription] ---
  payments      Payment[]
  subscriptions Subscription[]
  // --- [END: relations for Payment/Subscription] ---
}

enum Currency {
  USD
  EUR
  RUB
  BTC
  ETH
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
  REFUND
  COMMISSION
  BONUS
  PENALTY
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}

model Transaction {
  id            String            @id @default(uuid())
  fromAccountId String?
  toAccountId   String?
  amount        Float
  currency      Currency
  type          TransactionType
  status        TransactionStatus
  description   String?
  metadata      Json?
  externalId    String?
  providerId    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?
}

/// --- [START: Payment/Subscription/Tariff models, v20250708] ---
model Payment {
  id             String         @id @default(cuid())
  accountId      String?
  subscriptionId String?
  // transactionId String?
  // invoiceId     String?
  amount         Decimal
  currency       String
  status         PaymentStatus
  method         PaymentMethod
  gateway        PaymentGateway
  externalId     String?
  metadata       Json?
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  refundedAt     DateTime?
  isDeleted      Boolean        @default(false)
  deletedAt      DateTime?
  // Relations
  account        Account?       @relation(fields: [accountId], references: [id])
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  // transaction   Transaction? @relation(fields: [transactionId], references: [id])
  // invoice       Invoice? @relation(fields: [invoiceId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELED
}

enum PaymentMethod {
  CARD
  PAYPAL
  YOOMONEY
  CRYPTO
  INTERNAL
}

enum PaymentGateway {
  STRIPE
  PAYPAL
  YOOMONEY
  CRYPTO
  MANUAL
}

model Subscription {
  id          String             @id @default(cuid())
  accountId   String
  tariffId    String
  status      SubscriptionStatus
  startDate   DateTime
  endDate     DateTime?
  renewalDate DateTime?
  canceledAt  DateTime?
  amount      Decimal
  currency    String
  features    Json?
  limits      Json?
  isDeleted   Boolean            @default(false)
  deletedAt   DateTime?
  // Relations
  account     Account            @relation(fields: [accountId], references: [id])
  tariff      Tariff             @relation(fields: [tariffId], references: [id])
  payments    Payment[]
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  SUSPENDED
  TRIAL
  EXPIRED
}

model Tariff {
  id            String         @id @default(cuid())
  name          String
  description   String?
  price         Decimal
  currency      String
  period        String // month, year, etc.
  features      Json?
  limits        Json?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

/// --- [END: Payment/Subscription/Tariff models, v20250708] ---
