version: '3.8'

services:
  # Основная база данных для Situs Service
  postgres:
    image: postgres:14
    container_name: situs-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-situs}
      POSTGRES_USER: ${POSTGRES_USER:-situs}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-situs_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - situs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-situs} -d ${POSTGRES_DB:-situs}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Тестовая база данных
  postgres-test:
    image: postgres:14
    container_name: situs-postgres-test
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-situs_test}
      POSTGRES_USER: ${POSTGRES_USER:-situs}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-situs_password}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - situs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-situs} -d ${POSTGRES_DB:-situs_test}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования и сессий
  redis:
    image: redis:7
    container_name: situs-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - situs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Situs Service - основной сервис
  situs-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: situs-service
    ports:
      - "${SITUS_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-situs}:${POSTGRES_PASSWORD:-situs_password}@postgres:5432/${POSTGRES_DB:-situs}?schema=public
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - situs-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prisma Studio для управления базой данных
  prisma-studio:
    image: node:18-alpine
    container_name: situs-prisma-studio
    working_dir: /app
    volumes:
      - .:/app
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-situs}:${POSTGRES_PASSWORD:-situs_password}@postgres:5432/${POSTGRES_DB:-situs}?schema=public
    depends_on:
      - postgres
    networks:
      - situs-network
    command: ["npx", "prisma", "studio", "--hostname", "0.0.0.0", "--port", "5555"]

volumes:
  postgres_data:
  postgres_test_data:
  redis_data:

networks:
  situs-network:
    driver: bridge 