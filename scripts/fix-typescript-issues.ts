#!/usr/bin/env ts-node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å TypeScript –≤ –ø—Ä–æ–µ–∫—Ç–µ Hubus
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ any/unknown
 */

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

interface ServiceConfig {
  name: string;
  path: string;
  hasTypeScript: boolean;
  needsComposite: boolean;
}

interface ZodFixPattern {
  pattern: RegExp;
  replacement: string;
  description: string;
}

class TypeScriptFixer {
  private readonly services: ServiceConfig[] = [
    { name: 'hubus-service', path: 'services/hubus-service', hasTypeScript: true, needsComposite: true },
    { name: 'client-service', path: 'services/client-service', hasTypeScript: true, needsComposite: true },
    { name: 'bilingus-service', path: 'services/bilingus-service', hasTypeScript: true, needsComposite: true },
    { name: 'agents-service', path: 'services/agents-service', hasTypeScript: true, needsComposite: true },
    { name: 'gateway-service', path: 'services/gateway-service', hasTypeScript: true, needsComposite: true },
    { name: 'chat-service', path: 'services/chat-service', hasTypeScript: true, needsComposite: true },
    { name: 'loginus', path: 'services/loginus', hasTypeScript: true, needsComposite: true },
    { name: 'controlus-service', path: 'services/controlus-service', hasTypeScript: true, needsComposite: true },
    { name: 'situs-service', path: 'services/situs-service', hasTypeScript: true, needsComposite: true },
    { name: 'testus-service', path: 'services/testus-service', hasTypeScript: true, needsComposite: true },
  ];

  private readonly zodFixPatterns: ZodFixPattern[] = [
    {
      pattern: /\.transform\(Number\)\.default\('(\d+)'\)/g,
      replacement: '.transform(Number).default($1)',
      description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö defaults –≤ Zod'
    },
    {
      pattern: /\.transform\(val => val === 'true'\)\.default\('true'\)/g,
      replacement: '.transform((val: string) => val === "true").default(true)',
      description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ boolean defaults (true) –≤ Zod'
    },
    {
      pattern: /\.transform\(val => val === 'true'\)\.default\('false'\)/g,
      replacement: '.transform((val: string) => val === "true").default(false)',
      description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ boolean defaults (false) –≤ Zod'
    },
    {
      pattern: /error\.errors\.forEach/g,
      replacement: 'error.issues.forEach',
      description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ error.errors –Ω–∞ error.issues'
    },
    {
      pattern: /error\.issues\.forEach\(err => {/g,
      replacement: 'error.issues.forEach((err: any) => {',
      description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è err –≤ ZodError'
    }
  ];

  public async fixAllIssues(): Promise<void> {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å TypeScript –≤ –ø—Ä–æ–µ–∫—Ç–µ Hubus...');
    console.log('üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ any/unknown –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏\n');

    await this.fixTsConfigComposite();
    await this.fixZodDefaults();
    await this.cleanBuildCache();
    await this.verifyFixes();
  }

  private async fixTsConfigComposite(): Promise<void> {
    console.log('1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ tsconfig.json —Ñ–∞–π–ª–æ–≤...');
    
    let fixedCount = 0;
    
    for (const service of this.services) {
      const configPath = path.join(service.path, 'tsconfig.json');
      
      if (fs.existsSync(configPath)) {
        try {
          const content = fs.readFileSync(configPath, 'utf8');
          const config = JSON.parse(content);
          
          if (service.needsComposite && !config.compilerOptions?.composite) {
            config.compilerOptions = config.compilerOptions || {};
            config.compilerOptions.composite = true;
            
            // –£–±–∏—Ä–∞–µ–º noEmit –¥–ª—è composite –ø—Ä–æ–µ–∫—Ç–æ–≤
            if (config.compilerOptions.noEmit) {
              delete config.compilerOptions.noEmit;
              config.compilerOptions.outDir = config.compilerOptions.outDir || './dist';
            }
            
            fs.writeFileSync(configPath, JSON.stringify(config, null, 2) + '\n');
            console.log(`   ‚úÖ ${service.name}: –¥–æ–±–∞–≤–ª–µ–Ω composite: true`);
            fixedCount++;
          } else {
            console.log(`   ‚ö™ ${service.name}: —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
          }
        } catch (error) {
          console.error(`   ‚ùå ${service.name}: ${(error as Error).message}`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  ${service.name}: tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    console.log(`   üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount} —Ñ–∞–π–ª–æ–≤\n`);
  }

  private async fixZodDefaults(): Promise<void> {
    console.log('2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Zod defaults...');
    
    const filesToFix = [
      'services/loginus/src/config/environment.ts',
      'services/controlus-service/src/config/environment.ts'
    ];
    
    for (const filePath of filesToFix) {
      if (fs.existsSync(filePath)) {
        try {
          let content = fs.readFileSync(filePath, 'utf8');
          let changesCount = 0;
          
          for (const pattern of this.zodFixPatterns) {
            const matches = content.match(pattern.pattern);
            if (matches) {
              content = content.replace(pattern.pattern, pattern.replacement);
              changesCount += matches.length;
            }
          }
          
          if (changesCount > 0) {
            fs.writeFileSync(filePath, content);
            console.log(`   ‚úÖ ${filePath}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${changesCount} –ø—Ä–æ–±–ª–µ–º`);
          } else {
            console.log(`   ‚ö™ ${filePath}: —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω`);
          }
        } catch (error) {
          console.error(`   ‚ùå ${filePath}: ${(error as Error).message}`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è  ${filePath}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    }
    
    console.log('');
  }

  private async cleanBuildCache(): Promise<void> {
    console.log('3. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ TypeScript...');
    
    try {
      // –£–¥–∞–ª—è–µ–º .tsbuildinfo —Ñ–∞–π–ª—ã
      execSync('find . -name "*.tsbuildinfo" -delete', { stdio: 'pipe' });
      console.log('   ‚úÖ .tsbuildinfo —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
      
      // –û—á–∏—â–∞–µ–º TypeScript build
      execSync('npx tsc --build --clean', { stdio: 'pipe' });
      console.log('   ‚úÖ TypeScript –∫—ç—à –æ—á–∏—â–µ–Ω');
      
    } catch (error) {
      console.warn(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: ${(error as Error).message}`);
    }
    
    console.log('');
  }

  private async verifyFixes(): Promise<void> {
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    try {
      execSync('npx tsc --build', { stdio: 'pipe' });
      console.log('   ‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    } catch (error) {
      console.warn('   ‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:');
      console.warn(`   ${(error as Error).message}`);
    }
    
    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const fixer = new TypeScriptFixer();
fixer.fixAllIssues()
  .then(() => {
    console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –ø—Ä–æ–±–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ TypeScript Server –≤ VS Code: Cmd+Shift+P ‚Üí "TypeScript: Restart TS Server"');
    console.log('   2. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ VS Code');
    console.log('   3. –í—Å–µ —Å–∫—Ä–∏–ø—Ç—ã —Ç–µ–ø–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞ (TypeScript, —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è)');
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', (error as Error).message);
    process.exit(1);
  }); 