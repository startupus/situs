#!/usr/bin/env tsx
import {
  PrismaClient,
  ProductType,
  PageStatus,
  PageType,
  ProjectStatus,
  GlobalRole,
  UserStatus,
  ProductStatus,
  MenuItemType,
  AccessLevel,
} from '@prisma/client';

const prisma = new PrismaClient({ log: ['warn', 'error'] });

function slugify(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\u0400-\u04FF\s-]/g, '')
    .trim()
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-');
}

async function ensureDemoOwner() {
  const username = 'demo-owner';
  const email = 'demo-owner@example.com';
  const existing = await prisma.user.findUnique({ where: { username } });
  if (existing) return existing;

  return prisma.user.create({
    data: {
      username,
      email,
      password: 'dev-password',
      globalRole: GlobalRole.BUSINESS,
      status: UserStatus.ACTIVE,
    },
  });
}

async function createDemoProject(name: string, description: string, owner: any) {
  const slug = slugify(name);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  const existing = await prisma.project.findUnique({ where: { slug } });
  if (existing) {
    console.log(`üì¶ –ü—Ä–æ–µ–∫—Ç "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return existing;
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  const project = await prisma.project.create({
    data: {
      name,
      slug,
      description,
      ownerId: owner.id,
      status: ProjectStatus.ACTIVE,
      isPublished: true,
      settings: JSON.stringify({
        theme: 'auto',
        language: 'ru',
        primaryColor: '#4F46E5',
        secondaryColor: '#10B981',
      }),
    },
  });
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${project.name}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç WEBSITE
  const website = await prisma.product.create({
    data: {
      name: '–°–∞–π—Ç',
      description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞',
      type: ProductType.WEBSITE,
      status: ProductStatus.ACTIVE,
      projectId: project.id,
      settings: JSON.stringify({
        theme: 'modern',
        layout: 'responsive',
      }),
    },
  });
  console.log(`üåê –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç WEBSITE: ${website.id}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç ECOMMERCE
  const store = await prisma.product.create({
    data: {
      name: '–ú–∞–≥–∞–∑–∏–Ω',
      description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–µ–∫—Ç–∞',
      type: ProductType.ECOMMERCE,
      status: ProductStatus.ACTIVE,
      projectId: project.id,
      settings: JSON.stringify({
        currency: 'RUB',
        paymentMethods: ['card', 'cash', 'online'],
        shippingMethods: ['pickup', 'courier', 'post'],
      }),
    },
  });
  console.log(`üõí –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç ECOMMERCE: ${store.id}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç BLOG
  const blog = await prisma.product.create({
    data: {
      name: '–ë–ª–æ–≥',
      description: '–ë–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–∞',
      type: ProductType.BLOG,
      status: ProductStatus.ACTIVE,
      projectId: project.id,
      settings: JSON.stringify({
        postsPerPage: 10,
        allowComments: true,
        moderateComments: true,
      }),
    },
  });
  console.log(`üìù –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç BLOG: ${blog.id}`);

  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è WEBSITE
  const websitePages = [
    {
      title: '–ì–ª–∞–≤–Ω–∞—è',
      slug: 'home',
      isHomePage: true,
      content: {
        blocks: [
          {
            id: 'hero-1',
            type: 'hero',
            props: {
              title: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${name}`,
              subtitle: description,
              buttonText: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
              backgroundImage: '/images/hero-bg.jpg',
            },
          },
          {
            id: 'features-1',
            type: 'features',
            props: {
              title: '–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
              features: [
                { title: '–ö–∞—á–µ—Å—Ç–≤–æ', description: '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏', icon: 'star' },
                { title: '–°–∫–æ—Ä–æ—Å—Ç—å', description: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', icon: 'zap' },
                { title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', description: '24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', icon: 'headphones' },
              ],
            },
          },
        ],
      },
    },
    {
      title: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
      slug: 'about',
      content: {
        blocks: [
          {
            id: 'about-1',
            type: 'text',
            props: {
              title: '–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
              content: `<p>–ö–æ–º–ø–∞–Ω–∏—è "${name}" —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç –∏ –∑–∞—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∞ —Å–µ–±—è –∫–∞–∫ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä.</p><p>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.</p>`,
            },
          },
        ],
      },
    },
    {
      title: '–£—Å–ª—É–≥–∏',
      slug: 'services',
      content: {
        blocks: [
          {
            id: 'services-1',
            type: 'services',
            props: {
              title: '–ù–∞—à–∏ —É—Å–ª—É–≥–∏',
              services: [
                { title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', price: '–æ—Ç 5000‚ÇΩ' },
                { title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –∫–ª—é—á', price: '–æ—Ç 50000‚ÇΩ' },
                { title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', price: '–æ—Ç 10000‚ÇΩ/–º–µ—Å' },
              ],
            },
          },
        ],
      },
    },
    {
      title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      slug: 'contacts',
      content: {
        blocks: [
          {
            id: 'contacts-1',
            type: 'contacts',
            props: {
              title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
              phone: '+7 (495) 123-45-67',
              email: 'info@example.com',
              address: '–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
              workingHours: '–ü–Ω-–ü—Ç: 9:00-18:00',
            },
          },
        ],
      },
    },
  ];

  for (let i = 0; i < websitePages.length; i++) {
    const pageData = websitePages[i];
    await prisma.page.create({
      data: {
        title: pageData.title,
        slug: pageData.slug,
        content: JSON.stringify(pageData.content),
        status: PageStatus.PUBLISHED,
        pageType: PageType.PAGE,
        isHomePage: pageData.isHomePage || false,
        orderIndex: i,
        productId: website.id,
        metaTitle: `${pageData.title} - ${name}`,
        metaDescription: `${pageData.title} –∫–æ–º–ø–∞–Ω–∏–∏ ${name}. ${description}`,
      },
    });
    console.log(`üìÑ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${pageData.title}`);
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  const categories = [
    { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', slug: 'electronics', description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },
    { name: '–û–¥–µ–∂–¥–∞', slug: 'clothing', description: '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },
    { name: '–î–æ–º –∏ —Å–∞–¥', slug: 'home-garden', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏' },
    { name: '–°–ø–æ—Ä—Ç', slug: 'sport', description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å' },
  ];

  const createdCategories = [];
  for (let i = 0; i < categories.length; i++) {
    const cat = categories[i];
    const category = await prisma.category.create({
      data: {
        name: cat.name,
        slug: cat.slug,
        alias: cat.slug, // –î—É–±–ª–∏—Ä—É–µ–º slug –≤ alias
        description: cat.description,
        orderIndex: i,
        isActive: true,
        productId: store.id,
      },
    });
    createdCategories.push(category);
    console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.name}`);
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
  const electronicsCategory = createdCategories.find((c) => c.slug === 'electronics');
  if (electronicsCategory) {
    const subCategories = [
      { name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', slug: 'smartphones', description: '–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã' },
      { name: '–ù–æ—É—Ç–±—É–∫–∏', slug: 'laptops', description: '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã' },
      { name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', slug: 'accessories', description: '–ß–µ—Ö–ª—ã, –∑–∞—Ä—è–¥–∫–∏, –Ω–∞—É—à–Ω–∏–∫–∏' },
    ];

    for (let i = 0; i < subCategories.length; i++) {
      const subCat = subCategories[i];
      await prisma.category.create({
        data: {
          name: subCat.name,
          slug: subCat.slug,
          alias: subCat.slug, // –î—É–±–ª–∏—Ä—É–µ–º slug –≤ alias
          description: subCat.description,
          orderIndex: i,
          isActive: true,
          parentId: electronicsCategory.id,
          productId: store.id,
        },
      });
      console.log(`üì± –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${subCat.name}`);
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  const items = [
    {
      name: 'iPhone 15 Pro',
      slug: 'iphone-15-pro',
      description: '–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º',
      price: 99999,
      categorySlug: 'smartphones',
    },
    {
      name: 'MacBook Pro M3',
      slug: 'macbook-pro-m3',
      description: '–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤',
      price: 199999,
      categorySlug: 'laptops',
    },
    {
      name: 'AirPods Pro',
      slug: 'airpods-pro',
      description: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º',
      price: 24999,
      categorySlug: 'accessories',
    },
  ];

  for (const itemData of items) {
    const category = await prisma.category.findFirst({
      where: { slug: itemData.categorySlug, productId: store.id },
    });

    if (category) {
      await prisma.item.create({
        data: {
          name: itemData.name,
          slug: itemData.slug,
          description: itemData.description,
          price: itemData.price,
          status: 'ACTIVE',
          categoryId: category.id,
          productId: store.id,
        },
      });
      console.log(`üõçÔ∏è –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: ${itemData.name}`);
    }
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –±–ª–æ–≥–∞
  const blogPosts = [
    {
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–ª–æ–≥!',
      slug: 'welcome-to-blog',
      content: {
        blocks: [
          {
            id: 'post-1',
            type: 'text',
            props: {
              content:
                '<p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–ª–æ–≥ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç—è–º–∏, –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.</p>',
            },
          },
        ],
      },
    },
    {
      title: '–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
      slug: 'how-to-choose-quality-product',
      content: {
        blocks: [
          {
            id: 'post-2',
            type: 'text',
            props: {
              content:
                '<p>–í —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ —Ç–æ–º, –Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.</p><p>–û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞:</p><ul><li>–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</li><li>–†–µ–ø—É—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è</li><li>–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</li><li>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ</li></ul>',
            },
          },
        ],
      },
    },
  ];

  for (let i = 0; i < blogPosts.length; i++) {
    const postData = blogPosts[i];
    await prisma.page.create({
      data: {
        title: postData.title,
        slug: postData.slug,
        content: JSON.stringify(postData.content),
        status: PageStatus.PUBLISHED,
        pageType: PageType.POST,
        isHomePage: false,
        orderIndex: i,
        productId: blog.id,
        metaTitle: `${postData.title} - –ë–ª–æ–≥ ${name}`,
        metaDescription: `${postData.title}. –ß–∏—Ç–∞–π—Ç–µ –≤ –±–ª–æ–≥–µ –∫–æ–º–ø–∞–Ω–∏–∏ ${name}`,
      },
    });
    console.log(`üìù –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç –±–ª–æ–≥–∞: ${postData.title}`);
  }

  // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–µ–Ω—é
  console.log('üß≠ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é...');

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  const mainMenu = await prisma.menuType.create({
    data: {
      name: 'main',
      title: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–∞–π—Ç–∞',
      projectId: project.id,
    },
  });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω —Ç–∏–ø –º–µ–Ω—é: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');

  // –ü—É–Ω–∫—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  const mainMenuItems = [
    {
      title: '–ì–ª–∞–≤–Ω–∞—è',
      alias: 'home',
      component: 'Website',
      view: 'page',
      targetId: 'home',
      orderIndex: 0,
    },
    {
      title: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
      alias: 'about',
      component: 'Website',
      view: 'page',
      targetId: 'about',
      orderIndex: 1,
    },
    {
      title: '–£—Å–ª—É–≥–∏',
      alias: 'services',
      component: 'Website',
      view: 'page',
      targetId: 'services',
      orderIndex: 2,
    },
    {
      title: '–ö–∞—Ç–∞–ª–æ–≥',
      alias: 'catalog',
      component: 'Store',
      view: 'categories',
      orderIndex: 3,
    },
    {
      title: '–ë–ª–æ–≥',
      alias: 'blog',
      component: 'Blog',
      view: 'posts',
      orderIndex: 4,
    },
    {
      title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      alias: 'contacts',
      component: 'Website',
      view: 'page',
      targetId: 'contacts',
      orderIndex: 5,
    },
  ];

  for (const item of mainMenuItems) {
    const menuItem = await prisma.menuItem.create({
      data: {
        title: item.title,
        alias: item.alias,
        type: MenuItemType.COMPONENT,
        level: 1,
        orderIndex: item.orderIndex,
        component: item.component,
        view: item.view,
        targetId: item.targetId,
        isPublished: true,
        accessLevel: AccessLevel.PUBLIC,
        language: '*',
        parameters: JSON.stringify({
          menu_show: true,
          css_class: 'nav-link',
        }),
        menuTypeId: mainMenu.id,
      },
    });
    console.log(`üîó –°–æ–∑–¥–∞–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é: ${menuItem.title}`);
  }

  // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
  const catalogMenuItem = await prisma.menuItem.findFirst({
    where: { menuTypeId: mainMenu.id, alias: 'catalog' },
  });

  if (catalogMenuItem && createdCategories.length > 0) {
    for (let i = 0; i < createdCategories.length; i++) {
      const category = createdCategories[i];
      await prisma.menuItem.create({
        data: {
          title: category.name,
          alias: `category-${category.slug}`,
          type: MenuItemType.COMPONENT,
          level: 2,
          parentId: catalogMenuItem.id,
          orderIndex: i,
          component: 'Store',
          view: 'category',
          targetId: category.id,
          isPublished: true,
          accessLevel: AccessLevel.PUBLIC,
          language: '*',
          parameters: JSON.stringify({
            menu_show: true,
            itemsPerPage: 20,
            showFilters: true,
          }),
          menuTypeId: mainMenu.id,
        },
      });
      console.log(`üîó –°–æ–∑–¥–∞–Ω –ø–æ–¥–ø—É–Ω–∫—Ç –º–µ–Ω—é: ${category.name}`);
    }
  }

  // –§—É—Ç–µ—Ä –º–µ–Ω—é
  const footerMenu = await prisma.menuType.create({
    data: {
      name: 'footer',
      title: '–ú–µ–Ω—é –ø–æ–¥–≤–∞–ª–∞',
      description: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞',
      projectId: project.id,
    },
  });

  const footerItems = [
    { title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', alias: 'privacy', externalUrl: '/privacy' },
    { title: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', alias: 'terms', externalUrl: '/terms' },
    { title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', alias: 'support', externalUrl: '/support' },
  ];

  for (let i = 0; i < footerItems.length; i++) {
    const item = footerItems[i];
    await prisma.menuItem.create({
      data: {
        title: item.title,
        alias: item.alias,
        type: MenuItemType.URL,
        level: 1,
        orderIndex: i,
        externalUrl: item.externalUrl,
        isPublished: true,
        accessLevel: AccessLevel.PUBLIC,
        language: '*',
        menuTypeId: footerMenu.id,
      },
    });
  }

  console.log('üß≠ –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç "${name}" –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!`);

  return project;
}

async function main() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –¥–µ–º–æ-–ø—Ä–æ–µ–∫—Ç–æ–≤...');

  const owner = await ensureDemoOwner();
  console.log(`üë§ –í–ª–∞–¥–µ–ª–µ—Ü –≥–æ—Ç–æ–≤: ${owner.username}`);

  const demoProjects = [
    {
      name: 'TechStore - –ú–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏',
      description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å —à–∏—Ä–æ–∫–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –∏ –≥–∞–¥–∂–µ—Ç–æ–≤',
    },
    {
      name: 'WebDev Agency - –í–µ–±-—Å—Ç—É–¥–∏—è',
      description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–π—Ç–æ–≤ –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
    },
    {
      name: 'Delicious Food - –†–µ—Å—Ç–æ—Ä–∞–Ω',
      description: '–£—é—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –∞–≤—Ç–æ—Ä—Å–∫–æ–π –∫—É—Ö–Ω–µ–π –∏ –¥–æ–º–∞—à–Ω–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π',
    },
  ];

  for (const projectData of demoProjects) {
    try {
      await createDemoProject(projectData.name, projectData.description, owner);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ "${projectData.name}":`, error);
    }
  }

  console.log('üéâ –í—Å–µ –¥–µ–º–æ-–ø—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
}

main()
  .then(() => prisma.$disconnect())
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
