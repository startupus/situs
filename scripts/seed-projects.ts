#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const projects = [
  {
    name: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
    description: '–ü—Ä–æ–µ–∫—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
    slug: 'active-project',
    domain: 'active.situs.com',
    status: 'ACTIVE',
    isPublished: true,
    settings: JSON.stringify({ theme: 'light', language: 'ru' }),
    theme: JSON.stringify({ primaryColor: '#3B82F6', secondaryColor: '#8B5CF6' }),
  },
  {
    name: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
    description: '–ü—Ä–æ–µ–∫—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã',
    slug: 'suspended-project',
    domain: 'suspended.situs.com',
    status: 'SUSPENDED',
    isPublished: false,
    settings: JSON.stringify({ theme: 'dark', language: 'en' }),
    theme: JSON.stringify({ primaryColor: '#EF4444', secondaryColor: '#F59E0B' }),
  },
  {
    name: '–ê—Ä—Ö–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
    description: '–°—Ç–∞—Ä—ã–π –ø—Ä–æ–µ–∫—Ç –≤ –∞—Ä—Ö–∏–≤–µ',
    slug: 'archived-project',
    domain: 'archived.situs.com',
    status: 'ARCHIVED',
    isPublished: false,
    settings: JSON.stringify({ theme: 'auto', language: 'ru' }),
    theme: JSON.stringify({ primaryColor: '#6B7280', secondaryColor: '#9CA3AF' }),
  },
  {
    name: '–£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
    description: '–ü—Ä–æ–µ–∫—Ç –ø–æ–º–µ—á–µ–Ω –∫ —É–¥–∞–ª–µ–Ω–∏—é',
    slug: 'deleted-project',
    domain: 'deleted.situs.com',
    status: 'DELETED',
    isPublished: false,
    settings: JSON.stringify({ theme: 'light', language: 'ru' }),
    theme: JSON.stringify({ primaryColor: '#DC2626', secondaryColor: '#B91C1C' }),
  },
];

async function seedProjects() {
  console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  const owner = await prisma.user.findFirst({
    where: { globalRole: 'SUPER_ADMIN' },
  });

  if (!owner) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤');
    return;
  }

  for (const project of projects) {
    const existingProject = await prisma.project.findFirst({
      where: { slug: project.slug },
    });

    if (!existingProject) {
      await prisma.project.create({
        data: {
          ...project,
          ownerId: owner.id,
        },
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${project.name} (${project.status})`);
    } else {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${project.name}`);
    }
  }

  console.log('üéâ –°–∏–¥—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

async function main() {
  try {
    await seedProjects();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–¥–æ–≤:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
main();

export { seedProjects };
