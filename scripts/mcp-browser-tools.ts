#!/usr/bin/env tsx

/**
 * MCP BrowserTools Integration
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è BrowserTools Manager —Å MCP —Å–∏—Å—Ç–µ–º–æ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
 */

import BrowserToolsManager from './browser-tools-manager';

class MCPBrowserToolsIntegration {
  private manager: BrowserToolsManager;
  private isRunning = false;
  private healthCheckInterval: NodeJS.Timeout | null = null;

  constructor() {
    this.manager = new BrowserToolsManager();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  async start(): Promise<void> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    console.log('üöÄ –ó–∞–ø—É—Å–∫ MCP BrowserTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      await this.manager.stopAll();

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
      const processInfo = await this.manager.startServer(3025);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
      this.startHealthMonitoring();

      this.isRunning = true;
      console.log(`‚úÖ MCP BrowserTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${processInfo.port}`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  async stop(): Promise<void> {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
      return;
    }

    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MCP BrowserTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    this.stopHealthMonitoring();

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await this.manager.stopAll();

    this.isRunning = false;
    console.log('‚úÖ MCP BrowserTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  async getStatus(): Promise<{
    running: boolean;
    processes: any[];
    health: { healthy: boolean; issues: string[] };
  }> {
    const status = this.manager.getStatus();
    const health = await this.manager.healthCheck();

    return {
      running: this.isRunning,
      processes: status,
      health
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
   */
  async isReady(): Promise<boolean> {
    try {
      const status = await this.getStatus();
      return status.running && status.health.healthy;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  private startHealthMonitoring(): void {
    this.healthCheckInterval = setInterval(async () => {
      try {
        const health = await this.manager.healthCheck();
        
        if (!health.healthy) {
          console.warn('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
          health.issues.forEach(issue => console.warn(`  - ${issue}`));
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
          await this.restartIfNeeded();
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${error}`);
      }
    }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
   */
  private stopHealthMonitoring(): void {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
      this.healthCheckInterval = null;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
   */
  private async restartIfNeeded(): Promise<void> {
    try {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
      await this.manager.stopAll();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
      await this.manager.startServer(3025);
      
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${error}`);
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const integration = new MCPBrowserToolsIntegration();
  const command = process.argv[2];

  try {
    switch (command) {
      case 'start':
        await integration.start();
        break;
        
      case 'stop':
        await integration.stop();
        break;
        
      case 'status':
        const status = await integration.getStatus();
        console.log('üìä –°—Ç–∞—Ç—É—Å MCP BrowserTools –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:');
        console.log(`  –ó–∞–ø—É—â–µ–Ω–∞: ${status.running ? '‚úÖ' : '‚ùå'}`);
        console.log(`  –ü—Ä–æ—Ü–µ—Å—Å—ã: ${status.processes.length}`);
        console.log(`  –ó–¥–æ—Ä–æ–≤—å–µ: ${status.health.healthy ? '‚úÖ' : '‚ùå'}`);
        
        if (!status.health.healthy) {
          console.log('  –ü—Ä–æ–±–ª–µ–º—ã:');
          status.health.issues.forEach(issue => console.log(`    - ${issue}`));
        }
        break;
        
      case 'ready':
        const ready = await integration.isReady();
        console.log(`–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${ready ? '‚úÖ' : '‚ùå'}`);
        break;
        
      default:
        console.log(`
MCP BrowserTools Integration

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  tsx scripts/mcp-browser-tools.ts start   - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  tsx scripts/mcp-browser-tools.ts stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  tsx scripts/mcp-browser-tools.ts status  - –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  tsx scripts/mcp-browser-tools.ts ready   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        `);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export default MCPBrowserToolsIntegration; 