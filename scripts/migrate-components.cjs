const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
const MIGRATION_CONFIG = {
  // –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã TailGrids –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  sourcePaths: [
    'src/redactus-components/TailGridsPricingComponents.tsx',
    'src/redactus-components/TailGridsFAQComponents.tsx',
  ],

  // –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞
  targetDir: 'src/redactus-components/interactive',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const enhanceComponent = (originalCode, componentName, category) => {
  let enhanced = originalCode;

  // –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ contentEditable
  enhanced = enhanced
    // –ó–∞–º–µ–Ω—è–µ–º t('...') –Ω–∞ –ø—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç —Å contentEditable
    .replace(/\{t\([^}]+\)\}/g, (match) => {
      const defaultTexts = {
        'pricing.title': 'Flexible Pricing Plans',
        'pricing.subtitle': 'Choose the plan that fits your needs',
        'faq.title': 'Frequently Asked Questions',
        'faq.subtitle': 'Get answers to common questions',
      };
      return `"${defaultTexts['pricing.title'] || 'Default Text'}"`;
    })

    // –î–æ–±–∞–≤–ª—è–µ–º contentEditable –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    .replace(/<h([1-6])([^>]*?)>([^<{]+)</g, '<h$1$2 contentEditable suppressContentEditableWarning={true}>$3<')
    .replace(/<p([^>]*?)>([^<{]+)</g, '<p$1 contentEditable suppressContentEditableWarning={true}>$2<')
    .replace(/<span([^>]*?)>([^<{]+)</g, '<span$1 contentEditable suppressContentEditableWarning={true}>$2<')

    // –ó–∞–º–µ–Ω—è–µ–º CDN —Å—Å—ã–ª–∫–∏
    .replace(/https:\/\/cdn\.(tailgrids|redactus)\.com[^"']*/g, '/images')
    .replace(/https:\/\/i\.ibb\.co[^"']*/g, '/images')

    // –î–æ–±–∞–≤–ª—è–µ–º useState –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    .replace(/^export const/, "import React, { useState } from 'react';\n\nexport const")

    // –î–æ–±–∞–≤–ª—è–µ–º TypeScript interface
    .replace(/export const (\w+) = \(\{([^}]*)\}\) =>/, (match, name, props) => {
      const interfaceName = `${name}Props`;
      const propsInterface = generatePropsInterface(name, category);

      return `${propsInterface}\n\nconst ${name}: React.FC<${interfaceName}> = ({${props}}) =>`;
    });

  return enhanced;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const generatePropsInterface = (componentName, category) => {
  const baseProps = {
    pricing: `export interface ${componentName}Props {
  sectionTitle?: string;
  sectionSubtitle?: string;
  pricingPlans?: PricingPlan[];
}

export interface PricingPlan {
  id: number;
  name: string;
  price: number;
  features: string[];
  isPopular?: boolean;
  buttonText?: string;
}`,
    faq: `export interface ${componentName}Props {
  sectionTitle?: string;
  sectionSubtitle?: string;
  faqItems?: FAQItem[];
}

export interface FAQItem {
  id: number;
  question: string;
  answer: string;
}`,
  };

  return baseProps[category] || `export interface ${componentName}Props {}`;
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateComponents() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –±—ã—Å—Ç—Ä—É—é –º–∏–≥—Ä–∞—Ü–∏—é TailGrids –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');

  // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
  if (!fs.existsSync(MIGRATION_CONFIG.targetDir)) {
    fs.mkdirSync(MIGRATION_CONFIG.targetDir, { recursive: true });
  }

  let totalMigrated = 0;
  const migratedComponents = [];

  // –ü—Ä–æ—Å—Ç–∞—è –±—ã—Å—Ç—Ä–∞—è –º–∏–≥—Ä–∞—Ü–∏—è - –∫–æ–ø–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ marketing –ø–∞–ø–∫–∏
  const existingComponents = [
    { source: 'src/redactus-components/marketing/Pricing1.tsx', target: 'Pricing1.tsx', category: 'pricing' },
    { source: 'src/redactus-components/marketing/Pricing2.tsx', target: 'Pricing2.tsx', category: 'pricing' },
    { source: 'src/redactus-components/marketing/Pricing3.tsx', target: 'Pricing3.tsx', category: 'pricing' },
    { source: 'src/redactus-components/marketing/Faq1.tsx', target: 'FAQ1.tsx', category: 'faq' },
    { source: 'src/redactus-components/marketing/Faq2.tsx', target: 'FAQ2.tsx', category: 'faq' },
    { source: 'src/redactus-components/marketing/Faq3.tsx', target: 'FAQ3.tsx', category: 'faq' },
  ];

  for (const comp of existingComponents) {
    if (fs.existsSync(comp.source)) {
      const content = fs.readFileSync(comp.source, 'utf8');
      const enhanced = enhanceExistingComponent(content, path.basename(comp.target, '.tsx'), comp.category);

      const targetPath = path.join(MIGRATION_CONFIG.targetDir, comp.target);
      fs.writeFileSync(targetPath, enhanced);

      console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω: ${comp.target}`);
      migratedComponents.push(path.basename(comp.target, '.tsx'));
      totalMigrated++;
    }
  }

  // –°–æ–∑–¥–∞–µ–º index.ts
  createIndexFile(migratedComponents);

  console.log(`üéâ –ë—ã—Å—Ç—Ä–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ ${totalMigrated} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
  console.log('üì¶ –°–æ–∑–¥–∞–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', migratedComponents.join(', '));
}

// –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const enhanceExistingComponent = (content, componentName, category) => {
  let enhanced = content;

  // –î–æ–±–∞–≤–ª—è–µ–º React import –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!enhanced.includes('import React')) {
    enhanced = `import React, { useState } from 'react';\n\n${enhanced}`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!enhanced.includes('interface') && !enhanced.includes('Props')) {
    const propsInterface = generatePropsInterface(componentName, category);
    enhanced = enhanced.replace(
      'import React',
      `import React, { useState } from 'react';\n\n${propsInterface}\n\n// Original component enhanced for Redactus\nconst ${componentName}: React.FC<${componentName}Props> = () =>`,
    );
  }

  // –î–æ–±–∞–≤–ª—è–µ–º contentEditable –≥–¥–µ –Ω—É–∂–Ω–æ
  enhanced = enhanced
    .replace(/<h([1-6])([^>]*?)>([^<{]+)</g, '<h$1$2 contentEditable suppressContentEditableWarning={true}>$3<')
    .replace(/<p([^>]*?)>([^<{]+)</g, '<p$1 contentEditable suppressContentEditableWarning={true}>$2<')
    .replace(/>\s*([^<{][^<]*?)\s*</g, (match, text) => {
      if (text.trim() && !text.includes('{') && !text.includes('svg') && text.length > 3) {
        return `><span contentEditable suppressContentEditableWarning={true}>${text.trim()}</span><`;
      }
      return match;
    });

  return enhanced;
};

// –°–æ–∑–¥–∞–Ω–∏–µ index.ts —Ñ–∞–π–ª–∞
function createIndexFile(components) {
  const pricingExports = components
    .filter((c) => c.startsWith('Pricing'))
    .map((c) => `export { default as ${c} } from './${c}';`)
    .join('\n');

  const faqExports = components
    .filter((c) => c.startsWith('FAQ'))
    .map((c) => `export { default as ${c} } from './${c}';`)
    .join('\n');

  const typeExports = components.map((c) => `export type { ${c}Props } from './${c}';`).join('\n');

  const indexContent = `// Interactive Components (Pricing & FAQ)
// Auto-generated by migrate-components script

// Pricing Components
${pricingExports}

// FAQ Components  
${faqExports}

// Type exports
${typeExports}

// Total migrated components: ${components.length}
`;

  const indexPath = path.join(MIGRATION_CONFIG.targetDir, 'index.ts');
  fs.writeFileSync(indexPath, indexContent);
  console.log('üìù –°–æ–∑–¥–∞–Ω index.ts —Ñ–∞–π–ª');
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateComponents().catch(console.error);
}

module.exports = { migrateComponents };
