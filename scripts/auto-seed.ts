#!/usr/bin/env ts-node

/**
 * –ê–≤—Ç–æ-—Å–∏–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ API
 *
 * –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ situs-admin
 * 2. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ—Ç seed-admin-system.ts
 * 3. –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Docker entrypoint –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import { PrismaClient } from '@prisma/client';
import { execSync } from 'child_process';
import { existsSync } from 'fs';
import { join } from 'path';

const prisma = new PrismaClient();

async function checkSystemProjectExists(): Promise<boolean> {
  try {
    const systemProject = await prisma.project.findFirst({
      where: {
        OR: [{ slug: 'situs-admin' }, { isSystemAdmin: true }],
      },
    });
    return !!systemProject;
  } catch (error) {
    console.warn('‚ö†Ô∏è Failed to check system project:', error);
    return false;
  }
}

async function runSystemSeed(): Promise<boolean> {
  try {
    const seedPath = join(__dirname, '../prisma/seed-admin-system.ts');

    if (!existsSync(seedPath)) {
      console.error('‚ùå Seed file not found:', seedPath);
      return false;
    }

    console.log('üå± Running system admin seed...');
    execSync(`npx ts-node "${seedPath}"`, {
      stdio: 'inherit',
      cwd: process.cwd(),
    });

    console.log('‚úÖ System admin seed completed successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to run system seed:', error);
    return false;
  }
}

async function main() {
  try {
    console.log('üîç Checking system project existence...');

    const systemProjectExists = await checkSystemProjectExists();

    if (systemProjectExists) {
      console.log('‚úÖ System project already exists, skipping seed');
      return;
    }

    console.log('üì¶ System project not found, running seed...');
    const seedSuccess = await runSystemSeed();

    if (seedSuccess) {
      console.log('üéâ Auto-seed completed successfully');
    } else {
      console.error('üí• Auto-seed failed');
      process.exit(1);
    }
  } catch (error) {
    console.error('üí• Auto-seed error:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as autoSeed };
