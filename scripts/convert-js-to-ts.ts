#!/usr/bin/env ts-node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤ –≤ TypeScript
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º TypeScript –ø—Ä–æ–µ–∫—Ç–∞ Hubus
 */

import * as fs from 'fs';
import * as path from 'path';

interface ConversionResult {
  converted: string[];
  failed: string[];
  skipped: string[];
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JavaScript –∫–æ–¥ –≤ TypeScript
 */
function convertJSToTS(content: string, filePath: string): string {
  let tsContent = content;

  // 1. –ó–∞–º–µ–Ω—è–µ–º CommonJS –∏–º–ø–æ—Ä—Ç—ã –Ω–∞ ES6
  tsContent = tsContent.replace(/const\s+(\w+)\s*=\s*require\(['"]([^'"]+)['"]\)/g, "import $1 from '$2'");
  tsContent = tsContent.replace(
    /const\s+\{\s*([^}]+)\s*\}\s*=\s*require\(['"]([^'"]+)['"]\)/g,
    "import { $1 } from '$2'",
  );
  tsContent = tsContent.replace(
    /const\s+(\w+)\s*=\s*require\(['"]([^'"]+)['"]\)\.(\w+)/g,
    "import { $3 as $1 } from '$2'",
  );

  // 2. –ó–∞–º–µ–Ω—è–µ–º module.exports –Ω–∞ export
  tsContent = tsContent.replace(/module\.exports\s*=\s*\{([^}]+)\}/g, 'export { $1 }');
  tsContent = tsContent.replace(/module\.exports\s*=\s*(\w+)/g, 'export default $1');

  // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
  tsContent = tsContent.replace(/function\s+(\w+)\s*\(([^)]*)\)\s*\{/g, (match, name, params) => {
    const typedParams = params
      .split(',')
      .map((param: string) => {
        const trimmed = param.trim();
        if (trimmed && !trimmed.includes(':')) {
          return `${trimmed}: any`;
        }
        return trimmed;
      })
      .join(', ');
    return `function ${name}(${typedParams}): any {`;
  });

  // 4. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è —Å—Ç—Ä–µ–ª–æ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  tsContent = tsContent.replace(/const\s+(\w+)\s*=\s*\(([^)]*)\)\s*=>/g, (match, name, params) => {
    const typedParams = params
      .split(',')
      .map((param: string) => {
        const trimmed = param.trim();
        if (trimmed && !trimmed.includes(':')) {
          return `${trimmed}: any`;
        }
        return trimmed;
      })
      .join(', ');
    return `const ${name} = (${typedParams}): any =>`;
  });

  // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–æ–≤
  tsContent = tsContent.replace(/class\s+(\w+)\s*\{/g, 'export class $1 {');

  // 6. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  tsContent = tsContent.replace(/let\s+(\w+)\s*=\s*\[\]/g, 'let $1: any[] = []');
  tsContent = tsContent.replace(/let\s+(\w+)\s*=\s*\{\}/g, 'let $1: any = {}');

  // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º console.log (–¥–æ–±–∞–≤–ª—è–µ–º void –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)
  if (filePath.includes('test') || filePath.includes('spec')) {
    // –í —Ç–µ—Å—Ç–∞—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º console.log
  } else {
    tsContent = tsContent.replace(/console\.log\(/g, 'void console.log(');
  }

  // 8. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è TypeScript
  if (!tsContent.includes('#!/usr/bin/env')) {
    tsContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ JavaScript –≤ TypeScript\n// –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Hubus\n\n${tsContent}`;
  }

  return tsContent;
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª
 */
function convertFile(jsFilePath: string): boolean {
  try {
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é: ${path.relative(process.cwd(), jsFilePath)}`);

    // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    const jsContent = fs.readFileSync(jsFilePath, 'utf8');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TypeScript
    const tsContent = convertJSToTS(jsContent, jsFilePath);

    // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è TypeScript —Ñ–∞–π–ª–∞
    const tsFilePath = jsFilePath.replace(/\.js$/, '.ts');

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º TypeScript —Ñ–∞–π–ª
    fs.writeFileSync(tsFilePath, tsContent, 'utf8');

    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JavaScript —Ñ–∞–π–ª
    fs.unlinkSync(jsFilePath);

    console.log(
      `‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${path.relative(process.cwd(), jsFilePath)} -> ${path.relative(process.cwd(), tsFilePath)}`,
    );
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${jsFilePath}:`, (error as Error).message);
    return false;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ JavaScript —Ñ–∞–π–ª—ã
 */
function convertAllJSFiles(): ConversionResult {
  const result: ConversionResult = {
    converted: [],
    failed: [],
    skipped: [],
  };

  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
  const jsFiles = [
    'prisma/seed.js',
    'scripts/security/env-audit.js',
    'scripts/security/sql-audit.js',
    'services/bilingus-service/index.js',
    'services/bilingus-service/load-tests/k6-load-test.js',
    'services/bilingus-service/prisma/seed.js',
    'services/controlus-service/index.js',
    'services/gateway-service/index.js',
    'services/hubus-service/src/__tests__/ai-integration.test.js',
    'services/hubus-service/src/__tests__/basic.test.js',
    'services/hubus-service/src/__tests__/integration.test.js',
    'services/hubus-service/src/__tests__/streaming.test.js',
    'services/hubus-service/src/controllers/HubusController.js',
    'services/hubus-service/src/index.js',
    'services/hubus-service/src/middleware/authMiddleware.js',
    'services/hubus-service/src/middleware/errorHandler.js',
    'services/hubus-service/src/services/AIProviderService.js',
    'services/hubus-service/src/services/AIStreamingService.js',
    'services/hubus-service/src/services/BilingusClient.js',
    'services/hubus-service/src/services/HubusService.js',
    'services/hubus-service/src/services/LoginusClient.js',
    'services/hubus-service/src/types/HubusTypes.js',
    'services/hubus-service/src/utils/Logger.js',
    'services/testus-service/prisma/seed.js',
  ];

  console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é ${jsFiles.length} JavaScript —Ñ–∞–π–ª–æ–≤...\n`);

  for (const filePath of jsFiles) {
    if (fs.existsSync(filePath)) {
      if (convertFile(filePath)) {
        result.converted.push(filePath);
      } else {
        result.failed.push(filePath);
      }
    } else {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω): ${filePath}`);
      result.skipped.push(filePath);
    }
  }

  return result;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main(): void {
  console.log('üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è JavaScript —Ñ–∞–π–ª–æ–≤ –≤ TypeScript\n');
  console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ TypeScript\n');

  const result = convertAllJSFiles();

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:');
  console.log(`   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.converted.length}`);
  console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${result.failed.length}`);
  console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped.length}`);

  if (result.failed.length > 0) {
    console.log('\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
    result.failed.forEach((file) => console.log(`   - ${file}`));
  }

  if (result.converted.length > 0) {
    console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:');
    result.converted.forEach((file) => console.log(`   - ${file}`));

    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TypeScript –æ—à–∏–±–∫–∏: npx tsc --build');
    console.log('   2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: npm test');
    console.log('   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ JS —Ñ–∞–π–ª–æ–≤: npx ts-node scripts/check-no-js-files.ts');
  }

  console.log('\nüéØ –¶–µ–ª—å: 100% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º TypeScript –ø—Ä–æ–µ–∫—Ç–∞ Hubus');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

export { convertJSToTS, convertFile, convertAllJSFiles };
