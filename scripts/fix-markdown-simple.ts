#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ markdown
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import * as fs from 'fs';
import * as path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
interface Config {
  maxLineLength: number;
  ignorePatterns: string[];
}

const config: Config = {
  maxLineLength: 120,
  ignorePatterns: ['node_modules', 'dist', 'coverage', '.git', 'vendor'],
};

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã
 */
function findMarkdownFiles(dir: string, files: string[] = []): string[] {
  const items = fs.readdirSync(dir);

  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞–ø–∫–∏
    if (stat.isDirectory()) {
      if (!config.ignorePatterns.some((pattern) => item.includes(pattern))) {
        findMarkdownFiles(fullPath, files);
      }
    } else if (item.endsWith('.md')) {
      files.push(fullPath);
    }
  }

  return files;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ markdown
 */
function fixMarkdownContent(content: string): string {
  let fixed = content;

  // 1. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
  fixed = fixed.replace(/[ \t]+$/gm, '');

  // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
  fixed = fixed.replace(/(```[\s\S]*?```)\s*\n(\d+\.)/g, '$1\n\n$2');

  // 3. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–æ–ª—å—à–µ 2 –ø–æ–¥—Ä—è–¥)
  fixed = fixed.replace(/\n{3,}/g, '\n\n');

  // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ #
  fixed = fixed.replace(/^(#{1,6})([^#\s])/gm, '$1 $2');

  // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞
  fixed = fixed.replace(/^([*+-])([^\s])/gm, '$1 $2');
  fixed = fixed.replace(/^(\d+\.)([^\s])/gm, '$1 $2');

  // 6. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
  fixed = fixed.replace(/^[ \t]+$/gm, '');

  // 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD022 - –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  fixed = fixHeadingsSpacing(fixed);

  // 8. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD004 - —Å—Ç–∏–ª—å –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (–∑–∞–º–µ–Ω—è–µ–º * –Ω–∞ -)
  fixed = fixed.replace(/^(\s*)\*(\s)/gm, '$1-$2');

  // 9. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD026 - –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
  fixed = fixHeadingPunctuation(fixed);

  // 10. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD034 - –≥–æ–ª—ã–µ URL
  fixed = fixBareUrls(fixed);

  // 11. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  fixed = fixLongLines(fixed);

  // 12. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD029 (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤)
  fixed = fixListNumbering(fixed);

  // 13. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD025 (–æ–¥–∏–Ω H1 –Ω–∞ —Ñ–∞–π–ª)
  fixed = fixMultipleH1(fixed);

  // 14. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º MD012 (–ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
  fixed = fixMultipleBlankLines(fixed);

  return fixed;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö (MD026)
 */
function fixHeadingPunctuation(content: string): string {
  const lines = content.split('\n');
  const fixedLines: string[] = [];

  for (let line of lines) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);

    if (headingMatch) {
      const level = headingMatch[1];
      let title = headingMatch[2];

      // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫—Ä–æ–º–µ ! –∏ ?)
      title = title.replace(/[.,;:]$/, '');

      // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ
      line = `${level} ${title}`;
    }

    fixedLines.push(line);
  }

  return fixedLines.join('\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª—ã–µ URL (MD034)
 */
function fixBareUrls(content: string): string {
  // –ù–∞—Ö–æ–¥–∏–º –≥–æ–ª—ã–µ URL –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏
  // –ò—Å–∫–ª—é—á–∞–µ–º URL –≤–Ω—É—Ç—Ä–∏ –∫–æ–¥–∞ –∏ —Å—Å—ã–ª–æ–∫
  const lines = content.split('\n');
  const fixedLines: string[] = [];

  for (let line of lines) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–¥–æ–º
    if (line.startsWith('```') || line.startsWith('    ') || line.startsWith('\t')) {
      fixedLines.push(line);
      continue;
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥–æ–ª—ã–µ URL (http/https) –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏
    line = line.replace(/(?<!<|\[)(https?:\/\/[^\s<>\[\]]+)(?!>|\])/g, '<$1>');

    fixedLines.push(line);
  }

  return fixedLines.join('\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (MD022)
 */
function fixHeadingsSpacing(content: string): string {
  const lines = content.split('\n');
  const fixedLines: string[] = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    const isHeading = line.match(/^#{1,6}\s/);

    if (isHeading) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
      if (i > 0 && lines[i - 1].trim() !== '') {
        fixedLines.push('');
      }

      fixedLines.push(line);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
      if (i < lines.length - 1 && lines[i + 1].trim() !== '') {
        fixedLines.push('');
      }
    } else {
      fixedLines.push(line);
    }
  }

  return fixedLines.join('\n');
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
 */
function fixLongLines(content: string): string {
  const lines = content.split('\n');
  const fixedLines: string[] = [];

  for (let line of lines) {
    if (
      line.length > config.maxLineLength &&
      !line.startsWith('```') &&
      !line.startsWith('#') &&
      !line.startsWith('|') &&
      !line.match(/^[*-+]\s/)
    ) {
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
      const words = line.split(' ');
      let currentLine = '';
      const newLines: string[] = [];

      for (const word of words) {
        if ((currentLine + word).length > config.maxLineLength) {
          if (currentLine) {
            newLines.push(currentLine.trim());
            currentLine = word;
          } else {
            newLines.push(word);
          }
        } else {
          currentLine += (currentLine ? ' ' : '') + word;
        }
      }

      if (currentLine) {
        newLines.push(currentLine.trim());
      }

      fixedLines.push(...newLines);
    } else {
      fixedLines.push(line);
    }
  }

  return fixedLines.join('\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤ (MD029)
 */
function fixListNumbering(content: string): string {
  const lines = content.split('\n');
  const fixedLines: string[] = [];
  let listCounter = 1;
  let inList = false;
  let listIndent = 0;

  for (let line of lines) {
    const listMatch = line.match(/^(\s*)(\d+)\.\s/);

    if (listMatch) {
      const indent = listMatch[1];
      const currentIndent = indent.length;

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –æ—Ç—Å—Ç—É–ø
      if (!inList || currentIndent !== listIndent) {
        inList = true;
        listCounter = 1;
        listIndent = currentIndent;
      }

      // –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
      line = line.replace(/^(\s*)\d+\./, `${indent}${listCounter}.`);
      listCounter++;
    } else {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      if (inList && line.trim() !== '' && !line.match(/^\s*[-*+]\s/)) {
        inList = false;
      }
    }

    fixedLines.push(line);
  }

  return fixedLines.join('\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ H1 (MD025)
 */
function fixMultipleH1(content: string): string {
  const lines = content.split('\n');
  const fixedLines: string[] = [];
  let h1Count = 0;

  for (let line of lines) {
    if (line.match(/^#\s/)) {
      h1Count++;
      if (h1Count > 1) {
        // –ó–∞–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ H1 –Ω–∞ H2
        line = line.replace(/^#\s/, '## ');
      }
    }
    fixedLines.push(line);
  }

  return fixedLines.join('\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (MD012)
 */
function fixMultipleBlankLines(content: string): string {
  // –£–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥
  return content.replace(/\n{3,}/g, '\n\n');
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç markdown —Ñ–∞–π–ª
 */
function fixMarkdownFile(filePath: string): boolean {
  try {
    const relativePath = path.relative(process.cwd(), filePath);
    console.log(`üîß –ü—Ä–æ–≤–µ—Ä—è—é: ${relativePath}`);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    const content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
    const fixedContent = fixMarkdownContent(content);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (fixedContent !== originalContent) {
      fs.writeFileSync(filePath, fixedContent, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${relativePath}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${relativePath}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, (error as Error).message);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main(): void {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è markdown —Ñ–∞–π–ª–æ–≤...\n');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
    const files = findMarkdownFiles(process.cwd());
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} markdown —Ñ–∞–π–ª–æ–≤\n`);

    if (files.length === 0) {
      console.log('‚ÑπÔ∏è  Markdown —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    let fixedCount = 0;
    for (const file of files) {
      if (fixMarkdownFile(file)) {
        fixedCount++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${files.length - fixedCount}`);

    if (fixedCount > 0) {
      console.log('\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('\nüí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
      console.log('   npm run lint:markdown');
    } else {
      console.log('\n‚ÑπÔ∏è  –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', (error as Error).message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

export { findMarkdownFiles, fixMarkdownContent, fixMarkdownFile };
