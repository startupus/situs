#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
const serviceMapping: Record<string, string> = {
  'provider-service': 'hubus-service',
  'proxy-service': 'hubus-service',
  'accounting-service': 'bilingus-service',
};

// –ò—Å–∫–ª—é—á–µ–Ω–∏—è - —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
const excludeFiles: string[] = [
  'CHANGELOG.md',
  'COMPLETION_REPORT.md',
  'ARCHITECTURE_MODERNIZATION_REPORT.md',
  'HUBUS_SERVICE_ARCHITECTURE.md',
  'FINAL_ARCHITECTURE_DECISION.md',
  'cleanup-old-services.ts',
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
function shouldSkipFile(filePath: string): boolean {
  const fileName = path.basename(filePath);
  return excludeFiles.some((exclude) => fileName.includes(exclude));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function updateFile(filePath: string, content: string): boolean {
  let updated = content;
  let hasChanges = false;

  // –ó–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  for (const [oldService, newService] of Object.entries(serviceMapping)) {
    const regex = new RegExp(`\\b${oldService}\\b`, 'g');
    if (regex.test(updated)) {
      updated = updated.replace(regex, newService);
      hasChanges = true;
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  if (updated.includes('proxy-service + provider-service')) {
    updated = updated.replace(/proxy-service \+ provider-service/g, 'hubus-service');
    hasChanges = true;
  }

  if (updated.includes('proxy-service:3007 + provider-service:3005')) {
    updated = updated.replace(/proxy-service:3007 \+ provider-service:3005/g, 'hubus-service:3000');
    hasChanges = true;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—ã
  updated = updated.replace(/provider-service.*3005/g, 'hubus-service (3000)');
  updated = updated.replace(/proxy-service.*3007/g, 'hubus-service (3000)');

  if (hasChanges) {
    fs.writeFileSync(filePath, updated, 'utf8');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    return true;
  }
  return false;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function processDirectory(dir: string): number {
  const items = fs.readdirSync(dir);
  let totalUpdated = 0;

  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);

    if (stat.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (item === 'node_modules' || item === '.git' || item === 'dist' || item === 'coverage') {
        continue;
      }
      totalUpdated += processDirectory(fullPath);
    } else if (item.endsWith('.md') || item.endsWith('.json') || item.endsWith('.ts') || item.endsWith('.js')) {
      if (shouldSkipFile(fullPath)) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: ${fullPath}`);
        continue;
      }

      try {
        const content = fs.readFileSync(fullPath, 'utf8');
        if (updateFile(fullPath, content)) {
          totalUpdated++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${fullPath}:`, (error as Error).message);
      }
    }
  }

  return totalUpdated;
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º markdownlint –≤ client-service
function fixMarkdownLint(): void {
  const filePath = 'services/client-service/INTEGRATION_COMPLETION_SUMMARY.md';
  try {
    let content = fs.readFileSync(filePath, 'utf8');

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–µ—Ä–µ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    content = content.replace(
      /- ‚úÖ \*\*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\*\*.*\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é/,
      '- ‚úÖ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é',
    );

    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω markdownlint: ${filePath}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è markdownlint:`, (error as Error).message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main(): void {
  console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...');

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º markdownlint
  fixMarkdownLint();

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  const totalUpdated = processDirectory('.');

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalUpdated}`);

  if (totalUpdated > 0) {
    console.log('\nüîß –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    try {
      execSync('npm run lint:markdown', { stdio: 'inherit' });
      console.log('‚úÖ –õ–∏–Ω—Ç–µ—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è  –õ–∏–Ω—Ç–µ—Ä –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    }
  }

  console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
