#!/usr/bin/env tsx
import {
  PrismaClient,
  ProductType,
  PageStatus,
  PageType,
  ProjectStatus,
  GlobalRole,
  UserStatus,
  ProductStatus,
} from '@prisma/client';

const prisma = new PrismaClient({ log: ['query', 'info', 'warn', 'error'] });

function slugify(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^a-z0-9\u0400-\u04FF\s-]/g, '')
    .trim()
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-');
}

async function ensureDemoOwner() {
  const username = 'demo-owner';
  const email = 'demo-owner@example.com';
  const existing = await prisma.user.findUnique({ where: { username } });
  if (existing) return existing;

  return prisma.user.create({
    data: {
      username,
      email,
      password: 'dev-password',
      globalRole: GlobalRole.BUSINESS,
      status: UserStatus.ACTIVE,
    },
  });
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');

  const owner = await ensureDemoOwner();
  console.log(`üë§ –í–ª–∞–¥–µ–ª–µ—Ü –≥–æ—Ç–æ–≤: ${owner.username}`);

  const name = 'Test Project Simple';
  const slug = slugify(name);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  const existing = await prisma.project.findUnique({ where: { slug } });
  if (existing) {
    console.log(`üì¶ –ü—Ä–æ–µ–∫—Ç "${name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º`);
    await prisma.project.delete({ where: { id: existing.id } });
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  console.log('üì¶ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç...');
  const project = await prisma.project.create({
    data: {
      name,
      slug,
      description: '–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
      ownerId: owner.id,
      status: ProjectStatus.ACTIVE,
      isPublished: true,
      settings: JSON.stringify({ theme: 'auto' }),
    },
  });
  console.log(`üì¶ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${project.name} (${project.id})`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
  const check1 = await prisma.project.findUnique({ where: { id: project.id } });
  console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ø—Ä–æ–µ–∫—Ç ${check1 ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–¥—É–∫—Ç
  console.log('üåê –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç...');
  const website = await prisma.product.create({
    data: {
      name: '–°–∞–π—Ç',
      description: '–ü—Ä–æ—Å—Ç–æ–π —Å–∞–π—Ç',
      type: ProductType.WEBSITE,
      status: ProductStatus.ACTIVE,
      projectId: project.id,
      settings: '{}',
    },
  });
  console.log(`üåê –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${website.id}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const check2 = await prisma.project.findUnique({ where: { id: project.id } });
  console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ø—Ä–æ–µ–∫—Ç ${check2 ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  console.log('üìÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
  const page = await prisma.page.create({
    data: {
      title: '–ì–ª–∞–≤–Ω–∞—è',
      slug: 'home',
      content: JSON.stringify({ blocks: [] }),
      status: PageStatus.PUBLISHED,
      pageType: PageType.PAGE,
      isHomePage: true,
      orderIndex: 0,
      productId: website.id,
    },
  });
  console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: ${page.id}`);

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  const finalCheck = await prisma.project.findUnique({ where: { id: project.id } });
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ–µ–∫—Ç ${finalCheck ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –±–∞–∑–µ
  const allProjects = await prisma.project.findMany();
  console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${allProjects.length}`);
  allProjects.forEach((p) => console.log(`  - ${p.name} (${p.slug})`));

  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

main()
  .then(() => prisma.$disconnect())
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
