#!/bin/bash

# Docker entrypoint –¥–ª—è Situs API
# –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏, –∞–≤—Ç–æ-—Å–∏–¥ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

set -e

echo "üöÄ Starting Situs API container..."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
wait_for_db() {
    log "‚è≥ Waiting for database to be ready..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if echo "SELECT 1;" | npx prisma db execute --stdin --schema=./prisma/schema.prisma > /dev/null 2>&1; then
            log "‚úÖ Database is ready"
            return 0
        fi
        
        log "‚è≥ Database not ready, attempt $attempt/$max_attempts"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log "‚ùå Database connection timeout"
    exit 1
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
run_migrations() {
    log "üîÑ Running database migrations..."
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º migrate deploy
    if npx prisma migrate deploy; then
        log "‚úÖ Migrations completed successfully"
    else
        log "‚ö†Ô∏è Migrate deploy failed, trying db push..."
        # –ï—Å–ª–∏ migrate deploy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º db push —Å —Ñ–ª–∞–≥–æ–º --accept-data-loss
        if npx prisma db push --accept-data-loss; then
            log "‚úÖ Database schema synchronized with db push"
        else
            log "‚ùå Database synchronization failed"
            exit 1
        fi
    fi
}

# –ê–≤—Ç–æ-—Å–∏–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
run_auto_seed() {
    log "üå± Running auto-seed for system project..."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –≤–µ—Ä—Å–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å ES –º–æ–¥—É–ª—è–º–∏
    if node scripts/auto-seed.js; then
        log "‚úÖ Auto-seed completed successfully"
    else
        log "‚ùå Auto-seed failed"
        exit 1
    fi
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–¥—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
run_demo_seeds() {
    log "üå± Running demo seeds..."

    # Startapus demo content
    if npx tsx scripts/seed-startapus.ts; then
        log "‚úÖ Demo seed (startapus) completed"
    else
        log "‚ö†Ô∏è Demo seed (startapus) failed"
    fi

    # Simple demo projects (Demo Project 1..N)
    if npx tsx scripts/seed-demo-projects.ts; then
        log "‚úÖ Demo seed (projects) completed"
    else
        log "‚ö†Ô∏è Demo seed (projects) failed"
    fi

    # View levels
    if npx tsx scripts/seed-view-levels.ts; then
        log "‚úÖ Demo seed (view-levels) completed"
    else
        log "‚ö†Ô∏è Demo seed (view-levels) failed"
    fi

    # User groups
    if npx tsx scripts/seed-user-groups.ts; then
        log "‚úÖ Demo seed (user-groups) completed"
    else
        log "‚ö†Ô∏è Demo seed (user-groups) failed"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
generate_prisma_client() {
    log "üîß Generating Prisma client..."
    
    if npx prisma generate; then
        log "‚úÖ Prisma client generated"
    else
        log "‚ùå Prisma client generation failed"
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    log "üéØ Starting initialization process..."
    
    # 1. –û–∂–∏–¥–∞–Ω–∏–µ –ë–î
    wait_for_db
    
    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞
    generate_prisma_client
    
    # 3. –ú–∏–≥—Ä–∞—Ü–∏–∏
    run_migrations
    
    # 4. –ê–≤—Ç–æ-—Å–∏–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    run_auto_seed

    # 4.1 –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    run_demo_seeds
    
    log "üéâ Initialization completed, starting application..."
    
    # 5. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    exec "$@"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
trap 'log "üõë Received shutdown signal"; exit 0' SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
main "$@"
