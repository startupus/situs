#!/usr/bin/env ts-node
/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º –≤ testus-service
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç API Faker.js v8+ –∏ —Ç–∏–ø—ã Express
 */

import * as fs from 'fs';

class TestusServiceFinalFixer {
  public async fixAllIssues(): Promise<void> {
    console.log('üîß –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ testus-service...');

    await this.fixFakerApiV8();
    await this.fixExpressTypes();

    console.log('üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ testus-service –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  }

  private async fixFakerApiV8(): Promise<void> {
    console.log('1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API Faker.js v8+...');

    const testDataFile = 'services/testus-service/src/__tests__/fixtures/testData.ts';

    if (fs.existsSync(testDataFile)) {
      try {
        let content = fs.readFileSync(testDataFile, 'utf8');

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º locale API
        content = content.replace(/faker\.setLocale\("ru"\);/g, 'faker.setDefaultRefDate("2023-01-01");');

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º precision –Ω–∞ fractionDigits
        content = content.replace(/precision: ([\d.]+)/g, 'fractionDigits: 2');

        fs.writeFileSync(testDataFile, content);
        console.log('   ‚úÖ API Faker.js v8+ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
      }
    }

    console.log('');
  }

  private async fixExpressTypes(): Promise<void> {
    console.log('2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ Express...');

    const files = ['services/testus-service/src/api/agents.ts', 'services/testus-service/src/middleware/auth.ts'];

    for (const file of files) {
      if (fs.existsSync(file)) {
        try {
          let content = fs.readFileSync(file, 'utf8');

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º return type –¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π
          content = content.replace(/async \(req, res\): Promise<void> => {/g, 'async (req, res) => {');

          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º return type –¥–ª—è middleware
          content = content.replace(
            /\(req: Request, res: Response, next: NextFunction\): Promise<void> => {/g,
            '(req: Request, res: Response, next: NextFunction) => {',
          );

          content = content.replace(
            /\(req: Request, res: Response, next: NextFunction\): void => {/g,
            '(req: Request, res: Response, next: NextFunction) => {',
          );

          fs.writeFileSync(file, content);
          console.log(`   ‚úÖ ${file.split('/').pop()} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
        } catch (error) {
          console.error(`   ‚ùå ${file.split('/').pop()}: ${(error as Error).message}`);
        }
      }
    }

    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const fixer = new TestusServiceFinalFixer();
fixer
  .fixAllIssues()
  .then(() => {
    console.log('‚úÖ Testus-service –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—é: npx tsc --build');
    console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm test');
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', (error as Error).message);
    process.exit(1);
  });
