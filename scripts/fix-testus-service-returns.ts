#!/usr/bin/env ts-node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å return –≤ testus-service
 */

import * as fs from 'fs';

class TestusServiceReturnsFixer {
  public async fixAllIssues(): Promise<void> {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å return –≤ testus-service...');
    
    await this.fixAgentsFile();
    await this.fixAuthFile();
    
    console.log('üéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å return –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  }

  private async fixAgentsFile(): Promise<void> {
    console.log('1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ agents.ts...');
    
    const file = 'services/testus-service/src/api/agents.ts';
    
    if (fs.existsSync(file)) {
      try {
        let content = fs.readFileSync(file, 'utf8');
        
        // –ù–∞–π–¥–µ–º –∏ –∏—Å–ø—Ä–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ return
        const functionPatterns = [
          {
            pattern: /agentsRouter\.post\("\/generate-scenarios", requireAuth, async \(req, res\) => {[\s\S]*?}\);/g,
            needsReturn: true
          },
          {
            pattern: /agentsRouter\.post\("\/generate-tests", requireAuth, async \(req, res\) => {[\s\S]*?}\);/g,
            needsReturn: true
          },
          {
            pattern: /agentsRouter\.post\("\/workflow", requireAuth, async \(req, res\) => {[\s\S]*?}\);/g,
            needsReturn: true
          }
        ];
        
        // –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º return –ø–µ—Ä–µ–¥ res.status
        content = content.replace(
          /(\s+)res\.status\(400\)\.json\(/g,
          '$1return res.status(400).json('
        );
        
        content = content.replace(
          /(\s+)res\.status\(200\)\.json\(/g,
          '$1return res.status(200).json('
        );
        
        content = content.replace(
          /(\s+)res\.status\(500\)\.json\(/g,
          '$1return res.status(500).json('
        );
        
        fs.writeFileSync(file, content);
        console.log('   ‚úÖ agents.ts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
      }
    }
    
    console.log('');
  }

  private async fixAuthFile(): Promise<void> {
    console.log('2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ auth.ts...');
    
    const file = 'services/testus-service/src/middleware/auth.ts';
    
    if (fs.existsSync(file)) {
      try {
        let content = fs.readFileSync(file, 'utf8');
        
        // –î–æ–±–∞–≤–ª—è–µ–º return –ø–µ—Ä–µ–¥ res.status
        content = content.replace(
          /(\s+)res\.status\(401\)\.json\(/g,
          '$1return res.status(401).json('
        );
        
        content = content.replace(
          /(\s+)res\.status\(403\)\.json\(/g,
          '$1return res.status(403).json('
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º return –≤ –∫–æ–Ω—Ü–µ middleware —Ñ—É–Ω–∫—Ü–∏–π
        content = content.replace(
          /(\s+)next\(\);(\s+)}/g,
          '$1return next();$2}'
        );
        
        fs.writeFileSync(file, content);
        console.log('   ‚úÖ auth.ts –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
      }
    }
    
    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const fixer = new TestusServiceReturnsFixer();
fixer.fixAllIssues()
  .then(() => {
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å return –≤ testus-service –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
    console.log('üìã –¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', (error as Error).message);
    process.exit(1);
  }); 