#!/usr/bin/env tsx

/**
 * üîß CORRECT HANGING TESTS FIXER
 * 
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
 */

import { readFileSync, writeFileSync, existsSync, readdirSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
const SERVICES_WITH_HANGING_TESTS = [
  'services/agents-service',
  'services/bilingus-service',
  'services/client-service',
  'services/gateway-service',
  'services/situs-service',
  'services/testus-service',
  'services/loginus'
];

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è vitest
const CORRECT_VITEST_CONFIG = `import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–Ω–∏–π
    testTimeout: 15000,
    hookTimeout: 10000,
    teardownTimeout: 5000,
    
    // –ò–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    isolate: true,
    sequence: {
      shuffle: false,
      concurrent: false
    },
    
    // Cleanup
    clearMocks: true,
    restoreMocks: true,
    unstubEnvs: true,
    unstubGlobals: true,
    
    // –û–∫—Ä—É–∂–µ–Ω–∏–µ
    environment: 'node',
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    globals: true,
    
    // –ü–æ–∫—Ä—ã—Ç–∏–µ
    coverage: {
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'dist/',
        'coverage/',
        '**/*.d.ts',
        '**/*.test.ts',
        '**/*.spec.ts'
      ]
    },
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ memory leaks
    pool: 'forks',
    poolOptions: {
      forks: {
        singleFork: true
      }
    }
  }
});
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö
function fixTestFileSyntax(filePath: string): boolean {
  if (!existsSync(filePath)) return false;
  
  let content = readFileSync(filePath, 'utf-8');
  let modified = false;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ finally –±–ª–æ–∫–∏ –∏–∑ beforeEach
  const incorrectPattern = /beforeEach\(\(\) => \{\s*vi\.clearAllMocks\(\);\s*\} finally \{\s*vi\.useRealTimers\(\);\s*\}/g;
  if (content.match(incorrectPattern)) {
    content = content.replace(incorrectPattern, `beforeEach(() => {
    vi.clearAllMocks();
  });
  
  afterEach(() => {
    vi.clearAllTimers();
    vi.restoreAllMocks();
  })`);
    modified = true;
  }
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ finally –±–ª–æ–∫–∏ –∏–∑ afterEach
  const incorrectAfterEachPattern = /afterEach\(\(\) => \{\s*vi\.clearAllTimers\(\);\s*vi\.restoreAllMocks\(\);\s*\} finally \{\s*vi\.useRealTimers\(\);\s*\}/g;
  if (content.match(incorrectAfterEachPattern)) {
    content = content.replace(incorrectAfterEachPattern, `afterEach(() => {
    vi.clearAllTimers();
    vi.restoreAllMocks();
  })`);
    modified = true;
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ it –±–ª–æ–∫–∏
  const incorrectItPattern = /it\('([^']+)', async \(\) => \{\s*vi\.useFakeTimers\(\);\s*try \{/g;
  if (content.match(incorrectItPattern)) {
    content = content.replace(incorrectItPattern, `it('$1', async () => {
    vi.useFakeTimers();
    try {`);
    modified = true;
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –±–ª–æ–∫–∏
  const incorrectClosingPattern = /\} finally \{\s*vi\.useRealTimers\(\);\s*\}\s*\}\);\s*$/gm;
  if (content.match(incorrectClosingPattern)) {
    content = content.replace(incorrectClosingPattern, `    } finally {
      vi.useRealTimers();
    }
  });`);
    modified = true;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  if (!content.includes('import { vi }') && !content.includes('import vi')) {
    content = `import { vi } from 'vitest';\n${content}`;
    modified = true;
  }
  
  if (modified) {
    writeFileSync(filePath, content);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
function rewriteTestFile(filePath: string): boolean {
  if (!existsSync(filePath)) return false;
  
  let content = readFileSync(filePath, 'utf-8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  if (content.includes('} finally {') && content.includes('beforeEach')) {
    console.log(`    üîß –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º ${filePath}`);
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Å—Ç–æ–≤
    content = content
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –±–ª–æ–∫–∏
      .replace(/beforeEach\(\(\) => \{[^}]*\} finally \{[^}]*\}/g, '')
      .replace(/afterEach\(\(\) => \{[^}]*\} finally \{[^}]*\}/g, '')
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
      .replace(/describe\('([^']+)', \(\) => \{/, `describe('$1', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });
  
  afterEach(() => {
    vi.clearAllTimers();
    vi.restoreAllMocks();
  });`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç vi –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!content.includes('import { vi }')) {
      content = `import { vi } from 'vitest';\n${content}`;
    }
    
    writeFileSync(filePath, content);
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞
function createSimpleWorkingTest(servicePath: string): void {
  const testPath = join(servicePath, 'src/__tests__/working.test.ts');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const testDir = dirname(testPath);
  if (!existsSync(testDir)) {
    mkdirSync(testDir, { recursive: true });
  }
  
  const simpleTestContent = `import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';

describe('Working Test', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });
  
  afterEach(() => {
    vi.clearAllTimers();
    vi.restoreAllMocks();
  });
  
  it('should pass without hanging', () => {
    expect(true).toBe(true);
  });
  
  it('should handle async operations', async () => {
    const result = await Promise.resolve('test');
    expect(result).toBe('test');
  });
  
  it('should handle mocks', () => {
    const mockFn = vi.fn();
    mockFn('test');
    expect(mockFn).toHaveBeenCalledWith('test');
  });
});
`;
  
  writeFileSync(testPath, simpleTestContent);
  console.log(`    ‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç: ${testPath}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function fixServiceTests(servicePath: string): void {
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${servicePath}...`);
  
  // 1. –û–±–Ω–æ–≤–ª—è–µ–º vitest.config.ts
  const vitestConfigPath = join(servicePath, 'vitest.config.ts');
  writeFileSync(vitestConfigPath, CORRECT_VITEST_CONFIG);
  console.log('  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω vitest.config.ts');
  
  // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π —Ç–µ—Å—Ç
  createSimpleWorkingTest(servicePath);
  
  // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
  const testDirs = ['src/__tests__', 'src/tests', '__tests__', 'tests'];
  let fixedFiles = 0;
  
  for (const testDir of testDirs) {
    const testDirPath = join(servicePath, testDir);
    if (existsSync(testDirPath)) {
      console.log(`  üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${testDir}/`);
      fixedFiles += fixTestsInDirectory(testDirPath);
    }
  }
  
  console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function fixTestsInDirectory(dirPath: string): number {
  let fixedCount = 0;
  const files = readdirSync(dirPath, { withFileTypes: true });
  
  for (const file of files) {
    const filePath = join(dirPath, file.name);
    
    if (file.isDirectory()) {
      fixedCount += fixTestsInDirectory(filePath);
    } else if (file.name.endsWith('.test.ts') || file.name.endsWith('.spec.ts')) {
      if (rewriteTestFile(filePath)) {
        fixedCount++;
      }
    }
  }
  
  return fixedCount;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
  console.log('üöÄ CORRECT HANGING TESTS FIXER');
  console.log('===============================');
  
  for (const servicePath of SERVICES_WITH_HANGING_TESTS) {
    if (existsSync(servicePath)) {
      fixServiceTests(servicePath);
    } else {
      console.log(`‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å ${servicePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
  
  console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å:');
  console.log('   cd services/agents-service && npm test');
  console.log('   cd services/gateway-service && npm test');
  console.log('   cd services/bilingus-service && npm test');
}

if (require.main === module) {
  main().catch(console.error);
} 