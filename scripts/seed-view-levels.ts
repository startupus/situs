#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const viewLevels = [
  {
    title: 'Public',
    description: '–ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    ordering: 1,
    groupIds: JSON.stringify(['public']), // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø
  },
  {
    title: 'Guest',
    description: '–î–æ—Å—Ç—É–ø –¥–ª—è –≥–æ—Å—Ç–µ–π (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)',
    ordering: 2,
    groupIds: JSON.stringify([]),
  },
  {
    title: 'Registered',
    description: '–î–æ—Å—Ç—É–ø –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    ordering: 3,
    groupIds: JSON.stringify([]), // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ID –≥—Ä—É–ø–ø—ã Registered
  },
  {
    title: 'Special',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞',
    ordering: 4,
    groupIds: JSON.stringify([]), // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ID –≥—Ä—É–ø–ø Author, Editor, Publisher
  },
];

async function seedViewLevels() {
  console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞...');

  // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
  const registeredGroup = await prisma.userGroup.findFirst({
    where: { title: 'Registered' },
  });

  const authorGroup = await prisma.userGroup.findFirst({
    where: { title: 'Author' },
  });

  const editorGroup = await prisma.userGroup.findFirst({
    where: { title: 'Editor' },
  });

  const publisherGroup = await prisma.userGroup.findFirst({
    where: { title: 'Publisher' },
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º groupIds —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID
  if (registeredGroup) {
    viewLevels[2].groupIds = JSON.stringify([registeredGroup.id]);
  }

  if (authorGroup && editorGroup && publisherGroup) {
    viewLevels[3].groupIds = JSON.stringify([authorGroup.id, editorGroup.id, publisherGroup.id]);
  }

  for (const level of viewLevels) {
    const existingLevel = await prisma.viewLevel.findFirst({
      where: { title: level.title },
    });

    if (!existingLevel) {
      await prisma.viewLevel.create({
        data: level,
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${level.title}`);
    } else {
      console.log(`‚è≠Ô∏è  –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${level.title}`);
    }
  }

  console.log('üéâ –°–∏–¥—ã —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

async function main() {
  try {
    await seedViewLevels();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–¥–æ–≤:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
main();

export { seedViewLevels };
