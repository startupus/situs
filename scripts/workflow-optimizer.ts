#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

interface WorkflowOptimization {
  name: string;
  description: string;
  action: () => Promise<void>;
  status: 'pending' | 'completed' | 'failed';
}

class WorkflowOptimizer {
  private optimizations: WorkflowOptimization[] = [];

  constructor() {
    this.initializeOptimizations();
  }

  private initializeOptimizations(): void {
    this.optimizations = [
      {
        name: '–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞',
        description: '–û—á–∏—Å—Ç–∫–∞ Vite –∫—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
        action: this.clearCache.bind(this),
        status: 'pending',
      },
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript',
        description: '–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫',
        action: this.fixTypeScript.bind(this),
        status: 'pending',
      },
      {
        name: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞',
        action: this.validateBuild.bind(this),
        status: 'pending',
      },
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
        action: this.checkDependencies.bind(this),
        status: 'pending',
      },
      {
        name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
        action: this.optimizeConfig.bind(this),
        status: 'pending',
      },
    ];
  }

  async optimize(): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é workflow —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...\n');

    for (const optimization of this.optimizations) {
      try {
        console.log(`‚è≥ ${optimization.name}...`);
        await optimization.action();
        optimization.status = 'completed';
        console.log(`‚úÖ ${optimization.name} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n`);
      } catch (error) {
        optimization.status = 'failed';
        console.log(`‚ùå ${optimization.name} - –æ—à–∏–±–∫–∞: ${error}\n`);
      }
    }

    this.printResults();
  }

  private async clearCache(): Promise<void> {
    const cachePaths = ['node_modules/.vite', 'dist', '.vite', 'coverage'];

    for (const cachePath of cachePaths) {
      if (fs.existsSync(cachePath)) {
        execSync(`rm -rf ${cachePath}`, { stdio: 'inherit' });
        console.log(`  üóëÔ∏è  –û—á–∏—â–µ–Ω: ${cachePath}`);
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    try {
      execSync('find . -name "*.log" -size +10M -delete', { stdio: 'inherit' });
      console.log('  üóëÔ∏è  –£–¥–∞–ª–µ–Ω—ã –±–æ–ª—å—à–∏–µ –ª–æ–≥ —Ñ–∞–π–ª—ã');
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    }
  }

  private async fixTypeScript(): Promise<void> {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è TypeScript
      execSync('npm run fix:typescript', { stdio: 'inherit' });
      console.log('  üîß TypeScript –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  TypeScript –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏');
    }
  }

  private async validateBuild(): Promise<void> {
    try {
      execSync('npm run validate:build', { stdio: 'inherit' });
      console.log('  ‚úÖ –°–±–æ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–∞');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
    }
  }

  private async checkDependencies(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      execSync('npm outdated', { stdio: 'pipe' });
      console.log('  üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
    } catch (error) {
      console.log('  üì¶ –ï—Å—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å node_modules
    try {
      execSync('npm audit --audit-level=moderate', { stdio: 'pipe' });
      console.log('  üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö');
    }
  }

  private async optimizeConfig(): Promise<void> {
    const configFiles = ['vite.config.ts', 'tailwind.config.js', 'postcss.config.js', 'tsconfig.json'];

    for (const configFile of configFiles) {
      if (fs.existsSync(configFile)) {
        console.log(`  ‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–µ–Ω: ${configFile}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const totalSize = configFiles.reduce((size, file) => {
      if (fs.existsSync(file)) {
        const stats = fs.statSync(file);
        return size + stats.size;
      }
      return size;
    }, 0);

    console.log(`  üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${(totalSize / 1024).toFixed(2)} KB`);
  }

  private printResults(): void {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ workflow:');
    console.log('='.repeat(50));

    const completed = this.optimizations.filter((opt) => opt.status === 'completed').length;
    const failed = this.optimizations.filter((opt) => opt.status === 'failed').length;
    const total = this.optimizations.length;

    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completed}/${total}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}/${total}`);

    if (failed > 0) {
      console.log('\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
      this.optimizations
        .filter((opt) => opt.status === 'failed')
        .forEach((opt) => {
          console.log(`  - ${opt.name}: ${opt.description}`);
        });
    }

    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã:');
    console.log('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run fix:typescript –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
    console.log('  - –ó–∞–ø—É—Å–∫–∞–π—Ç–µ npm run validate:build –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º');
    console.log('  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run clean:all –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞');
    console.log('  - –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ PLAN mode');

    console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è workflow –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const optimizer = new WorkflowOptimizer();
  optimizer.optimize().catch(console.error);
}

export default WorkflowOptimizer;
