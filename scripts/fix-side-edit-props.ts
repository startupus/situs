#!/usr/bin/env node

import fs from 'fs';
import { glob } from 'glob';

async function fixSideEditProps() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –æ—à–∏–±–∫–∏ —Å props –≤ sideEditProps...');

  const files = await glob('src/components/redaktus/**/*.tsx');
  let fixedFiles = 0;

  for (const file of files) {
    let content = fs.readFileSync(file, 'utf8');
    let hasChanges = false;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É sideEditProps - —É–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å props
    const propsPattern = /sideEditProps:\s*\[([\s\S]*?)\]/;
    const match = content.match(propsPattern);

    if (match) {
      const sideEditPropsContent = match[1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å props
      if (sideEditPropsContent.includes('props:')) {
        console.log(`–ò—Å–ø—Ä–∞–≤–ª—è—é ${file}`);

        // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        let newContent = content.replace(
          /{\s*groupName:\s*'[^']*',\s*defaultOpen:\s*(true|false),\s*props:\s*\[([^\]]+)\],?\s*}/g,
          (match, defaultOpen, props) => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ props –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏
            return props.trim();
          },
        );

        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
        newContent = newContent.replace(/,\s*,/g, ',');
        newContent = newContent.replace(/\[\s*,/g, '[');
        newContent = newContent.replace(/,\s*\]/g, ']');

        if (newContent !== content) {
          fs.writeFileSync(file, newContent);
          hasChanges = true;
          fixedFiles++;
        }
      }
    }

    if (hasChanges) {
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${file}`);
    }
  }

  console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fixedFiles}`);
}

fixSideEditProps().catch(console.error);
