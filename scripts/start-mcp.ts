#!/usr/bin/env tsx

/**
 * ะกะบัะธะฟั ะดะปั ะทะฐะฟััะบะฐ MCP (Model Context Protocol) ัะตัะฒะตัะฐ
 *
 * ะญัะพั ัะตัะฒะตั ะฟัะตะดะพััะฐะฒะปัะตั AI ะธะฝััััะผะตะฝัั, ัะตััััั ะธ ะฟัะพะผะฟัั
 * ะดะปั ะธะฝัะตะณัะฐัะธะธ ั ะฒะฝะตัะฝะธะผะธ AI ัะธััะตะผะฐะผะธ ัะตัะตะท MCP ะฟัะพัะพะบะพะป.
 */

import { spawn } from 'child_process';
import { join } from 'path';

const MCP_SERVER_PATH = join(process.cwd(), 'src', 'mcp', 'server.ts');

console.log('๐ ะะฐะฟััะบ Situs MCP Server...');
console.log(`๐ ะััั ะบ ัะตัะฒะตัั: ${MCP_SERVER_PATH}`);

// ะะฐะฟััะบ MCP ัะตัะฒะตัะฐ ั ะฟะพะผะพััั tsx
const mcpProcess = spawn('npx', ['tsx', MCP_SERVER_PATH], {
  stdio: 'inherit',
  cwd: process.cwd(),
  env: {
    ...process.env,
    NODE_ENV: 'development',
  },
});

// ะะฑัะฐะฑะพัะบะฐ ะทะฐะฒะตััะตะฝะธั ะฟัะพัะตััะฐ
mcpProcess.on('close', (code) => {
  console.log(`\n๐ก MCP ัะตัะฒะตั ะทะฐะฒะตััะตะฝ ั ะบะพะดะพะผ: ${code}`);
  process.exit(code || 0);
});

// ะะฑัะฐะฑะพัะบะฐ ะพัะธะฑะพะบ
mcpProcess.on('error', (error) => {
  console.error('โ ะัะธะฑะบะฐ ะทะฐะฟััะบะฐ MCP ัะตัะฒะตัะฐ:', error);
  process.exit(1);
});

// ะะฑัะฐะฑะพัะบะฐ ัะธะณะฝะฐะปะพะฒ ะทะฐะฒะตััะตะฝะธั
process.on('SIGINT', () => {
  console.log('\n๐ ะะพะปััะตะฝ ัะธะณะฝะฐะป SIGINT, ะทะฐะฒะตััะตะฝะธะต MCP ัะตัะฒะตัะฐ...');
  mcpProcess.kill('SIGINT');
});

process.on('SIGTERM', () => {
  console.log('\n๐ ะะพะปััะตะฝ ัะธะณะฝะฐะป SIGTERM, ะทะฐะฒะตััะตะฝะธะต MCP ัะตัะฒะตัะฐ...');
  mcpProcess.kill('SIGTERM');
});
