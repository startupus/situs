#!/usr/bin/env tsx

import path from 'path';
import fs from 'fs';
import { scanAndAdaptComponents, TailGridsComponent } from '../src/utils/componentScanner';
import { ComponentLibraryItem } from '../src/types/editor';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è TailGrids –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –∏ –∏—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –†–µ–¥–∞–∫—Ç—É—Å
 */

const TAILGRIDS_PATH = path.join(process.cwd(), 'Upload', 'tailgrids-react-pro-main');
const OUTPUT_DIR = path.join(process.cwd(), 'src', 'components', 'adapted');
const COMPONENTS_JSON = path.join(process.cwd(), 'src', 'data', 'adaptedComponents.json');

interface AdaptedComponentFile {
  id: string;
  name: string;
  category: string;
  subcategory: string;
  originalPath: string;
  adaptedPath: string;
  content: string;
  metadata: ComponentLibraryItem;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function main() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ TailGrids –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
  console.log(`üìÇ –ü—É—Ç—å –∫ TailGrids: ${TAILGRIDS_PATH}`);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(TAILGRIDS_PATH)) {
      throw new Error(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è TailGrids –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${TAILGRIDS_PATH}`);
    }

    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ensureDirectories();

    // –°–∫–∞–Ω–∏—Ä—É–µ–º –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log('‚ö° –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...');
    const { adapted, scanResult } = await scanAndAdaptComponents(TAILGRIDS_PATH);

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${scanResult.totalComponents} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ ${scanResult.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö`);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    scanResult.categories.forEach(category => {
      console.log(`  ${category.name}: ${category.count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: ${category.subcategories.join(', ')}`);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log('\nüîÑ –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞...');
    const adaptedFiles = await processAndSaveComponents(scanResult.components, adapted);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    await saveComponentsJSON(adaptedFiles);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª
    await generateIndexFile(adaptedFiles);

    console.log(`\nüéâ –£—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ ${adaptedFiles.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!`);
    console.log(`üìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${OUTPUT_DIR}`);
    console.log(`üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${COMPONENTS_JSON}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
    process.exit(1);
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function ensureDirectories() {
  const dirs = [
    OUTPUT_DIR,
    path.dirname(COMPONENTS_JSON),
    path.join(OUTPUT_DIR, 'marketing'),
    path.join(OUTPUT_DIR, 'core'),
    path.join(OUTPUT_DIR, 'dashboard'),
    path.join(OUTPUT_DIR, 'ecommerce'),
    path.join(OUTPUT_DIR, 'ai'),
    path.join(OUTPUT_DIR, 'application')
  ];

  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */
async function processAndSaveComponents(
  originalComponents: TailGridsComponent[],
  adaptedMetadata: ComponentLibraryItem[]
): Promise<AdaptedComponentFile[]> {
  const adaptedFiles: AdaptedComponentFile[] = [];

  for (let i = 0; i < originalComponents.length; i++) {
    const original = originalComponents[i];
    const metadata = adaptedMetadata[i];

    try {
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const adaptedContent = adaptComponentContent(original);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const categoryDir = getCategoryDirectory(original.category);
      const fileName = `${original.name}.tsx`;
      const adaptedPath = path.join(OUTPUT_DIR, categoryDir, original.subcategory.toLowerCase(), fileName);

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dir = path.dirname(adaptedPath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      fs.writeFileSync(adaptedPath, adaptedContent, 'utf-8');

      const adaptedFile: AdaptedComponentFile = {
        id: metadata.id,
        name: metadata.name,
        category: original.category,
        subcategory: original.subcategory,
        originalPath: original.filePath,
        adaptedPath,
        content: adaptedContent,
        metadata
      };

      adaptedFiles.push(adaptedFile);

      console.log(`  ‚úì ${original.category}/${original.subcategory}/${original.name}`);

    } catch (error) {
      console.warn(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${original.name}: ${error}`);
    }
  }

  return adaptedFiles;
}

/**
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –†–µ–¥–∞–∫—Ç—É—Å
 */
function adaptComponentContent(component: TailGridsComponent): string {
  let content = component.content;

  // –ó–∞–º–µ–Ω—è–µ–º JSX –Ω–∞ TSX
  content = content.replace(/\.jsx/g, '.tsx');

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã TypeScript
  content = addTypeScriptTypes(content, component);

  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  content = adaptForEditor(content, component);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  content = addMetadataComments(content, component);

  return content;
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—ã TypeScript
 */
function addTypeScriptTypes(content: string, component: TailGridsComponent): string {
  // –ó–∞–º–µ–Ω—è–µ–º import React –Ω–∞ –∏–º–ø–æ—Ä—Ç —Å —Ç–∏–ø–∞–º–∏
  content = content.replace(
    /import React.*?from ["']react["'];?/,
    "import React from 'react';"
  );

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—Å—ã
  if (component.props.length > 0) {
    const propsInterface = generatePropsInterface(component);
    content = content.replace(
      /(import.*?from.*?;[\s\S]*?)(\n\nconst|\nexport const)/,
      `$1\n\n${propsInterface}$2`
    );

    // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const componentName = component.name;
    const propsTypeName = `${componentName}Props`;
    
    content = content.replace(
      new RegExp(`const ${componentName} = \\(([^)]*?)\\)`),
      `const ${componentName}: React.FC<${propsTypeName}> = ($1)`
    );
  }

  return content;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤
 */
function generatePropsInterface(component: TailGridsComponent): string {
  if (component.props.length === 0) return '';

  const propsTypeName = `${component.name}Props`;
  const props = component.props.map(prop => {
    const optional = prop.required ? '' : '?';
    const type = mapPropType(prop.type);
    return `  ${prop.name}${optional}: ${type};`;
  }).join('\n');

  return `interface ${propsTypeName} {\n${props}\n}`;
}

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –ø—Ä–æ–ø—Å–æ–≤
 */
function mapPropType(type: string): string {
  switch (type) {
    case 'string': return 'string';
    case 'number': return 'number';
    case 'boolean': return 'boolean';
    case 'array': return 'any[]';
    case 'object': return 'Record<string, any>';
    case 'function': return '() => void';
    default: return 'any';
  }
}

/**
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
 */
function adaptForEditor(content: string, component: TailGridsComponent): string {
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ë—Ä—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
  content = content.replace(
    /(const \w+ = .*?\{[\s\S]*?return \()/,
    `$1\n    <div className="redaktus-component" data-component-type="${component.name.toLowerCase()}">`
  );

  content = content.replace(
    /([\s\S]*)(;\s*};?\s*export)/,
    `$1\n    </div>$2`
  );

  // –î–µ–ª–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
  content = makeLinksEditable(content);
  content = makeImagesEditable(content);
  content = makeTextEditable(content);

  return content;
}

/**
 * –°–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
 */
function makeLinksEditable(content: string): string {
  return content.replace(
    /href=["']([^"']*)["']/g,
    'href={props.href || "$1"}'
  );
}

/**
 * –°–¥–µ–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏
 */
function makeImagesEditable(content: string): string {
  return content.replace(
    /src=["']([^"']*)["']/g,
    'src={props.imageSrc || "$1"}'
  ).replace(
    /alt=["']([^"']*)["']/g,
    'alt={props.imageAlt || "$1"}'
  );
}

/**
 * –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
 */
function makeTextEditable(content: string): string {
  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–æ–ø—Å—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  content = content.replace(
    />(.*?Kickstart.*?)<\/h1>/g,
    '>{props.title || "$1"}</h1>'
  );
  
  content = content.replace(
    />(.*?TailGrids.*?business.*?)<\/p>/g,
    '>{props.description || "$1"}</p>'
  );

  return content;
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
function addMetadataComments(content: string, component: TailGridsComponent): string {
  const header = `/**
 * ${component.name} - ${component.subcategory} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * 
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ TailGrids Pro –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –†–µ–¥–∞–∫—Ç—É—Å
 * –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${component.category}
 * –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${component.subcategory}
 * 
 * @component
 * @example
 * <${component.name} 
 *   ${component.props.map(p => `${p.name}="${p.defaultValue || 'value'}"`).join('\n *   ')}
 * />
 */\n\n`;

  return header + content;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryDirectory(category: string): string {
  const mapping: Record<string, string> = {
    'MarketingComponents': 'marketing',
    'CoreComponents': 'core',
    'DashboardComponents': 'dashboard',
    'EcommerceComponents': 'ecommerce',
    'AiComponents': 'ai',
    'ApplicationComponents': 'application'
  };

  return mapping[category] || 'other';
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
async function saveComponentsJSON(adaptedFiles: AdaptedComponentFile[]): Promise<void> {
  const componentsData = {
    version: '1.0.0',
    generatedAt: new Date().toISOString(),
    totalComponents: adaptedFiles.length,
    categories: getCategories(adaptedFiles),
    components: adaptedFiles.map(file => ({
      id: file.id,
      name: file.name,
      category: file.category,
      subcategory: file.subcategory,
      path: file.adaptedPath,
      metadata: file.metadata
    }))
  };

  fs.writeFileSync(COMPONENTS_JSON, JSON.stringify(componentsData, null, 2), 'utf-8');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
function getCategories(adaptedFiles: AdaptedComponentFile[]) {
  const categoryMap = new Map<string, Set<string>>();

  adaptedFiles.forEach(file => {
    if (!categoryMap.has(file.category)) {
      categoryMap.set(file.category, new Set());
    }
    categoryMap.get(file.category)!.add(file.subcategory);
  });

  return Array.from(categoryMap.entries()).map(([category, subcategories]) => ({
    name: category,
    subcategories: Array.from(subcategories),
    count: adaptedFiles.filter(f => f.category === category).length
  }));
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
async function generateIndexFile(adaptedFiles: AdaptedComponentFile[]): Promise<void> {
  const indexPath = path.join(OUTPUT_DIR, 'index.ts');
  
  const exports = adaptedFiles.map(file => {
    const relativePath = path.relative(OUTPUT_DIR, file.adaptedPath).replace(/\.tsx$/, '');
    const exportName = file.metadata.name.replace(/\s+/g, '');
    return `export { default as ${exportName} } from './${relativePath}';`;
  });

  const indexContent = `/**
 * –ò–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö TailGrids –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∫—Ä–∏–ø—Ç–æ–º scanComponents.ts
 * 
 * –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${adaptedFiles.length}
 * –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toISOString()}
 */

${exports.join('\n')}

// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
export { default as componentsMetadata } from '../data/adaptedComponents.json';
`;

  fs.writeFileSync(indexPath, indexContent, 'utf-8');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}