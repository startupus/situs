#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö TypeScript –æ—à–∏–±–æ–∫
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç:
 * - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
 * - –ü—Ä–æ—Å—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
 * - –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã any
 */

import * as fs from 'fs';
import * as path from 'path';
import { glob } from 'glob';

interface FixResult {
  file: string;
  fixes: number;
  errors: string[];
}

class TypeScriptQuickFixer {
  private fixes: FixResult[] = [];

  async fixAll(): Promise<void> {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –æ—à–∏–±–æ–∫...\n');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
    const files = await glob('src/**/*.{ts,tsx}', {
      ignore: ['**/*.d.ts', '**/node_modules/**', '**/dist/**'],
    });

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} TypeScript —Ñ–∞–π–ª–æ–≤\n`);

    for (const file of files) {
      await this.fixFile(file);
    }

    this.printResults();
  }

  private async fixFile(filePath: string): Promise<void> {
    try {
      const content = fs.readFileSync(filePath, 'utf-8');
      const originalContent = content;
      let fixedContent = content;
      let fixes = 0;

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
      fixedContent = this.fixFunctionParameters(fixedContent);
      if (fixedContent !== content) {
        fixes += (content.match(/\(\s*\{\s*[^}]*\}\s*\)\s*=>/g) || []).length;
        content = fixedContent;
      }

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö any —Ç–∏–ø–æ–≤
      fixedContent = this.fixAnyTypes(fixedContent);
      if (fixedContent !== content) {
        fixes += (content.match(/:\s*any/g) || []).length;
        content = fixedContent;
      }

      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      fixedContent = this.fixReactComponentTypes(fixedContent);
      if (fixedContent !== content) {
        fixes += (content.match(/React\.FC/g) || []).length;
        content = fixedContent;
      }

      if (fixedContent !== originalContent) {
        fs.writeFileSync(filePath, fixedContent, 'utf-8');
        this.fixes.push({
          file: filePath,
          fixes: fixes,
          errors: [],
        });
        console.log(`‚úÖ ${filePath} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixes} –æ—à–∏–±–æ–∫`);
      }
    } catch (error) {
      this.fixes.push({
        file: filePath,
        fixes: 0,
        errors: [error instanceof Error ? error.message : 'Unknown error'],
      });
      console.log(`‚ùå ${filePath} - –æ—à–∏–±–∫–∞: ${error}`);
    }
  }

  private fixFunctionParameters(content: string): string {
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π –±–µ–∑ —Ç–∏–ø–æ–≤
    return content.replace(/const\s+(\w+)\s*=\s*\(\s*\{\s*([^}]+)\s*\}\s*\)\s*=>/g, (match, funcName, params) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const paramNames = params.split(',').map((p: string) => p.trim().split(':')[0].trim());

      // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é string)
      const types = paramNames.map((name: string) => `${name}: string`).join('; ');

      return `const ${funcName} = ({ ${types} }: { ${types} }) =>`;
    });
  }

  private fixAnyTypes(content: string): string {
    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ any —Ç–∏–ø—ã –Ω–∞ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ
    return content
      .replace(/:\s*any\b/g, ': unknown')
      .replace(/Array<any>/g, 'Array<unknown>')
      .replace(/Record<string,\s*any>/g, 'Record<string, unknown>');
  }

  private fixReactComponentTypes(content: string): string {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    return content.replace(/const\s+(\w+)\s*=\s*\(\s*\)\s*=>/g, 'const $1 = (): JSX.Element =>');
  }

  private printResults(): void {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('='.repeat(50));

    const totalFiles = this.fixes.length;
    const totalFixes = this.fixes.reduce((sum, fix) => sum + fix.fixes, 0);
    const filesWithErrors = this.fixes.filter((fix) => fix.errors.length > 0).length;

    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
    console.log(`üîß –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`);
    console.log(`‚ùå –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${filesWithErrors}`);

    if (filesWithErrors > 0) {
      console.log('\n‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:');
      this.fixes
        .filter((fix) => fix.errors.length > 0)
        .forEach((fix) => {
          console.log(`  - ${fix.file}: ${fix.errors.join(', ')}`);
        });
    }

    console.log('\n‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TypeScript –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üí° –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PLAN mode');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const fixer = new TypeScriptQuickFixer();
  fixer.fixAll().catch(console.error);
}

export default TypeScriptQuickFixer;
