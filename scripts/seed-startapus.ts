#!/usr/bin/env tsx
import { PrismaClient, ProductType, PageStatus, PageType, ProjectStatus } from '@prisma/client';

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–¥–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ startapus-ecosystem
 * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ slug/id "startapus-ecosystem", –ø—Ä–æ–¥—É–∫—Ç WEBSITE –∏ –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function run() {
  const prisma = new PrismaClient();
  try {
    console.log('üå± Startapus seeder: begin');

    // Dev user (owner)
    const dev = await prisma.user.upsert({
      where: { email: 'dev@situs.local' },
      update: {},
      create: {
        username: 'dev',
        email: 'dev@situs.local',
        password: 'dev',
      },
    });
    console.log('üë§ Owner ready:', dev.id);

    // Project (id = slug for convenience in dev)
    const projectId = 'startapus-ecosystem';
    const project = await prisma.project.upsert({
      where: { id: projectId },
      update: { name: '–°–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å', slug: 'startapus-ecosystem', status: ProjectStatus.ACTIVE },
      create: {
        id: projectId,
        name: '–°–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å',
        description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å',
        slug: 'startapus-ecosystem',
        ownerId: dev.id,
        status: ProjectStatus.ACTIVE,
        isPublished: true,
        settings: JSON.stringify({ theme: 'auto', language: 'ru' }),
      },
    });
    console.log('üì¶ Project ready:', project.id);

    // WEBSITE product
    const website = await prisma.product.upsert({
      where: { projectId_name: { projectId: project.id, name: '–°–∞–π—Ç' } as any },
      update: { type: ProductType.WEBSITE },
      create: {
        name: '–°–∞–π—Ç',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞',
        type: ProductType.WEBSITE,
        projectId: project.id,
        settings: '{}',
      },
    });
    console.log('üß© Product WEBSITE ready:', website.id);

    // ECOMMERCE product (–º–∞–≥–∞–∑–∏–Ω)
    const store = await prisma.product.upsert({
      where: { projectId_name: { projectId: project.id, name: '–ú–∞–≥–∞–∑–∏–Ω' } as any },
      update: { type: ProductType.ECOMMERCE },
      create: {
        name: '–ú–∞–≥–∞–∑–∏–Ω',
        description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–µ–∫—Ç–∞',
        type: ProductType.ECOMMERCE,
        projectId: project.id,
        settings: JSON.stringify({ currency: 'RUB', paymentMethods: ['card', 'cash'] }),
      },
    });
    console.log('üõí Product ECOMMERCE ready:', store.id);

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (–∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ–Ω—é)
    const categories = [
      { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', slug: 'electronics', description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },
      { name: '–û–¥–µ–∂–¥–∞', slug: 'clothing', description: '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },
      { name: '–î–æ–º –∏ —Å–∞–¥', slug: 'home-garden', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏' },
    ];

    const createdCategories = [];
    for (let i = 0; i < categories.length; i++) {
      const cat = categories[i];
      const created = await prisma.category.upsert({
        where: { productId_slug: { productId: store.id, slug: cat.slug } as any },
        update: {},
        create: {
          name: cat.name,
          slug: cat.slug,
          description: cat.description,
          orderIndex: i,
          isActive: true,
          productId: store.id,
        },
      });
      createdCategories.push(created);
      console.log('üìÇ Category ready:', cat.name);
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ (–∞–Ω–∞–ª–æ–≥ –ø–æ–¥–º–µ–Ω—é)
    const electronicsCategory = createdCategories.find(c => c.slug === 'electronics');
    if (electronicsCategory) {
      const subCategories = [
        { name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', slug: 'smartphones', description: '–ú–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã' },
        { name: '–ù–æ—É—Ç–±—É–∫–∏', slug: 'laptops', description: '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã' },
        { name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', slug: 'accessories', description: '–ß–µ—Ö–ª—ã, –∑–∞—Ä—è–¥–∫–∏, –Ω–∞—É—à–Ω–∏–∫–∏' },
      ];

      for (let i = 0; i < subCategories.length; i++) {
        const subCat = subCategories[i];
        await prisma.category.upsert({
          where: { productId_slug: { productId: store.id, slug: subCat.slug } as any },
          update: {},
          create: {
            name: subCat.name,
            slug: subCat.slug,
            description: subCat.description,
            orderIndex: i,
            isActive: true,
            parentId: electronicsCategory.id, // –ò–µ—Ä–∞—Ä—Ö–∏—è!
            productId: store.id,
          },
        });
        console.log('üì± SubCategory ready:', subCat.name);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –û–¥–µ–∂–¥—ã
    const clothingCategory = createdCategories.find(c => c.slug === 'clothing');
    if (clothingCategory) {
      const clothingSubCategories = [
        { name: '–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', slug: 'mens-clothing', description: '–û–¥–µ–∂–¥–∞ –¥–ª—è –º—É–∂—á–∏–Ω' },
        { name: '–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞', slug: 'womens-clothing', description: '–û–¥–µ–∂–¥–∞ –¥–ª—è –∂–µ–Ω—â–∏–Ω' },
      ];

      for (let i = 0; i < clothingSubCategories.length; i++) {
        const subCat = clothingSubCategories[i];
        await prisma.category.upsert({
          where: { productId_slug: { productId: store.id, slug: subCat.slug } as any },
          update: {},
          create: {
            name: subCat.name,
            slug: subCat.slug,
            description: subCat.description,
            orderIndex: i,
            isActive: true,
            parentId: clothingCategory.id, // –ò–µ—Ä–∞—Ä—Ö–∏—è!
            productId: store.id,
          },
        });
        console.log('üëï SubCategory ready:', subCat.name);
      }
    }

    // Pages
    const seedPages = [
      { title: '–ì–ª–∞–≤–Ω–∞—è', slug: 'home', isHomePage: true },
      { title: '–û –∫–æ–º–ø–∞–Ω–∏–∏', slug: 'about' },
      { title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', slug: 'contacts' },
    ];

    let order = 0;
    for (const p of seedPages) {
      const created = await prisma.page.upsert({
        where: { productId_slug: { productId: website.id, slug: p.slug } as any },
        update: {},
        create: {
          title: p.title,
          slug: p.slug,
          content: JSON.stringify({ blocks: [] }),
          status: PageStatus.PUBLISHED,
          pageType: PageType.PAGE,
          isHomePage: Boolean(p.isHomePage),
          orderIndex: order++,
          productId: website.id,
        },
      });
      console.log('üìù Page ready:', created.slug);
    }

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–º–µ–Ω—é
    console.log('üß≠ Creating demo menus...');
    
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const mainMenu = await prisma.menuType.upsert({
      where: { projectId_name: { projectId: project.id, name: 'main' } as any },
      update: {},
      create: {
        name: 'main',
        title: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        description: '–û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–∞–π—Ç–∞',
        projectId: project.id,
      },
    });
    console.log('üìÅ MenuType main ready:', mainMenu.id);

    // –ü—É–Ω–∫—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    const mainMenuItems = [
      { title: '–ì–ª–∞–≤–Ω–∞—è', alias: 'home', component: 'Website', view: 'page', targetId: seedPages.find(p => p.isHomePage)?.slug },
      { title: '–ö–∞—Ç–∞–ª–æ–≥', alias: 'catalog', component: 'Store', view: 'categories' },
      { title: '–û –∫–æ–º–ø–∞–Ω–∏–∏', alias: 'about', component: 'Website', view: 'page', targetId: 'about' },
      { title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', alias: 'contacts', component: 'Website', view: 'page', targetId: 'contacts' },
    ];

    let menuOrder = 0;
    for (const item of mainMenuItems) {
      const created = await prisma.menuItem.upsert({
        where: { menuTypeId_alias: { menuTypeId: mainMenu.id, alias: item.alias } as any },
        update: {},
        create: {
          title: item.title,
          alias: item.alias,
          type: 'COMPONENT',
          level: 1,
          orderIndex: menuOrder++,
          component: item.component,
          view: item.view,
          targetId: item.targetId,
          isPublished: true,
          accessLevel: 'PUBLIC',
          language: '*',
          parameters: JSON.stringify({
            menu_show: true,
            css_class: 'nav-link'
          }),
          menuTypeId: mainMenu.id,
        },
      });
      console.log('üß© MenuItem ready:', created.alias);
    }

    // –ü–æ–¥–º–µ–Ω—é –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    const catalogMenuItem = await prisma.menuItem.findFirst({
      where: { menuTypeId: mainMenu.id, alias: 'catalog' }
    });

    if (catalogMenuItem && createdCategories.length > 0) {
      let subMenuOrder = 0;
      for (const category of createdCategories) {
        const subItem = await prisma.menuItem.upsert({
          where: { menuTypeId_alias: { menuTypeId: mainMenu.id, alias: `category-${category.slug}` } as any },
          update: {},
          create: {
            title: category.name,
            alias: `category-${category.slug}`,
            type: 'COMPONENT',
            level: 2,
            parentId: catalogMenuItem.id,
            orderIndex: subMenuOrder++,
            component: 'Store',
            view: 'category',
            targetId: category.id,
            isPublished: true,
            accessLevel: 'PUBLIC',
            language: '*',
            parameters: JSON.stringify({
              menu_show: true,
              itemsPerPage: 20,
              showFilters: true
            }),
            menuTypeId: mainMenu.id,
          },
        });
        console.log('üîó SubMenuItem ready:', subItem.alias);
      }
    }

    // –§—É—Ç–µ—Ä –º–µ–Ω—é
    const footerMenu = await prisma.menuType.upsert({
      where: { projectId_name: { projectId: project.id, name: 'footer' } as any },
      update: {},
      create: {
        name: 'footer',
        title: '–ú–µ–Ω—é –ø–æ–¥–≤–∞–ª–∞',
        description: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —Å–∞–π—Ç–∞',
        projectId: project.id,
      },
    });

    const footerItems = [
      { title: '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', alias: 'privacy', externalUrl: '/privacy' },
      { title: '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', alias: 'terms', externalUrl: '/terms' },
      { title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', alias: 'support', externalUrl: '/support' },
    ];

    let footerOrder = 0;
    for (const item of footerItems) {
      await prisma.menuItem.upsert({
        where: { menuTypeId_alias: { menuTypeId: footerMenu.id, alias: item.alias } as any },
        update: {},
        create: {
          title: item.title,
          alias: item.alias,
          type: 'URL',
          level: 1,
          orderIndex: footerOrder++,
          externalUrl: item.externalUrl,
          isPublished: true,
          accessLevel: 'PUBLIC',
          language: '*',
          menuTypeId: footerMenu.id,
        },
      });
    }

    console.log('üß≠ Demo menus created successfully');

    console.log('‚úÖ Startapus seeder: done');
  } catch (e) {
    console.error('‚ùå Startapus seeder error:', e);
    process.exitCode = 1;
  }
}

run();


