#!/usr/bin/env tsx
import { PrismaClient, ProductType, PageStatus, PageType, ProjectStatus } from '@prisma/client';

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–¥–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ startapus-ecosystem
 * –°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ slug/id "startapus-ecosystem", –ø—Ä–æ–¥—É–∫—Ç WEBSITE –∏ –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function run() {
  const prisma = new PrismaClient();
  try {
    console.log('üå± Startapus seeder: begin');

    // Dev user (owner)
    const dev = await prisma.user.upsert({
      where: { email: 'dev@situs.local' },
      update: {},
      create: {
        username: 'dev',
        email: 'dev@situs.local',
        password: 'dev',
      },
    });
    console.log('üë§ Owner ready:', dev.id);

    // Project (id = slug for convenience in dev)
    const projectId = 'startapus-ecosystem';
    const project = await prisma.project.upsert({
      where: { id: projectId },
      update: { name: '–°–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å', slug: 'startapus-ecosystem', status: ProjectStatus.ACTIVE },
      create: {
        id: projectId,
        name: '–°–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å',
        description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –°—Ç–∞—Ä—Ç–∞–ø—É—Å',
        slug: 'startapus-ecosystem',
        ownerId: dev.id,
        status: ProjectStatus.ACTIVE,
        isPublished: true,
        settings: JSON.stringify({ theme: 'auto', language: 'ru' }),
      },
    });
    console.log('üì¶ Project ready:', project.id);

    // WEBSITE product
    const website = await prisma.product.upsert({
      where: { projectId_name: { projectId: project.id, name: '–°–∞–π—Ç' } as any },
      update: { type: ProductType.WEBSITE },
      create: {
        name: '–°–∞–π—Ç',
        description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞',
        type: ProductType.WEBSITE,
        projectId: project.id,
        settings: '{}',
      },
    });
    console.log('üß© Product WEBSITE ready:', website.id);

    // ECOMMERCE product (–º–∞–≥–∞–∑–∏–Ω)
    const store = await prisma.product.upsert({
      where: { projectId_name: { projectId: project.id, name: '–ú–∞–≥–∞–∑–∏–Ω' } as any },
      update: { type: ProductType.ECOMMERCE },
      create: {
        name: '–ú–∞–≥–∞–∑–∏–Ω',
        description: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–µ–∫—Ç–∞',
        type: ProductType.ECOMMERCE,
        projectId: project.id,
        settings: JSON.stringify({ currency: 'RUB', paymentMethods: ['card', 'cash'] }),
      },
    });
    console.log('üõí Product ECOMMERCE ready:', store.id);

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    const categories = [
      { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', slug: 'electronics', description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã' },
      { name: '–û–¥–µ–∂–¥–∞', slug: 'clothing', description: '–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞' },
      { name: '–î–æ–º –∏ —Å–∞–¥', slug: 'home-garden', description: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏' },
    ];

    for (let i = 0; i < categories.length; i++) {
      const cat = categories[i];
      await prisma.category.upsert({
        where: { productId_slug: { productId: store.id, slug: cat.slug } as any },
        update: {},
        create: {
          name: cat.name,
          slug: cat.slug,
          description: cat.description,
          orderIndex: i,
          isActive: true,
          productId: store.id,
        },
      });
      console.log('üìÇ Category ready:', cat.name);
    }

    // Pages
    const seedPages = [
      { title: '–ì–ª–∞–≤–Ω–∞—è', slug: 'home', isHomePage: true },
      { title: '–û –∫–æ–º–ø–∞–Ω–∏–∏', slug: 'about' },
      { title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', slug: 'contacts' },
    ];

    let order = 0;
    for (const p of seedPages) {
      const created = await prisma.page.upsert({
        where: { productId_slug: { productId: website.id, slug: p.slug } as any },
        update: {},
        create: {
          title: p.title,
          slug: p.slug,
          content: JSON.stringify({ blocks: [] }),
          status: PageStatus.PUBLISHED,
          pageType: PageType.PAGE,
          isHomePage: Boolean(p.isHomePage),
          orderIndex: order++,
          productId: website.id,
        },
      });
      console.log('üìù Page ready:', created.slug);
    }

    console.log('‚úÖ Startapus seeder: done');
  } catch (e) {
    console.error('‚ùå Startapus seeder error:', e);
    process.exitCode = 1;
  }
}

run();


