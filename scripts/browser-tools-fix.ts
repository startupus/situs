#!/usr/bin/env node

import { spawn, ChildProcess } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';
import * as http from 'http';

class BrowserToolsManager {
  private process: ChildProcess | null = null;
  private pidFile = path.join(process.cwd(), '.browser-tools.pid');
  private logFile = path.join(process.cwd(), 'logs', 'browser-tools.log');
  private port = 3025;

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const logsDir = path.dirname(this.logFile);
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }
  }

  async start(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ BrowserTools —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await this.stop();
    
    // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    await this.waitForPortAvailable();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    this.process = spawn('npx', ['@agentdeskai/browser-tools-server@latest'], {
      stdio: ['pipe', 'pipe', 'pipe'],
      detached: false,
      env: { ...process.env, PORT: this.port.toString() }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    if (this.process.pid) {
      fs.writeFileSync(this.pidFile, this.process.pid.toString());
      console.log(`‚úÖ BrowserTools —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: ${this.process.pid}`);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    this.process.stdout?.on('data', (data) => {
      const output = data.toString();
      console.log(`[BrowserTools] ${output.trim()}`);
      fs.appendFileSync(this.logFile, `[${new Date().toISOString()}] ${output}`);
    });

    this.process.stderr?.on('data', (data) => {
      const output = data.toString();
      console.error(`[BrowserTools ERROR] ${output.trim()}`);
      fs.appendFileSync(this.logFile, `[${new Date().toISOString()}] ERROR: ${output}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.process.on('close', (code) => {
      console.log(`‚ùå BrowserTools —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
      this.cleanup();
    });

    // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await this.waitForServerReady();
    console.log('‚úÖ BrowserTools —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  }

  async stop(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ BrowserTools —Å–µ—Ä–≤–µ—Ä–∞...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (this.process) {
      this.process.kill('SIGTERM');
      this.process = null;
    }

    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ PID —Ñ–∞–π–ª—É
    if (fs.existsSync(this.pidFile)) {
      try {
        const pid = parseInt(fs.readFileSync(this.pidFile, 'utf8'));
        process.kill(pid, 'SIGTERM');
        console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } catch (error) {
        // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }
      this.cleanup();
    }

    // –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    await this.waitForPortAvailable();
  }

  private cleanup(): void {
    if (fs.existsSync(this.pidFile)) {
      fs.unlinkSync(this.pidFile);
    }
  }

  private async waitForPortAvailable(): Promise<void> {
    return new Promise((resolve) => {
      const checkPort = () => {
        const req = http.request({
          host: 'localhost',
          port: this.port,
          method: 'HEAD',
          timeout: 1000
        }, () => {
          // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç, –∂–¥–µ–º
          setTimeout(checkPort, 1000);
        });

        req.on('error', () => {
          // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
          resolve();
        });

        req.on('timeout', () => {
          req.destroy();
          resolve();
        });

        req.end();
      };

      checkPort();
    });
  }

  private async waitForServerReady(): Promise<void> {
    return new Promise((resolve) => {
      const checkServer = () => {
        const req = http.request({
          host: 'localhost',
          port: this.port,
          method: 'HEAD',
          timeout: 1000
        }, () => {
          resolve();
        });

        req.on('error', () => {
          // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º
          setTimeout(checkServer, 1000);
        });

        req.on('timeout', () => {
          req.destroy();
          setTimeout(checkServer, 1000);
        });

        req.end();
      };

      checkServer();
    });
  }

  async testScreenshot(): Promise<void> {
    console.log('üì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...');
    
    return new Promise((resolve, reject) => {
      const data = JSON.stringify({ url: 'http://localhost:4000/' });
      
      const req = http.request({
        host: 'localhost',
        port: this.port,
        method: 'POST',
        path: '/capture-screenshot',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(data)
        }
      }, (res) => {
        let body = '';
        res.on('data', (chunk) => {
          body += chunk;
        });
        res.on('end', () => {
          if (res.statusCode === 200) {
            console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
            console.log('üìÑ –û—Ç–≤–µ—Ç:', body);
            resolve();
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${res.statusCode}`);
            console.error('üìÑ –û—Ç–≤–µ—Ç:', body);
            reject(new Error(`HTTP ${res.statusCode}: ${body}`));
          }
        });
      });

      req.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        reject(error);
      });

      req.write(data);
      req.end();
    });
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const manager = new BrowserToolsManager();
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await manager.start();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await manager.testScreenshot();
    
    console.log('üéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! BrowserTools —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    
    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    process.on('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
      await manager.stop();
      process.exit(0);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    await manager.stop();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { BrowserToolsManager }; 