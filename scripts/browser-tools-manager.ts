#!/usr/bin/env tsx

/**
 * BrowserTools Manager - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
 * 
 * –ü—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞–µ—Ç:
 * 1. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 * 2. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 * 3. –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–æ—Ä—Ç–æ–≤
 * 4. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */

import { spawn, ChildProcess } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';

interface ProcessInfo {
  pid: number;
  port: number;
  startTime: Date;
  status: 'running' | 'stopped' | 'error';
  type: 'server' | 'mcp';
}

class BrowserToolsManager {
  private processes: Map<number, ProcessInfo> = new Map();
  private pidFile: string;
  private logFile: string;
  private isShuttingDown = false;

  constructor() {
    this.pidFile = path.join(process.cwd(), 'logs', 'browser-tools.pid');
    this.logFile = path.join(process.cwd(), 'logs', 'browser-tools.log');
    this.setupGracefulShutdown();
  }

  /**
   * –ó–∞–ø—É—Å–∫ BrowserTools —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  async startServer(port: number = 3025): Promise<ProcessInfo> {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ BrowserTools —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await this.cleanupExistingProcesses();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    const availablePort = await this.findAvailablePort(port);

    try {
      const child = spawn('npx', ['@agentdeskai/browser-tools-server@latest'], {
        stdio: ['pipe', 'pipe', 'pipe'],
        env: { ...process.env, PORT: availablePort.toString() },
        detached: true // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ –¥–µ–º–æ–Ω
      });

      const processInfo: ProcessInfo = {
        pid: child.pid!,
        port: availablePort,
        startTime: new Date(),
        status: 'running',
        type: 'server'
      };

      this.processes.set(child.pid!, processInfo);
      await this.saveProcessInfo(processInfo);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      child.stdout?.on('data', (data) => {
        this.log(`[SERVER ${child.pid}] ${data.toString()}`);
      });

      child.stderr?.on('data', (data) => {
        this.log(`[SERVER ${child.pid}] ERROR: ${data.toString()}`);
      });

      child.on('exit', (code) => {
        this.log(`[SERVER ${child.pid}] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        this.processes.delete(child.pid!);
        this.updateProcessStatus(child.pid!, 'stopped');
      });

      child.on('error', (error) => {
        this.log(`[SERVER ${child.pid}] –û—à–∏–±–∫–∞: ${error.message}`);
        this.updateProcessStatus(child.pid!, 'error');
      });

      // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
      await this.waitForServerStart(availablePort);

      console.log(`‚úÖ BrowserTools —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${availablePort} (PID: ${child.pid})`);
      return processInfo;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error}`);
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ BrowserTools
   */
  async stopAll(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ BrowserTools...');
    
    this.isShuttingDown = true;

    for (const [pid, processInfo] of this.processes) {
      await this.stopProcess(pid);
    }

    // –û—á–∏—Å—Ç–∫–∞ PID —Ñ–∞–π–ª–æ–≤
    await this.cleanupPidFiles();
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã BrowserTools –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  getStatus(): ProcessInfo[] {
    return Array.from(this.processes.values());
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  async healthCheck(): Promise<{ healthy: boolean; issues: string[] }> {
    const issues: string[] = [];
    let healthy = true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    if (this.processes.size > 1) {
      issues.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${this.processes.size} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1)`);
      healthy = false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
    for (const processInfo of this.processes.values()) {
      try {
        const response = await fetch(`http://localhost:${processInfo.port}/health`);
        if (!response.ok) {
          issues.push(`–ü–æ—Ä—Ç ${processInfo.port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
          healthy = false;
        }
      } catch (error) {
        issues.push(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É ${processInfo.port}: ${error}`);
        healthy = false;
      }
    }

    return { healthy, issues };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
   */
  private async cleanupExistingProcesses(): Promise<void> {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');

    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ PID —Ñ–∞–π–ª—É
    try {
      const pidData = await fs.readFile(this.pidFile, 'utf-8');
      const pids = pidData.split('\n').filter(pid => pid.trim());
      
      for (const pidStr of pids) {
        const pid = parseInt(pidStr);
        if (pid && !isNaN(pid)) {
          await this.killProcess(pid);
        }
      }
    } catch (error) {
      // PID —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }

    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
    const killResult = await this.execCommand(`pkill -f browser-tools-server`);
    if (killResult.success) {
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
   */
  private async findAvailablePort(startPort: number): Promise<number> {
    for (let port = startPort; port < startPort + 10; port++) {
      try {
        const response = await fetch(`http://localhost:${port}/health`, { 
          signal: AbortSignal.timeout(1000) 
        });
        // –ü–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
      } catch (error) {
        // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
        return port;
      }
    }
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${startPort + 9}`);
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
   */
  private async waitForServerStart(port: number, timeout: number = 10000): Promise<void> {
    const startTime = Date.now();
    
    while (Date.now() - startTime < timeout) {
      try {
        const response = await fetch(`http://localhost:${port}/health`, {
          signal: AbortSignal.timeout(1000)
        });
        if (response.ok) {
          return;
        }
      } catch (error) {
        // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
      }
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ ${timeout}ms`);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  private async stopProcess(pid: number): Promise<void> {
    try {
      process.kill(pid, 'SIGTERM');
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      let attempts = 0;
      while (attempts < 10) {
        try {
          process.kill(pid, 0); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
          await new Promise(resolve => setTimeout(resolve, 500));
          attempts++;
        } catch (error) {
          // –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω
          break;
        }
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
      if (attempts >= 10) {
        process.kill(pid, 'SIGKILL');
      }
      
      this.processes.delete(pid);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${pid}: ${error}`);
    }
  }

  /**
   * –£–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ PID
   */
  private async killProcess(pid: number): Promise<void> {
    try {
      process.kill(pid, 'SIGKILL');
    } catch (error) {
      // –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
   */
  private async saveProcessInfo(processInfo: ProcessInfo): Promise<void> {
    try {
      await fs.mkdir(path.dirname(this.pidFile), { recursive: true });
      await fs.appendFile(this.pidFile, `${processInfo.pid}\n`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PID: ${error}`);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  private updateProcessStatus(pid: number, status: ProcessInfo['status']): void {
    const processInfo = this.processes.get(pid);
    if (processInfo) {
      processInfo.status = status;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ PID —Ñ–∞–π–ª–æ–≤
   */
  private async cleanupPidFiles(): Promise<void> {
    try {
      await fs.unlink(this.pidFile);
    } catch (error) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private async log(message: string): Promise<void> {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${message}\n`;
    
    try {
      await fs.mkdir(path.dirname(this.logFile), { recursive: true });
      await fs.appendFile(this.logFile, logMessage);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error}`);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
   */
  private async execCommand(command: string): Promise<{ success: boolean; output: string }> {
    return new Promise((resolve) => {
      const child = spawn(command, [], { shell: true });
      let output = '';
      
      child.stdout?.on('data', (data) => {
        output += data.toString();
      });
      
      child.stderr?.on('data', (data) => {
        output += data.toString();
      });
      
      child.on('close', (code) => {
        resolve({ success: code === 0, output });
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
   */
  private setupGracefulShutdown(): void {
    const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
    
    signals.forEach(signal => {
      process.on(signal, async () => {
        console.log(`\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
        await this.stopAll();
        process.exit(0);
      });
    });
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const manager = new BrowserToolsManager();
  const command = process.argv[2];

  try {
    switch (command) {
      case 'start':
        await manager.startServer();
        break;
        
      case 'stop':
        await manager.stopAll();
        break;
        
      case 'status':
        const status = manager.getStatus();
        console.log('üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:');
        status.forEach(proc => {
          console.log(`  PID: ${proc.pid}, –ü–æ—Ä—Ç: ${proc.port}, –°—Ç–∞—Ç—É—Å: ${proc.status}`);
        });
        break;
        
      case 'health':
        const health = await manager.healthCheck();
        if (health.healthy) {
          console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞');
        } else {
          console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ:');
          health.issues.forEach(issue => console.log(`  - ${issue}`));
        }
        break;
        
      default:
        console.log(`
BrowserTools Manager - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  tsx scripts/browser-tools-manager.ts start   - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  tsx scripts/browser-tools-manager.ts stop    - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  tsx scripts/browser-tools-manager.ts status  - –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  tsx scripts/browser-tools-manager.ts health  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        `);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export default BrowserToolsManager; 