#!/usr/bin/env tsx

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç BrowserTools
 */

import { spawn } from 'child_process';

async function testBrowserTools() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BrowserTools...');

  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...');
  await execCommand('pkill -f browser-tools-server');
  await execCommand('pkill -f browser-tools-mcp');

  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
  await sleep(2000);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  console.log('üöÄ –ó–∞–ø—É—Å–∫ BrowserTools —Å–µ—Ä–≤–µ—Ä–∞...');
  const child = spawn('npx', ['@agentdeskai/browser-tools-server@latest'], {
    stdio: 'inherit',
    env: { ...process.env, PORT: '3025' }
  });

  // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
  await sleep(5000);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const response = await fetch('http://localhost:3025/capture-screenshot', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({})
    });

    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç');
    } else {
      const error = await response.text();
      console.log(`‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π: ${error}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error}`);
  }

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  child.kill('SIGTERM');

  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

function execCommand(command: string): Promise<void> {
  return new Promise((resolve) => {
    const child = spawn(command, [], { shell: true, stdio: 'ignore' });
    child.on('close', () => resolve());
  });
}

function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testBrowserTools().catch(console.error); 