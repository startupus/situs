#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixDuplicateAliases() {
  console.log('üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤ –≤ –ø—É–Ω–∫—Ç–∞—Ö –º–µ–Ω—é...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ startapus-ecosystem
    const menuItems = await prisma.menuItem.findMany({
      where: {
        menuType: {
          project: {
            slug: 'startapus-ecosystem',
          },
        },
      },
      include: {
        menuType: {
          include: {
            project: true,
          },
        },
      },
      orderBy: [{ createdAt: 'asc' }],
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${menuItems.length} –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ª–∏–∞—Å–∞–º
    const aliasGroups = new Map<string, typeof menuItems>();

    menuItems.forEach((item) => {
      const alias = item.alias;
      if (!aliasGroups.has(alias)) {
        aliasGroups.set(alias, []);
      }
      aliasGroups.get(alias)!.push(item);
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = Array.from(aliasGroups.entries()).filter(([alias, items]) => items.length > 1);

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤:`);

    for (const [alias, items] of duplicates) {
      console.log(`  - "${alias}": ${items.length} –ø—É–Ω–∫—Ç–æ–≤`);
      items.forEach((item, index) => {
        console.log(
          `    ${index + 1}. ID: ${item.id}, Title: "${item.title}", Level: ${item.level}, Created: ${item.createdAt.toISOString()}`,
        );
      });
    }

    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }

    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ª–∏–∞—Å–æ–≤...');

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    for (const [alias, items] of duplicates) {
      console.log(`\nüìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∏–∞—Å–∞ "${alias}":`);

      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ—Å—Ç–∞–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
      for (let i = 1; i < items.length; i++) {
        const item = items[i];
        const newAlias = `${alias}-${i + 1}`;

        console.log(`  - –ò–∑–º–µ–Ω—è–µ–º "${item.title}" (ID: ${item.id}): "${alias}" ‚Üí "${newAlias}"`);

        await prisma.menuItem.update({
          where: { id: item.id },
          data: { alias: newAlias },
        });
      }
    }

    console.log('\n‚úÖ –í—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–ª–∏–∞—Å—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedItems = await prisma.menuItem.findMany({
      where: {
        menuType: {
          project: {
            slug: 'startapus-ecosystem',
          },
        },
      },
      select: {
        id: true,
        title: true,
        alias: true,
      },
      orderBy: [{ alias: 'asc' }],
    });

    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–ª–∏–∞—Å–æ–≤:');
    updatedItems.forEach((item) => {
      console.log(`  - "${item.alias}": ${item.title}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–∏–∞—Å–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixDuplicateAliases().catch(console.error);
