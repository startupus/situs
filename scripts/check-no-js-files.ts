#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JavaScript —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º TypeScript –ø—Ä–æ–µ–∫—Ç–∞ Hubus
 */

import * as fs from 'fs';
import * as path from 'path';

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å JS —Ñ–∞–π–ª–∞–º–∏
const ALLOWED_DIRECTORIES: string[] = [
  'node_modules',
  'dist',
  'coverage',
  '.git',
  'vendor',
  'build',
  'out',
  'generated',
];

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const ALLOWED_FILES: string[] = [
  'tailwind.config.js',
  'next.config.js',
  'jest.config.js',
  'webpack.config.js',
  'rollup.config.js',
  'vite.config.js',
  'prettier.config.js',
  'postcss.config.js',
  '.eslintrc.js',
];

interface CheckResult {
  foundFiles: string[];
  isValid: boolean;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–∞–π–ª
 */
function isAllowedFile(filePath: string): boolean {
  const fileName = path.basename(filePath);
  const dirName = path.dirname(filePath);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (ALLOWED_FILES.includes(fileName)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  const pathParts = dirName.split(path.sep);
  return ALLOWED_DIRECTORIES.some((allowedDir) => pathParts.includes(allowedDir));
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –≤—Å–µ JS —Ñ–∞–π–ª—ã
 */
function findJavaScriptFiles(dir: string, files: string[] = []): string[] {
  try {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const fullPath = path.join(dir, item);

      try {
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
          if (!ALLOWED_DIRECTORIES.includes(item)) {
            findJavaScriptFiles(fullPath, files);
          }
        } else if (item.endsWith('.js')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª
          if (!isAllowedFile(fullPath)) {
            files.push(fullPath);
          }
        }
      } catch (error) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
        console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: ${fullPath}`);
      }
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dir}`);
  }

  return files;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
function checkNoJavaScriptFiles(): CheckResult {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JavaScript —Ñ–∞–π–ª–æ–≤...\n');

  const foundFiles = findJavaScriptFiles(process.cwd());

  const result: CheckResult = {
    foundFiles,
    isValid: foundFiles.length === 0,
  };

  if (result.isValid) {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: JavaScript —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üéØ –ü—Ä–æ–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º TypeScript');
  } else {
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ JavaScript —Ñ–∞–π–ª—ã:');
    foundFiles.forEach((file) => {
      console.log(`   - ${path.relative(process.cwd(), file)}`);
    });

    console.log('\nüí° –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ .js —Ñ–∞–π–ª—ã –≤ .ts');
    console.log('   2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é');
    console.log('   3. –£–¥–∞–ª–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ .js —Ñ–∞–π–ª—ã');
    console.log('   4. –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö');
  }

  return result;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main(): void {
  const result = checkNoJavaScriptFiles();

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
  console.log(`   –ù–∞–π–¥–µ–Ω–æ JS —Ñ–∞–π–ª–æ–≤: ${result.foundFiles.length}`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${result.isValid ? '‚úÖ –ü–†–û–ô–î–ï–ù–û' : '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û'}`);

  if (!result.isValid) {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ù–ê–†–£–®–ï–ù–ò–ï —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ TypeScript!');
    console.log('üìñ –°–º. TYPESCRIPT_STANDARDS.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π');
    process.exit(1);
  }

  console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main();
}

export { checkNoJavaScriptFiles, findJavaScriptFiles, isAllowedFile };
