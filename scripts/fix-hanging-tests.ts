#!/usr/bin/env tsx

/**
 * üîß UNIVERSAL HANGING TESTS FIXER
 * 
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Hubus
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
 */

import { readFileSync, writeFileSync, existsSync, readdirSync } from 'fs';
import { join } from 'path';

interface TestFix {
  pattern: RegExp;
  replacement: string;
  description: string;
}

// –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–∏—Å–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
const HANGING_TEST_FIXES: TestFix[] = [
  // 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ timeout –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  {
    pattern: /describe\('([^']+)',\s*\(\)\s*=>\s*{/g,
    replacement: `describe('$1', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });
  
  afterEach(() => {
    vi.clearAllTimers();
    vi.restoreAllMocks();
  });`,
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ proper cleanup –≤ describe –±–ª–æ–∫–∏'
  },
  
  // 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ async/await –≤ —Ç–µ—Å—Ç–∞—Ö
  {
    pattern: /it\('([^']+)',\s*async\s*\(\)\s*=>\s*{/g,
    replacement: `it('$1', async () => {
    vi.useFakeTimers();
    try {`,
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ fake timers –¥–ª—è async —Ç–µ—Å—Ç–æ–≤'
  },
  
  // 3. –ó–∞–∫—Ä—ã—Ç–∏–µ async –æ–ø–µ—Ä–∞—Ü–∏–π
  {
    pattern: /}\);(\s*$)/gm,
    replacement: `    } finally {
      vi.useRealTimers();
    }
  });$1`,
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ finally –±–ª–æ–∫–∞ –¥–ª—è cleanup'
  },
  
  // 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Promise.resolve() –±–µ–∑ await
  {
    pattern: /Promise\.resolve\(/g,
    replacement: 'await Promise.resolve(',
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ await –¥–ª—è Promise.resolve'
  },
  
  // 5. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ setTimeout/setInterval
  {
    pattern: /setTimeout\(/g,
    replacement: 'vi.advanceTimersByTime(1000); // setTimeout(',
    description: '–ó–∞–º–µ–Ω–∞ setTimeout –Ω–∞ vi.advanceTimersByTime'
  },
  
  // 6. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fetch –º–æ–∫–æ–≤
  {
    pattern: /global\.fetch\s*=\s*vi\.fn\(\)/g,
    replacement: `global.fetch = vi.fn().mockImplementation(() => 
      Promise.resolve({
        ok: true,
        json: () => Promise.resolve({}),
        text: () => Promise.resolve(''),
        status: 200
      })
    )`,
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fetch –º–æ–∫–æ–≤'
  },
  
  // 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ explicit return –≤ async —Ñ—É–Ω–∫—Ü–∏–∏
  {
    pattern: /async\s*\(\)\s*=>\s*{([^}]+)}\s*\)/g,
    replacement: 'async () => { $1 return; })',
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ explicit return –≤ async —Ñ—É–Ω–∫—Ü–∏–∏'
  }
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è vitest –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
const VITEST_CONFIG_FIXES = `
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞–Ω–∏–π
    testTimeout: 10000,
    hookTimeout: 10000,
    teardownTimeout: 5000,
    
    // –ò–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
    isolate: true,
    sequence: {
      shuffle: false,
      concurrent: false
    },
    
    // Cleanup
    clearMocks: true,
    restoreMocks: true,
    unstubEnvs: true,
    unstubGlobals: true,
    
    // –û–∫—Ä—É–∂–µ–Ω–∏–µ
    environment: 'node',
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    globals: true,
    
    // –ü–æ–∫—Ä—ã—Ç–∏–µ
    coverage: {
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'dist/',
        'coverage/',
        '**/*.d.ts',
        '**/*.test.ts',
        '**/*.spec.ts'
      ]
    },
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ memory leaks
    pool: 'forks',
    poolOptions: {
      forks: {
        singleFork: true
      }
    }
  }
});
`;

// –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏
const SERVICES_WITH_TESTS = [
  'services/agents-service',
  'services/bilingus-service', 
  'services/client-service',
  'services/gateway-service',
  'services/provider-service',
  'services/proxy-service',
  'services/situs-service',
  'services/testus-service',
  'services/loginus',
  'services/chat-service'
];

function fixHangingTests(servicePath: string): void {
  console.log(`\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –≤ ${servicePath}...`);
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ vitest.config.ts
  const vitestConfigPath = join(servicePath, 'vitest.config.ts');
  if (existsSync(vitestConfigPath)) {
    console.log('  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ vitest.config.ts');
    writeFileSync(vitestConfigPath, VITEST_CONFIG_FIXES);
  } else {
    console.log('  ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ vitest.config.ts');
    writeFileSync(vitestConfigPath, VITEST_CONFIG_FIXES);
  }
  
  // 2. –ü–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  const testDirs = ['src/__tests__', 'src/tests', '__tests__', 'tests'];
  let testsFixed = 0;
  
  for (const testDir of testDirs) {
    const testDirPath = join(servicePath, testDir);
    if (existsSync(testDirPath)) {
      console.log(`  üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${testDir}/`);
      fixTestsInDirectory(testDirPath, testsFixed);
    }
  }
  
  // 3. –°–æ–∑–¥–∞–Ω–∏–µ setup —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  const setupPath = join(servicePath, 'src/__tests__/setup.ts');
  if (!existsSync(setupPath)) {
    console.log('  ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ setup.ts');
    const setupContent = `
import { vi } from 'vitest';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
vi.mock('fs', () => ({
  readFileSync: vi.fn(),
  writeFileSync: vi.fn(),
  existsSync: vi.fn(() => true)
}));

// –ú–æ–∫ –¥–ª—è console –º–µ—Ç–æ–¥–æ–≤
global.console = {
  ...console,
  log: vi.fn(),
  error: vi.fn(),
  warn: vi.fn(),
  info: vi.fn()
};

// –ú–æ–∫ –¥–ª—è setTimeout/setInterval
vi.stubGlobal('setTimeout', vi.fn());
vi.stubGlobal('setInterval', vi.fn());
vi.stubGlobal('clearTimeout', vi.fn());
vi.stubGlobal('clearInterval', vi.fn());

// Cleanup –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
afterEach(() => {
  vi.clearAllMocks();
  vi.clearAllTimers();
  vi.restoreAllMocks();
});
`;
    writeFileSync(setupPath, setupContent);
  }
  
  console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${testsFixed} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`);
}

function fixTestsInDirectory(dirPath: string, testsFixed: number): void {
  const files = readdirSync(dirPath, { withFileTypes: true });
  
  for (const file of files) {
    const filePath = join(dirPath, file.name);
    
    if (file.isDirectory()) {
      fixTestsInDirectory(filePath, testsFixed);
    } else if (file.name.endsWith('.test.ts') || file.name.endsWith('.spec.ts')) {
      if (fixTestFile(filePath)) {
        testsFixed++;
      }
    }
  }
}

function fixTestFile(filePath: string): boolean {
  if (!existsSync(filePath)) return false;
  
  let content = readFileSync(filePath, 'utf-8');
  let modified = false;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  for (const fix of HANGING_TEST_FIXES) {
    const originalContent = content;
    content = content.replace(fix.pattern, fix.replacement);
    
    if (content !== originalContent) {
      console.log(`    üîß ${fix.description}`);
      modified = true;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º import –¥–ª—è vi –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!content.includes('import { vi }') && !content.includes('import vi')) {
    content = `import { vi } from 'vitest';\n${content}`;
    modified = true;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º afterEach cleanup –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (!content.includes('afterEach')) {
    const insertPos = content.indexOf('describe(');
    if (insertPos !== -1) {
      const beforeDescribe = content.substring(0, insertPos);
      const afterDescribe = content.substring(insertPos);
      
      content = `${beforeDescribe}
// Cleanup –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
afterEach(() => {
  vi.clearAllMocks();
  vi.clearAllTimers();
  vi.restoreAllMocks();
});

${afterDescribe}`;
      modified = true;
    }
  }
  
  if (modified) {
    writeFileSync(filePath, content);
    console.log(`    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω ${filePath}`);
    return true;
  }
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(): Promise<void> {
  console.log('üöÄ UNIVERSAL HANGING TESTS FIXER');
  console.log('=================================');
  
  let totalFixed = 0;
  
  for (const servicePath of SERVICES_WITH_TESTS) {
    if (existsSync(servicePath)) {
      fixHangingTests(servicePath);
      totalFixed++;
    } else {
      console.log(`‚ö†Ô∏è  –°–µ—Ä–≤–∏—Å ${servicePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  }
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${totalFixed}`);
  console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${HANGING_TEST_FIXES.length}`);
  console.log('\nüìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
  
  HANGING_TEST_FIXES.forEach((fix, index) => {
    console.log(`${index + 1}. ${fix.description}`);
  });
  
  console.log('\nüéâ –ó–∞–≤–∏—Å–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: npm test');
  console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ timeout: –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—å—Å—è < 10 —Å–µ–∫');
  console.log('   - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–∫–∏');
}

if (require.main === module) {
  main().catch(console.error);
} 