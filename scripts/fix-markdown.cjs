#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ markdown
 * JavaScript –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */

const fs = require('fs');
const path = require('path');
const { glob } = require('glob');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  markdownFiles: ['**/*.md', '!node_modules/**', '!dist/**', '!coverage/**', '!.git/**'],
  maxLineLength: 120,
  fixMode: true,
};

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
 */
async function findMarkdownFiles() {
  const files = [];

  for (const pattern of config.markdownFiles) {
    const found = await glob(pattern, {
      ignore: ['node_modules/**', 'dist/**', 'coverage/**', '.git/**'],
      absolute: true,
    });
    files.push(...found);
  }

  return [...new Set(files)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ markdown —Ñ–∞–π–ª–µ
 */
function fixMarkdownFile(filePath) {
  try {
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é: ${path.relative(process.cwd(), filePath)}`);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    content = fixCommonIssues(content);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${path.relative(process.cwd(), filePath)}`);
      return true;
    } else {
      console.log(`‚ÑπÔ∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${path.relative(process.cwd(), filePath)}`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
    return false;
  }
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ markdown
 */
function fixCommonIssues(content) {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
  content = content.replace(/[ \t]+$/gm, '');

  // --- MD022: –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ ---
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  content = content.replace(/([^\n])\n(#+ )/g, '$1\n\n$2');
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  content = content.replace(/(#+ .+)(?!\n\n)(\n[^#\n])/g, '$1\n\n$2');

  // --- MD029: –°–±—Ä–æ—Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –∫–æ–¥–∞ ---
  // –ü–æ—Å–ª–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ 1.
  content = content.replace(/(```[\s\S]*?```)(\s*\n)(\d+\. )/g, '$1$2' + '1. ');
  // –ü–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤ (—Ç–∞–±–ª–∏—Ü—ã, —Ü–∏—Ç–∞—Ç—ã, —Å–ø–∏—Å–∫–∏) ‚Äî —Ç–æ–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  content = content.replace(/(\n\n[-*+] .+\n)(\d+\. )/g, '$1' + '1. ');

  // --- MD034: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º bare URLs –≤ < > ---
  content = content.replace(/(^|\s)(https?:\/\/[^\s<>()]+)(?=\s|$)/gm, '$1<$2>');

  // --- MD038: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ inline-–∫–æ–¥–∞ ---
  content = content.replace(/` +([^`]+?) +`/g, '`$1`');

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ #
  content = content.replace(/^(#{1,6})([^#\s])/gm, '$1 $2');

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞
  content = content.replace(/^([*+-])([^\s])/gm, '$1 $2');
  content = content.replace(/^(\d+\.)([^\s])/gm, '$1 $2');

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = content.replace(/\n{3,}/g, '\n\n');

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
  content = content.replace(/^[ \t]+$/gm, '');

  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  content = fixLongLines(content);

  return content;
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
 */
function fixLongLines(content) {
  const lines = content.split('\n');
  const fixedLines = [];

  for (let line of lines) {
    if (line.length > config.maxLineLength && !line.startsWith('```') && !line.startsWith('#')) {
      // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
      const words = line.split(' ');
      let currentLine = '';
      const newLines = [];

      for (const word of words) {
        if ((currentLine + word).length > config.maxLineLength) {
          if (currentLine) {
            newLines.push(currentLine.trim());
            currentLine = word;
          } else {
            newLines.push(word);
          }
        } else {
          currentLine += (currentLine ? ' ' : '') + word;
        }
      }

      if (currentLine) {
        newLines.push(currentLine.trim());
      }

      fixedLines.push(...newLines);
    } else {
      fixedLines.push(line);
    }
  }

  return fixedLines.join('\n');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è markdown —Ñ–∞–π–ª–æ–≤...\n');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ .md —Ñ–∞–π–ª—ã
    const files = await findMarkdownFiles();
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} markdown —Ñ–∞–π–ª–æ–≤\n`);

    if (files.length === 0) {
      console.log('‚ÑπÔ∏è  Markdown —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    let fixedCount = 0;
    for (const file of files) {
      if (fixMarkdownFile(file)) {
        fixedCount++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${files.length - fixedCount}`);

    if (fixedCount > 0) {
      console.log('\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('\n‚ÑπÔ∏è  –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  findMarkdownFiles,
  fixMarkdownFile,
  fixCommonIssues,
  fixLongLines,
};
