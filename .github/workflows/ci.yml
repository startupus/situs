name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Concurrency group to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Lint and Code Quality
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: TypeScript check
        run: npx tsc --noEmit
        
      - name: ESLint check
        run: npm run lint
        
      - name: Prettier check
        run: npx prettier --check .
        
      - name: Package audit
        run: npm audit --audit-level moderate
        continue-on-error: true

  # Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Security audit
        run: npm audit --audit-level moderate
        
      - name: Run security tests
        run: npm run test:security
        
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit Tests
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: test-results/

  # Integration Tests
  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: situs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/situs_test
        run: |
          npx prisma db push
          npx prisma db seed
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/situs_test
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-testing-only
        run: npm run test:integration
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # Performance Tests
  test-performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run performance tests
        run: npm run test:performance
        
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-results/

  # Coverage Report
  coverage:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-unit, test-integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  # E2E Tests
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Build Test
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build application
        run: npm run build
        
      - name: Check build size
        run: |
          echo "Build size analysis:"
          du -sh dist/
          find dist/ -name "*.js" -exec du -h {} + | sort -rh | head -10
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # API Tests
  test-api:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: situs_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/situs_test
        run: |
          npx prisma db push
          npx prisma db seed
          
      - name: Start API server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/situs_test
          JWT_SECRET: test-jwt-secret-for-ci-pipeline-testing-only
          NODE_ENV: test
        run: |
          npm run api:dev &
          sleep 10
          
      - name: Run API tests
        run: |
          curl -f http://localhost:3001/api/health || exit 1
          npm run test src/api/__tests__/api.test.ts
          
      - name: Stop API server
        run: pkill -f "tsx.*server.ts" || true

  # Accessibility Tests
  test-a11y:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build application
        run: npm run build
        
      - name: Run accessibility tests
        run: |
          npm install -g @axe-core/cli
          npx serve -s dist -p 3000 &
          sleep 5
          axe http://localhost:3000 --exit

  # Quality Gate
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security, test-unit, test-integration, test-performance, coverage, build]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Performance Tests: ${{ needs.test-performance.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || 
                "${{ needs.security.result }}" != "success" || 
                "${{ needs.test-unit.result }}" != "success" || 
                "${{ needs.test-integration.result }}" != "success" || 
                "${{ needs.test-performance.result }}" != "success" || 
                "${{ needs.coverage.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed!"
            exit 1
          else
            echo "✅ Quality gate passed!"
          fi

  # Deploy (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build for production
        run: npm run build
        
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          echo "Build completed successfully!"
          # Add your deployment commands here