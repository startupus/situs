// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(BUSINESS)
  status    UserStatus @default(ACTIVE)
  
  // Subscription and limits
  subscriptionPlan String? @default("basic")
  limits          String? @default("{\"projects\":1,\"products\":2,\"aiTokens\":1000}") // JSON as string
  
  // Profile data
  profile   String?  @default("{\"name\":\"\",\"avatar\":\"\",\"bio\":\"\"}") // JSON as string
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[] @relation("ProjectOwner")
  projectAccesses  ProjectAccess[]
  grantedAccesses  ProjectAccess[] @relation("GrantedAccess")
  media            Media[]

  @@map("users")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  slug        String      @unique  // Генерируется из названия
  
  // Domain settings - ключевое отличие от старой схемы
  domain       String?     // situs subdomain (example.situs.com)
  customDomain String?     // custom domain (example.com)
  isPublished  Boolean     @default(false)
  
  // Project-level settings (общие для всех продуктов)
  settings String? @default("{\"theme\":\"auto\",\"language\":\"ru\"}") // JSON as string
  theme    String? @default("{\"primaryColor\":\"#3B82F6\",\"secondaryColor\":\"#8B5CF6\"}") // JSON as string
  
  // Ownership and access
  ownerId   String
  status    ProjectStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner     User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  products  Product[]
  accesses  ProjectAccess[]
  media     Media[]
  
  @@map("projects")
}

model ProjectAccess {
  id        String           @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole
  grantedBy String
  grantedAt DateTime         @default(now())
  
  // Relations
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedByUser User    @relation("GrantedAccess", fields: [grantedBy], references: [id])
  
  @@unique([projectId, userId])
  @@map("project_accesses")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        ProductType
  status      ProductStatus @default(DRAFT)
  
  // URL structure within project
  subdomain    String?     // shop.domain.com
  pathPrefix   String?     // /shop, /blog
  
  // Product settings and pricing
  settings     String?     @default("{}") // JSON as string
  pricingPlan  String?     @default("basic")
  
  // Project relation
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pages   Page[]
  
  @@unique([projectId, name])
  @@map("products")
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String
  content     String?    // Redaktus content blocks as JSON string
  pageType    PageType   @default(PAGE)
  status      PageStatus @default(DRAFT)
  isHomePage  Boolean    @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Template and Layout
  template    String?
  layout      String?
  
  // Product relation
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, slug])
  @@map("pages")
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  thumbnailUrl String?
  
  // Metadata
  alt         String?
  title       String?
  description String?
  
  // Project relation
  projectId   String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  
  @@map("media")
}

// Enums
enum UserRole {
  BUSINESS    // Бизнес-пользователь: 1 проект, простой интерфейс
  AGENCY      // Агентство: много проектов для клиентов
  ADMIN       // Системный администратор
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum ProjectStatus {
  ACTIVE      // Активный проект
  SUSPENDED   // Приостановлен (неоплата)
  ARCHIVED    // Архивный
  DELETED     // Помечен к удалению
}

enum ProjectRole {
  OWNER       // Владелец проекта
  ADMIN       // Администратор проекта
  EDITOR      // Редактор контента
  VIEWER      // Только просмотр
}

enum ProductType {
  WEBSITE     // Корпоративный сайт
  ECOMMERCE   // Интернет-магазин
  BLOG        // Блог
  LANDING     // Лендинг
  API         // API сервис
}

enum ProductStatus {
  DRAFT       // Черновик
  ACTIVE      // Активный
  ARCHIVED    // Архивный
  DELETED     // Помечен к удалению
}

enum PageType {
  HOME        // Главная страница
  PAGE        // Обычная страница
  POST        // Пост блога
  LANDING     // Лендинг
  PRODUCT     // Страница товара
  CATEGORY    // Страница категории
}

enum PageStatus {
  DRAFT       // Черновик
  PUBLISHED   // Опубликована
  SCHEDULED   // Запланирована к публикации
  ARCHIVED    // Архивная
  DELETED     // Помечена к удалению
}
