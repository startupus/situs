import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.resolve(__dirname, '../../../.env');
dotenv.config({ path: envPath });

// Fallback –¥–ª—è .env —Ñ–∞–π–ª–∞
if (!process.env.DATABASE_URL) {
  dotenv.config({ path: path.resolve(process.cwd(), '.env') });
}
if (!process.env.DATABASE_URL) {
  dotenv.config();
}

interface Config {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  NODE_ENV: string;
  PORT: number;
  
  // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  DATABASE_URL: string;
  
  // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  CORS_ORIGINS: string[];
  
  // JWT
  JWT_SECRET: string;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  LOG_LEVEL: string;
  
  // Rate limiting
  RATE_LIMIT_WINDOW_MS: number;
  RATE_LIMIT_MAX_REQUESTS: number;
  
  // File upload
  UPLOAD_MAX_SIZE: number;
  UPLOAD_ALLOWED_TYPES: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Å—Å–∏–≤–∞ origins –∏–∑ —Å—Ç—Ä–æ–∫–∏
const parseOrigins = (origins: string): string[] => {
  if (!origins) return [];
  return origins.split(',').map(origin => origin.trim()).filter(Boolean);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
const getRequiredEnv = (key: string): string => {
  const value = process.env[key];
  if (!value) {
    throw new Error(`Missing required environment variable: ${key}`);
  }
  return value;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å fallback
const getEnv = (key: string, fallback: string): string => {
  return process.env[key] || fallback;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
const getNumberEnv = (key: string, fallback: number): number => {
  const value = process.env[key];
  if (!value) return fallback;
  const parsed = parseInt(value, 10);
  return isNaN(parsed) ? fallback : parsed;
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
const getDefaultConfig = (): Partial<Config> => {
  const env = getEnv('NODE_ENV', 'development');
  
  switch (env) {
    case 'production':
      return {
        LOG_LEVEL: 'warn',
        CORS_ORIGINS: ['https://yourdomain.com'],
        RATE_LIMIT_WINDOW_MS: 900000, // 15 –º–∏–Ω—É—Ç
        RATE_LIMIT_MAX_REQUESTS: 100,
      };
    
    case 'staging':
      return {
        LOG_LEVEL: 'info',
        CORS_ORIGINS: ['https://staging.yourdomain.com'],
        RATE_LIMIT_WINDOW_MS: 900000,
        RATE_LIMIT_MAX_REQUESTS: 200,
      };
    
    case 'development':
    default:
      return {
        LOG_LEVEL: 'debug',
        CORS_ORIGINS: ['http://localhost:5177', 'http://localhost:3000', 'http://localhost:4000'],
        RATE_LIMIT_WINDOW_MS: 900000,
        RATE_LIMIT_MAX_REQUESTS: 1000,
      };
  }
};

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const createConfig = (): Config => {
  const defaults = getDefaultConfig();
  
  // –ü–æ–ª—É—á–∞–µ–º CORS origins —Å fallback
  const corsOrigins = parseOrigins(getEnv('CORS_ORIGINS', ''));
  const finalCorsOrigins = corsOrigins.length > 0 ? corsOrigins : (defaults.CORS_ORIGINS || ['http://localhost:5177']);
  
  const config: Config = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    NODE_ENV: getEnv('NODE_ENV', 'development'),
    PORT: getNumberEnv('PORT', 3001),
    
    // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–ª—è development –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite fallback (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ backend/)
    DATABASE_URL: getEnv('DATABASE_URL', 'file:../prisma/dev.db'),
    
    // CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    CORS_ORIGINS: finalCorsOrigins,
    
    // JWT - –¥–ª—è development –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    JWT_SECRET: getEnv('JWT_SECRET', 'development_jwt_secret_minimum_32_characters_long'),
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    LOG_LEVEL: getEnv('LOG_LEVEL', defaults.LOG_LEVEL || 'info'),
    
    // Rate limiting
    RATE_LIMIT_WINDOW_MS: getNumberEnv('RATE_LIMIT_WINDOW_MS', defaults.RATE_LIMIT_WINDOW_MS || 900000),
    RATE_LIMIT_MAX_REQUESTS: getNumberEnv('RATE_LIMIT_MAX_REQUESTS', defaults.RATE_LIMIT_MAX_REQUESTS || 100),
    
    // File upload
    UPLOAD_MAX_SIZE: getNumberEnv('UPLOAD_MAX_SIZE', 10485760), // 10MB
    UPLOAD_ALLOWED_TYPES: parseOrigins(getEnv('UPLOAD_ALLOWED_TYPES', 'image/jpeg,image/png,image/gif,image/webp')),
  };
  
  return config;
};

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
const validateConfig = (config: Config): void => {
  if (config.NODE_ENV === 'production') {
    if (!config.DATABASE_URL) throw new Error('DATABASE_URL required in production');
    if (config.JWT_SECRET.length < 32) throw new Error('JWT_SECRET too short in production');
  }
};

// –°–æ–∑–¥–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = createConfig();
validateConfig(config);

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (config.NODE_ENV === 'development' && process.env.DEBUG_CONFIG) {
  console.log('üîß Config:', config.NODE_ENV, config.PORT);
}

export default config;
export type { Config };
