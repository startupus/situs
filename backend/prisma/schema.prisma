// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String?  @unique
  password  String?
  globalRole GlobalRole @default(BUSINESS)
  status    UserStatus @default(ACTIVE)
  
  // Subscription and limits
  subscriptionPlan String? @default("basic")
  limits          String? @default("{\"projects\":1,\"products\":2,\"aiTokens\":1000}") // JSON as string
  
  // Profile data
  profile   String?  @default("{\"name\":\"\",\"avatar\":\"\",\"bio\":\"\"}") // JSON as string
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedProjects    Project[] @relation("ProjectOwner")
  ownedAccounts    Account[] @relation("UserOwnsAccounts")
  projectAccesses  ProjectAccess[]
  grantedAccesses  ProjectAccess[] @relation("GrantedAccess")
  accountMemberships AccountMembership[]
  media            Media[]

  // Groups mapping (Joomla-like)
  groups   UserGroupMap[]

  // External auth providers (SSO)
  authProviders UserAuthProvider[]

  // Invitations accepted by this user
  invitationsAccepted UserInvitation[] @relation("InvitationAccepted")

  // Invitations created by this user
  invitationsSent UserInvitation[] @relation("InvitationInviter")
  
  // Новые приглашения
  sentInvitations     Invitation[] @relation("InvitedBy")
  acceptedInvitations Invitation[] @relation("AcceptedBy")

  @@map("users")
}

/// Joomla-like hierarchical user groups
model UserGroup {
  id          String     @id @default(cuid())
  title       String     @unique
  description String?
  isCore      Boolean    @default(false)
  parentId    String?
  parent      UserGroup? @relation("UserGroupHierarchy", fields: [parentId], references: [id])
  children    UserGroup[] @relation("UserGroupHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Mappings
  users       UserGroupMap[]

  @@map("user_groups")
}

/// M:N mapping users to groups
model UserGroupMap {
  id       String   @id @default(cuid())
  userId   String
  groupId  String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    UserGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_group_map")
}

/// View levels (maps to sets of groups) — optional, reserved for future
model ViewLevel {
  id          String   @id @default(cuid())
  title       String   @unique
  description String?
  ordering    Int      @default(0)
  // Stores group ids as JSON array for simplicity; can be normalized later
  groupIds    String   @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("view_levels")
}

/// External authentication providers (SSO)
model UserAuthProvider {
  id            String   @id @default(cuid())
  userId        String
  provider      String   // e.g. google, github, apple
  providerUserId String  // id at the provider
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("user_auth_providers")
}

/// Приглашения пользователей
model Invitation {
  id                String            @id @default(cuid())
  email             String
  role              GlobalRole        @default(BUSINESS)
  status            InvitationStatus  @default(PENDING)
  token             String            @unique
  message           String?
  channel           CommunicationChannel @default(EMAIL)
  
  // Метаданные
  invitedBy         String
  invitedByUser     User              @relation("InvitedBy", fields: [invitedBy], references: [id])
  acceptedBy        String?
  acceptedByUser    User?             @relation("AcceptedBy", fields: [acceptedBy], references: [id])
  
  // Временные метки
  expiresAt         DateTime
  sentAt            DateTime?
  acceptedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("invitations")
}

/// Настройки каналов связи
model CommunicationSettings {
  id                String                @id @default(cuid())
  channel           CommunicationChannel  @unique
  enabled           Boolean               @default(false)
  
  // Конфигурация для каждого канала
  config            Json                  // Настройки API ключей, токенов и т.д.
  
  // Шаблоны сообщений
  inviteTemplate    String?               // Шаблон приглашения
  reminderTemplate  String?               // Шаблон напоминания
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@map("communication_settings")
}

/// Invitations to join the platform/accounts/projects
model UserInvitation {
  id          String   @id @default(cuid())
  email       String?
  token       String   @unique
  invitedById String
  role        GlobalRole? // suggested role on accept
  accountId   String?
  projectId   String?
  status      String   @default("PENDING") // PENDING | ACCEPTED | EXPIRED | REVOKED
  expiresAt   DateTime?
  acceptedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invitedBy   User     @relation("InvitationInviter", fields: [invitedById], references: [id])
  acceptedBy  User?    @relation("InvitationAccepted", fields: [acceptedById], references: [id])

  @@map("user_invitations")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  slug        String      @unique  // Генерируется из названия
  // Системный проект админки
  isSystemAdmin Boolean   @default(false)
  
  // Multi-tenant support
  tenantId    String?     // Tenant isolation - projects belong to specific tenant
  
  // Domain settings - ключевое отличие от старой схемы
  domain       String?     // situs subdomain (example.situs.com)
  customDomain String?     // custom domain (example.com)
  isPublished  Boolean     @default(false)
  
  // Project-level settings (общие для всех продуктов)
  settings String? @default("{\"theme\":\"auto\",\"language\":\"ru\"}") // JSON as string
  theme    String? @default("{\"primaryColor\":\"#3B82F6\",\"secondaryColor\":\"#8B5CF6\"}") // JSON as string
  
  // Уровень доступа к проекту
  accessLevel AccessLevel @default(PUBLIC)
  customAccessLevelId String?
  
  // Ownership and access
  ownerId   String
  accountId String?
  status    ProjectStatus @default(ACTIVE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  owner     User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  products  Product[]
  accesses  ProjectAccess[]
  media     Media[]
  menuTypes MenuType[] // Универсальная система меню
  customAccessLevels CustomAccessLevel[] // Кастомные уровни доступа
  adminScreens AdminScreen[]
  integrations Integration[]
  
  @@map("projects")
}

model ProjectAccess {
  id        String           @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole
  grantedBy String
  grantedAt DateTime         @default(now())
  
  // Relations
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedByUser User    @relation("GrantedAccess", fields: [grantedBy], references: [id])
  
  @@unique([projectId, userId])
  @@map("project_accesses")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  type        ProductType
  status      ProductStatus @default(DRAFT)
  
  // URL structure within project
  subdomain    String?     // shop.domain.com
  pathPrefix   String?     // /shop, /blog
  
  // Product settings and pricing
  settings     String?     @default("{}") // JSON as string
  pricingPlan  String?     @default("basic")
  
  // Уровень доступа к продукту
  accessLevel AccessLevel @default(PUBLIC)
  customAccessLevelId String?
  
  // Project relation
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pages   Page[]
  categories Category[] // Для ECOMMERCE продуктов
  webCategories WebCategory[] // Для WEBSITE: рубрики (категории) страниц
  items   Item[]      // Для ECOMMERCE продуктов
  adminScreens AdminScreen[] // Для ADMIN: экраны админки
  
  @@unique([projectId, name])
  @@map("products")
}
/// Admin Screen — экран/страница админки, управляемая системным проектом
model AdminScreen {
  id          String   @id @default(cuid())
  title       String
  alias       String   // уникальный ключ экрана
  path        String   // абсолютный путь, например "/projects" (динамические сегменты поддержим позже)
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  icon        String?  // имя иконки для UI
  category    String?  // группа экранов (например, "management")

  // Привязки
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([projectId, alias])
  @@unique([projectId, path])
  @@map("admin_screens")
}

model Page {
  id          String     @id @default(cuid())
  title       String
  slug        String
  content     String?    // Redaktus content blocks as JSON string
  pageType    PageType   @default(PAGE)
  status      PageStatus @default(DRAFT)
  isHomePage  Boolean    @default(false)
  orderIndex  Int        @default(0)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Template and Layout
  template    String?
  layout      String?
  
  // Уровень доступа к странице
  accessLevel AccessLevel @default(PUBLIC)
  customAccessLevelId String?
  
  // Product relation
  productId String
  // Primary category for URL building (Website categories)
  primaryCategoryId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  primaryCategory WebCategory? @relation("PagePrimaryCategory", fields: [primaryCategoryId], references: [id])
  webCategories PageWebCategory[]
  
  @@unique([productId, slug])
  @@map("pages")
}

/// Мульти-аккаунтная структура и роли
model Account {
  id        String      @id @default(cuid())
  name      String
  type      AccountType
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User    @relation("UserOwnsAccounts", fields: [ownerId], references: [id], onDelete: Cascade)
  projects  Project[]
  members   AccountMembership[]
  // Связи агентство ↔ клиент
  clients   AgencyClient[] @relation("AgencyAsAgency")
  agencies  AgencyClient[] @relation("AgencyAsClient")
  customAccessLevels CustomAccessLevel[] // Кастомные уровни доступа аккаунта

  @@map("accounts")
}

model AccountMembership {
  id        String       @id @default(cuid())
  accountId String
  userId    String
  role      AccountRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([accountId, userId])
  @@map("account_memberships")
}

model AgencyClient {
  id               String   @id @default(cuid())
  agencyAccountId  String
  clientAccountId  String
  createdAt        DateTime @default(now())

  agency  Account @relation("AgencyAsAgency", fields: [agencyAccountId], references: [id], onDelete: Cascade)
  client  Account @relation("AgencyAsClient", fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@unique([agencyAccountId, clientAccountId])
  @@map("agency_clients")
}

model Media {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  thumbnailUrl String?
  
  // Metadata
  alt         String?
  title       String?
  description String?
  
  // Project relation
  projectId   String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  
  @@map("media")
}

/// Shop/E-commerce модели
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   // SEO-friendly URL (как alias в MenuItem)
  alias       String   @default("")  // Дублируем slug для совместимости с menu-подобным API
  image       String?
  
  // Иерархия категорий (как в Joomla MenuItem)
  level       Int      @default(1)  // Добавляем level как в MenuItem
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Настройки отображения (как в Joomla MenuItem)
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(true)  // Добавляем isPublished как в MenuItem
  language    String   @default("*")   // Добавляем language как в MenuItem
  accessLevel AccessLevel @default(PUBLIC)  // Добавляем accessLevel как в MenuItem
  
  // Product relation - категории привязаны к продукту ECOMMERCE
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Relations
  items       Item[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([productId, slug])
  @@unique([productId, alias])  // Добавляем уникальность alias как в MenuItem
  @@map("categories")
}

/// Website Category (Рубрика для страниц Website)
model WebCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String
  alias       String   @default("")

  // Иерархия (как в Joomla)
  level       Int      @default(1)
  parentId    String?
  parent      WebCategory? @relation("WebCategoryHierarchy", fields: [parentId], references: [id])
  children    WebCategory[] @relation("WebCategoryHierarchy")

  // Публикация/доступ/язык
  orderIndex  Int      @default(0)
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(true)
  language    String   @default("*")
  accessLevel AccessLevel @default(PUBLIC)

  // Привязка к продукту WEBSITE
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Связи с Page через стык-таблицу
  pageLinks   PageWebCategory[]
  // Обратная связь для primaryCategory
  primaryPages Page[] @relation("PagePrimaryCategory")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([productId, slug])
  @@map("web_categories")
}

/// Стык-таблица: многие-ко-многим Page ↔ WebCategory
model PageWebCategory {
  pageId      String
  categoryId  String
  assignedAt  DateTime @default(now())

  page        Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  category    WebCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([pageId, categoryId])
  @@map("page_web_categories")
}

model Item {
  id           String      @id @default(cuid())
  name         String
  description  String?
  slug         String
  
  // Цены и наличие
  price        Decimal     @default(0)
  comparePrice Decimal?    // Цена до скидки
  costPrice    Decimal?    // Себестоимость
  sku          String?     // Артикул
  barcode      String?     // Штрихкод
  
  // Инвентарь
  trackQuantity Boolean    @default(true)
  quantity     Int         @default(0)
  lowStockThreshold Int?   // Минимальный остаток
  
  // Контент
  images       String      @default("[]") // JSON массив URL изображений
  content      String?     // Описание товара (JSON блоки)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // Настройки
  status       ItemStatus  @default(DRAFT)
  isDigital    Boolean     @default(false) // Цифровой товар
  weight       Decimal?    // Вес для доставки
  dimensions   String?     // Размеры (JSON)
  
  // Категория
  categoryId   String
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Product relation
  productId    String
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Настройки отображения
  orderIndex   Int         @default(0)
  isFeatured   Boolean     @default(false)
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@unique([productId, slug])
  @@map("items")
}

/// Универсальная система меню (по принципу Joomla)
model MenuType {
  id          String     @id @default(cuid())
  name        String     // "main", "footer", "sidebar"
  title       String     // "Главное меню"
  description String?
  isActive    Boolean    @default(true)
  
  // Привязка к проекту
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Relations
  items       MenuItem[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@unique([projectId, name])
  @@map("menu_types")
}

model MenuItem {
  id          String       @id @default(cuid())
  title       String       // "Каталог товаров"
  alias       String       // "catalog"
  type        MenuItemType @default(COMPONENT)
  
  // Иерархия (как в Joomla)
  level       Int          @default(1)
  parentId    String?
  parent      MenuItem?    @relation("MenuHierarchy", fields: [parentId], references: [id])
  children    MenuItem[]   @relation("MenuHierarchy")
  orderIndex  Int          @default(0)
  
  // Привязка к компоненту (универсальная как в Joomla)
  component   String?      // "Website", "Store", "Blog", "Landing"
  view        String?      // "page", "category", "item", "list"
  layout      String?      // "default", "blog", "grid", "form"
  targetId    String?      // pageId, categoryId, itemId
  externalUrl String?      // Для type = URL
  
  // Иконка для пункта меню
  icon        String?      // Название React иконки (например: "FiHome", "FiUsers")
  iconLibrary String?      @default("fi") // Библиотека иконок (fi, fa, md, etc.)
  
  // Настройки отображения
  isPublished Boolean      @default(true)
  accessLevel AccessLevel  @default(PUBLIC)
  language    String       @default("*")  // "*", "ru-RU", "en-GB"
  
  // Параметры (JSON как в Joomla)
  parameters  String       @default("{}")  // menu_show, menu_image, css_class, etc.
  
  // SEO метаданные
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  
  // CSS и стили
  cssClass        String?
  menuImage       String?
  
  // Связи
  menuTypeId  String
  menuType    MenuType     @relation(fields: [menuTypeId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@unique([menuTypeId, alias])
  @@map("menu_items")
}

/// Система уровней доступа (расширенная по образцу Joomla)
model CustomAccessLevel {
  id          String @id @default(cuid())
  name        String // "VIP клиенты", "Партнеры", "Менеджеры проекта"
  title       String // Отображаемое название
  description String?
  
  // Какие роли имеют этот уровень доступа
  allowedRoles String @default("[]") // JSON массив GlobalRole
  
  // Дополнительные условия доступа
  conditions   String @default("{}") // JSON с условиями
  
  // Привязка к проекту/аккаунту для кастомных уровней
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  accountId   String?
  account     Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // Системный уровень или кастомный
  isSystem    Boolean @default(false)
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([projectId, name])
  @@unique([accountId, name])
  @@map("custom_access_levels")
}

/// Интеграции (подключаемые провайдеры на уровне проекта)
model Integration {
  id         String             @id @default(cuid())
  projectId  String
  project    Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)

  provider   IntegrationProvider
  instanceKey String            @default("default")
  title      String?
  version    String?
  isActive   Boolean            @default(false)
  status     IntegrationStatus  @default(DISABLED)
  config     Json?
  secrets    Json?

  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  events     IntegrationEvent[]

  @@unique([projectId, provider, instanceKey], name: "projectId_provider_instanceKey")
  @@index([projectId])
  @@map("integrations")
}

/// Логи событий интеграций
model IntegrationEvent {
  id            String       @id @default(cuid())
  integrationId String
  integration   Integration  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  event         String
  payload       Json?
  createdAt     DateTime     @default(now())

  @@index([integrationId])
  @@map("integration_events")
}

// Enums
enum IntegrationStatus {
  READY
  DISABLED
  ERROR
}

enum IntegrationProvider {
  EMAIL_SMTP
  WEBHOOK_GENERIC
  N8N
}
enum GlobalRole {
  SUPER_ADMIN
  STAFF
  AGENCY
  BUSINESS
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  INVITED
  SUSPENDED
  BANNED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum CommunicationChannel {
  EMAIL
  SMS
  TELEGRAM
  WHATSAPP
  SLACK
}

enum ProjectStatus {
  ACTIVE      // Активный проект
  SUSPENDED   // Приостановлен (неоплата)
  ARCHIVED    // Архивный
  DELETED     // Помечен к удалению
}

enum ProjectRole {
  OWNER       // Владелец проекта
  ADMIN       // Администратор проекта
  EDITOR      // Редактор контента
  VIEWER      // Только просмотр
}

enum AccountType {
  AGENCY
  BUSINESS
}

enum AccountRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum ProductType {
  WEBSITE     // Корпоративный сайт
  ECOMMERCE   // Интернет-магазин
  BLOG        // Блог
  LANDING     // Лендинг
  API         // API сервис
  ADMIN       // Системный компонент админки
}

enum ProductStatus {
  DRAFT       // Черновик
  ACTIVE      // Активный
  ARCHIVED    // Архивный
  DELETED     // Помечен к удалению
}

enum PageType {
  HOME        // Главная страница
  PAGE        // Обычная страница
  POST        // Пост блога
  LANDING     // Лендинг
  PRODUCT     // Страница товара
  CATEGORY    // Страница категории
}

enum PageStatus {
  DRAFT       // Черновик
  PUBLISHED   // Опубликована
  SCHEDULED   // Запланирована к публикации
  ARCHIVED    // Архивная
  DELETED     // Помечена к удалению
}

enum ItemStatus {
  DRAFT       // Черновик
  ACTIVE      // Активный товар
  OUT_OF_STOCK // Нет в наличии
  DISCONTINUED // Снят с продажи
  ARCHIVED    // Архивный
}

enum MenuItemType {
  COMPONENT   // Ссылка на компонент
  SEPARATOR   // Разделитель
  HEADING     // Заголовок группы
  URL         // Внешняя ссылка
}

enum AccessLevel {
  PUBLIC      // Публичный доступ
  REGISTERED  // Зарегистрированные пользователи
  BUSINESS    // Бизнес-пользователи
  AGENCY      // Агентства
  STAFF       // Персонал
  ADMIN       // Администраторы
  SPECIAL     // Специальный уровень
  CUSTOM      // Пользовательский уровень
}
