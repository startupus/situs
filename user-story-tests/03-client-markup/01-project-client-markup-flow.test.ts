import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../helpers/TestHelpers';

/**
 * üß™ USER STORY: –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –Ω–∞–¥—Ü–µ–Ω–∫–∞ —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
 *
 * –°–¶–ï–ù–ê–†–ò–ô –∏–∑ –¢–ó:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç
 * 2. –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
 * 3. –ù–∞–∑–Ω–∞—á–∞–µ—Ç –Ω–∞–¥—Ü–µ–Ω–∫—É +30% –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò
 * 4. –ö–ª–∏–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 5000‚ÇΩ
 * 5. –ü–æ –º–µ—Ä–µ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –ò–ò (—Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ –Ω–∞–¥—Ü–µ–Ω–∫–æ–π):
 *    - 70% –æ—Ç –¥–æ–ø. –Ω–∞–¥—Ü–µ–Ω–∫–∏ 30% -> –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–µ–∫—Ç–∞
 *    - 30% –æ—Ç –¥–æ–ø. –Ω–∞–¥—Ü–µ–Ω–∫–∏ -> –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞
 *    - 10% –æ—Ç –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω—ã (–±–µ–∑ –¥–æ–ø. –Ω–∞–¥—Ü–µ–Ω–∫–∏) -> –≤–ª–∞–¥–µ–ª—å—Ü—É –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * 6. –ê–¥–º–∏–Ω –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤–∏–¥—è—Ç –¥–æ—Ö–æ–¥–Ω—É—é —á–∞—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
 */
class ProjectClientMarkupFlowTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üíº Project Client Markup Flow', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should handle complete project markup flow with complex commission structure', async () => {
        // üë§ –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
        const projectOwner = await this.createTestUser('owner', {
          email: 'owner@agency.com',
          phone: '+7999777888',
        });

        console.log(`‚úÖ Project owner registered: ${projectOwner.email}`);

        // üèóÔ∏è –≠–¢–ê–ü 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞–¥—Ü–µ–Ω–∫–æ–π 30%
        const project = await this.createTestProject('owner', {
          name: 'Marketing AI Agency',
          markup: 30, // 30% –Ω–∞–¥—Ü–µ–Ω–∫–∞
        });

        expect(project.ownerId).toBe(projectOwner.id);
        expect(project.markup).toBe(30);

        console.log(`‚úÖ Project created: ${project.name} with ${project.markup}% markup`);

        // üë• –≠–¢–ê–ü 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç
        const clientEmail = 'client@business.com';
        const invitation = await ServiceClients.addClientToProject(project.id, clientEmail);

        expect(invitation.inviteLink).toMatch(/^https:\/\/platform\.com\/invite\//);

        console.log(`‚úÖ Client invitation created: ${invitation.inviteLink}`);

        // üë§ –≠–¢–ê–ü 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        const client = await this.createTestUser('client', {
          email: clientEmail,
          phone: '+7999555666',
        });

        await ServiceClients.acceptProjectInvite(invitation.inviteLink, client.id);

        console.log(`‚úÖ Client registered and joined project: ${client.email}`);

        // üí≥ –≠–¢–ê–ü 5: –ö–ª–∏–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 5000‚ÇΩ
        const topupAmount = 5000;
        const topupTransaction = await ServiceClients.topupBalance(client.id, topupAmount, 'card');

        expect(topupTransaction.amount).toBe(topupAmount);
        await ValidationHelpers.waitForTransactionProcessing();

        console.log(`‚úÖ Client topped up: ${topupAmount}‚ÇΩ`);

        // ü§ñ –≠–¢–ê–ü 6: –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
        const aiUsageScenarios = [
          {
            model: 'gpt-4',
            prompt: '–°–æ–∑–¥–∞–π —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é',
            inputTokens: 200,
            outputTokens: 300,
          },
          {
            model: 'gpt-3.5-turbo',
            prompt: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
            inputTokens: 150,
            outputTokens: 200,
          },
          { model: 'claude-3', prompt: 'SEO —Å—Ç—Ä–∞—Ç–µ–≥–∏—è', inputTokens: 180, outputTokens: 250 },
        ];

        const aiRequests: any[] = [];
        let totalBaseCost = 0;
        let totalServiceCost = 0;
        let totalFinalCost = 0;

        for (const scenario of aiUsageScenarios) {
          const aiRequest = await ServiceClients.makeAIRequest(
            client.id,
            scenario.model,
            scenario.prompt,
            project.id, // –≤–∞–∂–Ω–æ: –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
          );

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –Ω–∞–¥—Ü–µ–Ω–∫–∏
          const baseCost = scenario.inputTokens * 0.001 + scenario.outputTokens * 0.002;
          const serviceCost = baseCost * (1 + TEST_CONSTANTS.SERVICE_MARKUP / 100); // +20% —Å–µ—Ä–≤–∏—Å–∞
          const finalCost = serviceCost * (1 + project.markup / 100); // +30% –ø—Ä–æ–µ–∫—Ç–Ω–∞—è

          aiRequest.baseCost = baseCost;
          aiRequest.serviceCost = serviceCost;
          aiRequest.finalCost = finalCost;

          aiRequests.push(aiRequest);
          totalBaseCost += baseCost;
          totalServiceCost += serviceCost;
          totalFinalCost += finalCost;

          console.log(
            `‚úÖ AI request: ${scenario.model} - Base: ${baseCost.toFixed(2)}‚ÇΩ, Service: ${serviceCost.toFixed(2)}‚ÇΩ, Final: ${finalCost.toFixed(2)}‚ÇΩ`,
          );
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // üí∞ –≠–¢–ê–ü 7: –†–∞—Å—á–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∏—Å—Å–∏–π

        // 7.1. –†–∞—Å—á–µ—Ç –Ω–∞–¥—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–∏—Å—Å–∏–π
        const serviceMarkupAmount = totalServiceCost - totalBaseCost; // –Ω–∞–¥—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (20%)
        const projectMarkupAmount = totalFinalCost - totalServiceCost; // –ø—Ä–æ–µ–∫—Ç–Ω–∞—è –Ω–∞–¥—Ü–µ–Ω–∫–∞ (30%)

        const ownerShare = projectMarkupAmount * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100); // 70% –æ—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –Ω–∞–¥—Ü–µ–Ω–∫–∏
        const serviceCommission = projectMarkupAmount * (TEST_CONSTANTS.SERVICE_COMMISSION / 100); // 30% –æ—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –Ω–∞–¥—Ü–µ–Ω–∫–∏
        const clientBonusToOwner = totalBaseCost * (TEST_CONSTANTS.CLIENT_BONUS_RATE / 100); // 10% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        console.log(`üìä COST BREAKDOWN:`);
        console.log(`   Base cost: ${totalBaseCost.toFixed(2)}‚ÇΩ`);
        console.log(
          `   Service markup (${TEST_CONSTANTS.SERVICE_MARKUP}%): ${serviceMarkupAmount.toFixed(2)}‚ÇΩ`,
        );
        console.log(`   Project markup (${project.markup}%): ${projectMarkupAmount.toFixed(2)}‚ÇΩ`);
        console.log(
          `   Owner share (${TEST_CONSTANTS.PROJECT_OWNER_SHARE}% of project markup): ${ownerShare.toFixed(2)}‚ÇΩ`,
        );
        console.log(
          `   Service commission (${TEST_CONSTANTS.SERVICE_COMMISSION}% of project markup): ${serviceCommission.toFixed(2)}‚ÇΩ`,
        );
        console.log(
          `   Client bonus to owner (${TEST_CONSTANTS.CLIENT_BONUS_RATE}% of base): ${clientBonusToOwner.toFixed(2)}‚ÇΩ`,
        );

        // 7.2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–µ–∫—Ç–∞
        const ownerCommissions = await ServiceClients.getCommissionHistory(projectOwner.id);

        // –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª—é –æ—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –Ω–∞–¥—Ü–µ–Ω–∫–∏
        const markupCommission = ownerCommissions.find(
          (c) => c.type === 'client_markup' && Math.abs(c.amount - ownerShare) < 0.01,
        );
        expect(markupCommission).toBeDefined();

        // –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const clientBonus = ownerCommissions.find(
          (c) => c.type === 'client_markup' && Math.abs(c.amount - clientBonusToOwner) < 0.01,
        );
        expect(clientBonus).toBeDefined();

        console.log(`‚úÖ Owner commissions validated`);

        // 7.3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è)
        const clientBalance = await ServiceClients.getBalance(client.id);
        const expectedClientBalance = topupAmount - totalFinalCost;
        ValidationHelpers.validateBalance(clientBalance.balance, expectedClientBalance);

        console.log(
          `‚úÖ Client balance after AI usage: ${clientBalance.balance}‚ÇΩ (spent: ${totalFinalCost.toFixed(2)}‚ÇΩ)`,
        );

        // üìà –≠–¢–ê–ü 8: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å

        // 8.1. –û—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
        const ownerReport = await ServiceClients.generateReport(projectOwner.id, 'project', {
          from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // –Ω–µ–¥–µ–ª—è
          to: new Date(),
        });

        const expectedOwnerRevenue = ownerShare + clientBonusToOwner;
        expect(ownerReport.commissions).toBeGreaterThanOrEqual(expectedOwnerRevenue);

        console.log(`üìä OWNER WEEKLY REPORT:`);
        console.log(`   Revenue: ${ownerReport.commissions}‚ÇΩ`);
        console.log(`   Clients: ${ownerReport.users || 1}`);
        console.log(`   AI Requests: ${aiRequests.length}`);

        // 8.2. –ê–¥–º–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç
        const adminReport = await ServiceClients.generateReport('admin', 'admin', {
          from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
          to: new Date(),
        });

        const expectedServiceRevenue = serviceMarkupAmount + serviceCommission;
        expect(adminReport.revenue).toBeGreaterThanOrEqual(expectedServiceRevenue);

        console.log(`üìä ADMIN WEEKLY REPORT:`);
        console.log(`   Total Revenue: ${adminReport.revenue}‚ÇΩ`);
        console.log(`   Service Commission: ${serviceCommission.toFixed(2)}‚ÇΩ`);
        console.log(`   Platform Users: ${adminReport.users}`);
        console.log(`   Total Transactions: ${adminReport.transactions}`);

        // üéâ –≠–¢–ê–ü 9: –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        console.log(`\nüéâ PROJECT MARKUP FLOW COMPLETED SUCCESSFULLY`);
        console.log(`üíº Project: ${project.name} (${project.markup}% markup)`);
        console.log(`üë§ Owner earned: ${expectedOwnerRevenue.toFixed(2)}‚ÇΩ`);
        console.log(`üè¢ Service earned: ${expectedServiceRevenue.toFixed(2)}‚ÇΩ`);
        console.log(
          `üí≥ Client spent: ${totalFinalCost.toFixed(2)}‚ÇΩ for ${aiRequests.length} AI requests`,
        );
        console.log(`üìä All commissions and reports validated ‚úÖ`);
      });

      await it('should handle multiple clients in one project', async () => {
        // üë§ –°–æ–∑–¥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞
        const owner = await this.createTestUser('multiOwner');
        const project = await this.createTestProject('multiOwner', {
          name: 'Multi-Client Agency',
          markup: 25, // 25% –Ω–∞–¥—Ü–µ–Ω–∫–∞
        });

        // üë• –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        const clients: any[] = [];
        for (let i = 1; i <= 3; i++) {
          const client = await this.createTestUser(`client${i}`, {
            email: `client${i}@business.com`,
          });

          const invitation = await ServiceClients.addClientToProject(project.id, client.email);
          await ServiceClients.acceptProjectInvite(invitation.inviteLink, client.id);

          // –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å
          await ServiceClients.topupBalance(client.id, 2000, 'card');

          clients.push(client);
        }

        // ü§ñ –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI
        for (const client of clients) {
          await ServiceClients.makeAIRequest(client.id, 'gpt-4', 'Test request', project.id);
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const ownerCommissions = await ServiceClients.getCommissionHistory(owner.id);
        expect(ownerCommissions.length).toBeGreaterThan(0);

        // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        const uniqueClients = new Set(ownerCommissions.map((c) => c.fromUserId));
        expect(uniqueClients.size).toBe(clients.length);

        console.log(
          `‚úÖ Multi-client project: ${clients.length} clients, ${ownerCommissions.length} commissions`,
        );
      });

      await it('should prevent commission calculation without project context', async () => {
        // üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞
        const independentUser = await this.createTestUser('independent');
        await ServiceClients.topupBalance(independentUser.id, 1000, 'card');

        // ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const aiRequest = await ServiceClients.makeAIRequest(
          independentUser.id,
          'gpt-4',
          'Independent request',
          // –ù–ï–¢ projectId!
        );

        expect(aiRequest.projectId).toBeUndefined();

        await ValidationHelpers.waitForTransactionProcessing();

        // ‚úÖ –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
        const commissions = await ServiceClients.getCommissionHistory(independentUser.id);
        const projectCommissions = commissions.filter((c) => c.type === 'client_markup');
        expect(projectCommissions).toHaveLength(0);

        console.log(`‚úÖ Independent AI usage: no project commissions`);
      });

      await it('should calculate progressive markup rates', async () => {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–¥—Ü–µ–Ω–∫–∏
        const markupTestCases = [
          { markup: 10, name: 'Low Markup Project' },
          { markup: 50, name: 'High Markup Project' },
          { markup: 100, name: 'Premium Project' },
        ];

        for (const testCase of markupTestCases) {
          const owner = await this.createTestUser(`owner_${testCase.markup}`);
          const project = await this.createTestProject(`owner_${testCase.markup}`, {
            name: testCase.name,
            markup: testCase.markup,
          });

          const client = await this.createTestUser(`client_${testCase.markup}`, {
            email: `client_${testCase.markup}@test.com`,
          });

          const invitation = await ServiceClients.addClientToProject(project.id, client.email);
          await ServiceClients.acceptProjectInvite(invitation.inviteLink, client.id);
          await ServiceClients.topupBalance(client.id, 1000, 'card');

          // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const baseCost = 10; // 10‚ÇΩ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
          const aiRequest = await ServiceClients.makeAIRequest(
            client.id,
            'gpt-4',
            'Fixed cost request',
            project.id,
          );

          // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          aiRequest.baseCost = baseCost;
          aiRequest.serviceCost = baseCost * 1.2; // +20% —Å–µ—Ä–≤–∏—Å–∞
          aiRequest.finalCost = aiRequest.serviceCost * (1 + testCase.markup / 100);

          await ValidationHelpers.waitForTransactionProcessing();

          const expectedMarkupAmount = aiRequest.finalCost - aiRequest.serviceCost;
          const expectedOwnerShare = expectedMarkupAmount * 0.7; // 70%

          const ownerCommissions = await ServiceClients.getCommissionHistory(owner.id);
          const markupCommission = ownerCommissions.find((c) => c.type === 'client_markup');

          expect(markupCommission).toBeDefined();
          ValidationHelpers.validateBalance(markupCommission!.amount, expectedOwnerShare);

          console.log(
            `‚úÖ Markup ${testCase.markup}%: Owner earned ${expectedOwnerShare.toFixed(2)}‚ÇΩ`,
          );
        }
      });
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
export default async function runProjectClientMarkupFlowTest(): Promise<void> {
  const test = new ProjectClientMarkupFlowTest();
  await test.runTest();
}
