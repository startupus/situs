/**
 * üöÄ –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö–ê–¢–ï–õ–¨ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –º–∏–∫—Ä–æ-—Ñ—É–Ω–∫—Ü–∏–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –•–∞–±—É—Å
 */

import { intelligentTestRunner } from './core/IntelligentTestRunner';
import { coverageManager } from './core/CoverageManager';

interface TestingOptions {
  mode: 'auto' | 'interactive' | 'category' | 'scenario';
  targetCoverage?: number;
  maxScenarios?: number;
  category?: string;
  scenarioId?: string;
  reportOnly?: boolean;
}

class ComprehensiveTestingLauncher {
  
  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
   */
  async launch(options: TestingOptions = { mode: 'auto' }): Promise<void> {
    console.log('üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–û–°–ò–°–¢–ï–ú–´ –•–ê–ë–£–°');
    console.log('=' .repeat(60));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await this.showInitialState();
    
    switch (options.mode) {
      case 'auto':
        await this.runAutomaticMode(options);
        break;
      case 'interactive':
        await this.runInteractiveMode();
        break;
      case 'category':
        await this.runCategoryMode(options.category || 'auth');
        break;
      case 'scenario':
        await this.runSpecificScenario(options.scenarioId || '');
        break;
      default:
        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
   */
  private async showInitialState(): Promise<void> {
    console.log('\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:');
    
    const stats = coverageManager.getCoverageStats();
    
    console.log(`üìã –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: ${stats.totalFunctions}`);
    console.log(`‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${stats.testedFunctions} (${stats.coveragePercentage.toFixed(1)}%)`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${stats.untested.length}`);
    
    console.log('\nüìä –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(stats.categoryCoverage).forEach(([category, coverage]) => {
      const bar = this.createProgressBar(coverage);
      console.log(`  ${category}: ${coverage.toFixed(1)}% ${bar}`);
    });
    
    if (stats.recentlyTested.length > 0) {
      console.log(`\nüïí –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ (24—á): ${stats.recentlyTested.length} —Ñ—É–Ω–∫—Ü–∏–π`);
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private async runAutomaticMode(options: TestingOptions): Promise<void> {
    console.log('\nüöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ñ–ò–ú–ê');
    console.log(`üéØ –¶–µ–ª—å: ${options.targetCoverage || 100}% –ø–æ–∫—Ä—ã—Ç–∏—è`);
    console.log(`üìã –ú–∞–∫—Å–∏–º—É–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${options.maxScenarios || 50}`);
    
    const startTime = Date.now();
    
    await intelligentTestRunner.runAutomaticTesting(
      options.targetCoverage || 100,
      options.maxScenarios || 50
    );
    
    const duration = Date.now() - startTime;
    console.log(`\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${this.formatDuration(duration)}`);
    
    await this.showFinalStatistics();
  }

  /**
   * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
   */
  private async runInteractiveMode(): Promise<void> {
    console.log('\nüéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú');
    console.log('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:');
    console.log('1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    console.log('3. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç');
    console.log('4. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ');
    console.log('5. –í—ã—Ö–æ–¥');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    console.log('\nüí° –ó–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...');
    
    const scenario = coverageManager.generateNextScenario();
    console.log(`üìã –í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log(`üéØ –§—É–Ω–∫—Ü–∏–∏: ${scenario.functions.join(', ')}`);
    
    const execution = await intelligentTestRunner.executeScenario(scenario);
    
    console.log(`\n${execution.success ? '‚úÖ' : '‚ùå'} –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω`);
    console.log(`üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: ${execution.coverage.toFixed(1)}%`);
    
    if (execution.recommendations.length > 0) {
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      execution.recommendations.forEach(rec => console.log(`  - ${rec}`));
    }
  }

  /**
   * –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private async runCategoryMode(category: string): Promise<void> {
    console.log(`\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò: ${category.toUpperCase()}`);
    
    await intelligentTestRunner.runCategoryTesting(category, 10);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const stats = coverageManager.getCoverageStats();
    const categoryProgress = stats.categoryCoverage[category] || 0;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`);
    console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${categoryProgress.toFixed(1)}%`);
    console.log(`   ${this.createProgressBar(categoryProgress)}`);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  private async runSpecificScenario(scenarioId: string): Promise<void> {
    if (!scenarioId) {
      console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID —Å—Ü–µ–Ω–∞—Ä–∏—è');
      return;
    }

    console.log(`\nüéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø: ${scenarioId}`);
    
    const execution = await intelligentTestRunner.runSpecificScenario(scenarioId);
    
    if (!execution) {
      console.log('‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è:`);
    console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${execution.coverage.toFixed(1)}%`);
    console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${this.formatDuration(execution.totalDuration)}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${execution.success ? '–£–°–ü–ï–•' : '–ü–†–û–í–ê–õ'}`);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  private async showFinalStatistics(): Promise<void> {
    console.log('\nüìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    
    const stats = coverageManager.getCoverageStats();
    const history = intelligentTestRunner.getExecutionHistory();
    
    console.log(`üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${history.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${history.filter(h => h.success).length}`);
    console.log(`üìä –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${stats.coveragePercentage.toFixed(1)}%`);
    console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏—è: ${this.formatDuration(intelligentTestRunner.getAverageScenarioDuration())}`);
    
    // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const recommendations = coverageManager.generateRecommendations();
    if (recommendations.missing.length > 0) {
      console.log('\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      recommendations.missing
        .filter(r => r.severity === 'critical')
        .slice(0, 5)
        .forEach(r => console.log(`   - ${r.function}: ${r.recommendation}`));
    }

    // –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    console.log('\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    if (stats.coveragePercentage < 100) {
      console.log(`   - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ—Å—Ç–∞–ª–æ—Å—å ${stats.untested.length} —Ñ—É–Ω–∫—Ü–∏–π)`);
      console.log(`   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º`);
    } else {
      console.log('   - üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  private createProgressBar(percentage: number, length: number = 20): string {
    const filled = Math.floor((percentage / 100) * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
   */
  private formatDuration(ms: number): string {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º ${seconds % 60}—Å`;
    } else if (minutes > 0) {
      return `${minutes}–º ${seconds % 60}—Å`;
    } else {
      return `${seconds}—Å`;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
   */
  async showReportOnly(): Promise<void> {
    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ë–ï–ó –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–ï–°–¢–û–í:');
    
    const detailedReport = coverageManager.generateDetailedReport();
    console.log(detailedReport);
    
    const recommendations = coverageManager.generateRecommendations();
    
    if (recommendations.missing.length > 0) {
      console.log('\nüîß –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–û–†–ê–ë–û–¢–ö–ò:');
      recommendations.missing
        .sort((a, b) => {
          const priority = { critical: 0, high: 1, medium: 2, low: 3 };
          return priority[a.severity] - priority[b.severity];
        })
        .slice(0, 15)
        .forEach((rec, index) => {
          console.log(`${index + 1}. [${rec.severity.toUpperCase()}] ${rec.function}`);
          console.log(`   ${rec.recommendation}`);
        });
    }
  }
}

/**
 * üöÄ –¢–û–ß–ö–ê –í–•–û–î–ê
 */
async function main(): Promise<void> {
  const launcher = new ComprehensiveTestingLauncher();
  
  // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  const args = typeof globalThis !== 'undefined' && globalThis.process?.argv?.slice(2) || [];
  const options: TestingOptions = { mode: 'auto' };
  
  if (args.includes('--interactive')) {
    options.mode = 'interactive';
  } else if (args.includes('--report-only')) {
    await launcher.showReportOnly();
    return;
  } else if (args.includes('--category')) {
    options.mode = 'category';
    const categoryIndex = args.indexOf('--category') + 1;
    options.category = args[categoryIndex] || 'auth';
  } else if (args.includes('--scenario')) {
    options.mode = 'scenario';
    const scenarioIndex = args.indexOf('--scenario') + 1;
    options.scenarioId = args[scenarioIndex];
  }
  
  // –ü–∞—Ä—Å–∏–º —Ü–µ–ª–µ–≤–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
  const coverageIndex = args.indexOf('--coverage');
  if (coverageIndex !== -1 && args[coverageIndex + 1]) {
    options.targetCoverage = parseInt(args[coverageIndex + 1]);
  }
  
  // –ü–∞—Ä—Å–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  const scenariosIndex = args.indexOf('--max-scenarios');
  if (scenariosIndex !== -1 && args[scenariosIndex + 1]) {
    options.maxScenarios = parseInt(args[scenariosIndex + 1]);
  }

  try {
    await launcher.launch(options);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

export { ComprehensiveTestingLauncher, main };