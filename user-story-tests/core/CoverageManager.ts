/**
 * üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ö–†–´–¢–ò–ï–ú
 * 
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–∏–∫—Ä–æ-—Ñ—É–Ω–∫—Ü–∏–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã,
 * –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
 * –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
 */

export interface MicroFunction {
  id: string;
  category: 'auth' | 'billing' | 'ai' | 'referral' | 'corporate' | 'admin';
  name: string;
  description: string;
  priority: 'critical' | 'high' | 'medium' | 'low';
  dependencies: string[];
  estimatedDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

export interface FunctionCoverage {
  tested: boolean;
  testCount: number;
  lastTested: Date | null;
  scenarios: string[];
  issues: string[];
  performance: {
    averageResponseTime: number;
    successRate: number;
    errorRate: number;
  };
  implementation: {
    exists: boolean;
    quality: 'excellent' | 'good' | 'poor' | 'missing';
    issues: string[];
  };
}

export interface TestScenario {
  id: string;
  name: string;
  description: string;
  functions: string[];
  priority: 'critical' | 'high' | 'medium' | 'low';
  estimatedDuration: number;
  prerequisites: string[];
  expectedOutcome: string;
  status: 'pending' | 'running' | 'passed' | 'failed' | 'partial';
  coverage: number;
  gaps: string[];
  createdAt: Date;
  executedAt: Date | null;
}

/**
 * üéØ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ö–†–´–¢–ò–ï–ú
 */
export class CoverageManager {
  private functions: Map<string, MicroFunction> = new Map();
  private coverage: Map<string, FunctionCoverage> = new Map();
  private scenarios: Map<string, TestScenario> = new Map();
  private executionHistory: string[] = [];

  constructor() {
    this.initializeFunctions();
    this.initializeCoverage();
  }

  // ========================================
  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ò–ö–†–û-–§–£–ù–ö–¶–ò–ô
  // ========================================

  private initializeFunctions(): void {
    // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (25 —Ñ—É–Ω–∫—Ü–∏–π)
    const authFunctions: MicroFunction[] = [
      {
        id: 'AUTH_001',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email + –ø–∞—Ä–æ–ª—å',
        description: '–ë–∞–∑–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º',
        priority: 'critical',
        dependencies: [],
        estimatedDuration: 15
      },
      {
        id: 'AUTH_002',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth',
        description: 'OAuth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google –∞–∫–∫–∞—É–Ω—Ç',
        priority: 'high',
        dependencies: [],
        estimatedDuration: 20
      },
      {
        id: 'AUTH_003',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å OAuth',
        description: 'OAuth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç',
        priority: 'medium',
        dependencies: [],
        estimatedDuration: 20
      },
      {
        id: 'AUTH_004',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ VK OAuth',
        description: 'OAuth —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ VK –∞–∫–∫–∞—É–Ω—Ç',
        priority: 'medium',
        dependencies: [],
        estimatedDuration: 20
      },
      {
        id: 'AUTH_005',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram',
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞',
        priority: 'medium',
        dependencies: [],
        estimatedDuration: 25
      },
      {
        id: 'AUTH_006',
        category: 'auth',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω + SMS',
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ SMS',
        priority: 'high',
        dependencies: [],
        estimatedDuration: 30
      },
      {
        id: 'AUTH_007',
        category: 'auth',
        name: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ email + –ø–∞—Ä–æ–ª—å',
        description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º',
        priority: 'critical',
        dependencies: ['AUTH_001'],
        estimatedDuration: 10
      },
      {
        id: 'AUTH_008',
        category: 'auth',
        name: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
        description: 'OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–æ—Ü—Å–µ—Ç–∏',
        priority: 'high',
        dependencies: ['AUTH_002', 'AUTH_003', 'AUTH_004'],
        estimatedDuration: 15
      },
      {
        id: 'AUTH_009',
        category: 'auth',
        name: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω + SMS',
        description: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º',
        priority: 'high',
        dependencies: ['AUTH_006'],
        estimatedDuration: 20
      },
      {
        id: 'AUTH_010',
        category: 'auth',
        name: '–ê–≤—Ç–æ–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
        priority: 'medium',
        dependencies: ['AUTH_007'],
        estimatedDuration: 5
      },
      {
        id: 'AUTH_011',
        category: 'auth',
        name: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: 'Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        priority: 'critical',
        dependencies: ['AUTH_001'],
        estimatedDuration: 10
      },
      {
        id: 'AUTH_012',
        category: 'auth',
        name: '–í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞',
        description: '–£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email –∫–æ–¥–∞',
        priority: 'critical',
        dependencies: ['AUTH_011'],
        estimatedDuration: 5
      },
      {
        id: 'AUTH_013',
        category: 'auth',
        name: '–í–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        priority: 'high',
        dependencies: ['AUTH_011'],
        estimatedDuration: 5
      },
      {
        id: 'AUTH_014',
        category: 'auth',
        name: '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞',
        description: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        priority: 'medium',
        dependencies: ['AUTH_011'],
        estimatedDuration: 10
      },
      {
        id: 'AUTH_015',
        category: 'auth',
        name: '–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        priority: 'medium',
        dependencies: ['AUTH_011'],
        estimatedDuration: 5
      },
      {
        id: 'AUTH_016',
        category: 'auth',
        name: '–°–º–µ–Ω–∞ email –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞ –¥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        priority: 'medium',
        dependencies: ['AUTH_001'],
        estimatedDuration: 15
      },
      {
        id: 'AUTH_017',
        category: 'auth',
        name: '–°–º–µ–Ω–∞ email –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ email —É –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        priority: 'medium',
        dependencies: ['AUTH_012'],
        estimatedDuration: 20
      },
      {
        id: 'AUTH_018',
        category: 'auth',
        name: '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ',
        description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è',
        priority: 'high',
        dependencies: ['AUTH_007'],
        estimatedDuration: 15
      },
      {
        id: 'AUTH_019',
        category: 'auth',
        name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ email',
        description: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ email',
        priority: 'high',
        dependencies: ['AUTH_001'],
        estimatedDuration: 25
      },
      {
        id: 'AUTH_020',
        category: 'auth',
        name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ SMS',
        description: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ SMS',
        priority: 'medium',
        dependencies: ['AUTH_006'],
        estimatedDuration: 30
      },
      {
        id: 'AUTH_021',
        category: 'auth',
        name: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è',
        priority: 'high',
        dependencies: [],
        estimatedDuration: 5
      },
      {
        id: 'AUTH_022',
        category: 'auth',
        name: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫',
        description: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–∞—Ö',
        priority: 'high',
        dependencies: ['AUTH_007'],
        estimatedDuration: 10
      },
      {
        id: 'AUTH_023',
        category: 'auth',
        name: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞',
        description: '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞',
        priority: 'medium',
        dependencies: ['AUTH_022'],
        estimatedDuration: 15
      },
      {
        id: 'AUTH_024',
        category: 'auth',
        name: '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        description: '2FA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TOTP –∏–ª–∏ SMS',
        priority: 'high',
        dependencies: ['AUTH_007'],
        estimatedDuration: 30
      },
      {
        id: 'AUTH_025',
        category: 'auth',
        name: '–í—ã—Ö–æ–¥ –∏–∑ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        description: '–ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
        priority: 'medium',
        dependencies: ['AUTH_007'],
        estimatedDuration: 10
      }
    ];

    // –ë–ò–õ–õ–ò–ù–ì (35 —Ñ—É–Ω–∫—Ü–∏–π) - –¥–æ–±–∞–≤–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    const billingFunctions: MicroFunction[] = [
      {
        id: 'BILL_001',
        category: 'billing',
        name: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞',
        description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        priority: 'critical',
        dependencies: ['AUTH_007'],
        estimatedDuration: 5
      },
      {
        id: 'BILL_002',
        category: 'billing',
        name: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (500 –ú–ù–¢)',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        priority: 'critical',
        dependencies: ['AUTH_012'],
        estimatedDuration: 10
      },
      {
        id: 'BILL_003',
        category: 'billing',
        name: '–°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ AI –∑–∞–ø—Ä–æ—Å',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI',
        priority: 'critical',
        dependencies: ['BILL_001'],
        estimatedDuration: 8
      },
      {
        id: 'BILL_009',
        category: 'billing',
        name: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ÆMoney',
        description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ÆMoney',
        priority: 'critical',
        dependencies: ['BILL_001'],
        estimatedDuration: 45
      },
      {
        id: 'BILL_016',
        category: 'billing',
        name: '–£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ webhook –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        priority: 'critical',
        dependencies: ['BILL_009'],
        estimatedDuration: 15
      }
    ];

    // AI –°–ï–†–í–ò–°–´ (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const aiFunctions: MicroFunction[] = [
      {
        id: 'AI_001',
        category: 'ai',
        name: '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
        description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ AI –º–æ–¥–µ–ª–µ–π',
        priority: 'critical',
        dependencies: ['AUTH_007'],
        estimatedDuration: 10
      },
      {
        id: 'AI_011',
        category: 'ai',
        name: '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞',
        description: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å AI',
        priority: 'critical',
        dependencies: ['AI_001'],
        estimatedDuration: 5
      },
      {
        id: 'AI_012',
        category: 'ai',
        name: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
        description: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI –º–æ–¥–µ–ª–∏',
        priority: 'critical',
        dependencies: ['AI_011', 'BILL_003'],
        estimatedDuration: 30
      },
      {
        id: 'AI_021',
        category: 'ai',
        name: '–°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞',
        description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        priority: 'high',
        dependencies: ['AUTH_007'],
        estimatedDuration: 10
      }
    ];

    // –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
    const referralFunctions: MicroFunction[] = [
      {
        id: 'REF_001',
        category: 'referral',
        name: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏',
        priority: 'high',
        dependencies: ['AUTH_007'],
        estimatedDuration: 10
      },
      {
        id: 'REF_006',
        category: 'referral',
        name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ',
        description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
        priority: 'high',
        dependencies: ['REF_001'],
        estimatedDuration: 20
      },
      {
        id: 'REF_008',
        category: 'referral',
        name: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞',
        priority: 'high',
        dependencies: ['REF_006', 'BILL_002'],
        estimatedDuration: 15
      }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Map
    [...authFunctions, ...billingFunctions, ...aiFunctions, ...referralFunctions].forEach(func => {
      this.functions.set(func.id, func);
    });

    console.log(`üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${this.functions.size} –º–∏–∫—Ä–æ-—Ñ—É–Ω–∫—Ü–∏–π`);
  }

  private initializeCoverage(): void {
    this.functions.forEach((func, id) => {
      this.coverage.set(id, {
        tested: false,
        testCount: 0,
        lastTested: null,
        scenarios: [],
        issues: [],
        performance: {
          averageResponseTime: 0,
          successRate: 0,
          errorRate: 0
        },
        implementation: {
          exists: false,
          quality: 'missing',
          issues: []
        }
      });
    });

    console.log(`üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è ${this.coverage.size} —Ñ—É–Ω–∫—Ü–∏–π`);
  }

  // ========================================
  // –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í
  // ========================================

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
   */
  generateNextScenario(): TestScenario {
    const untestedFunctions = this.getUntestedFunctions();
    const priorityFunctions = this.getPriorityFunctions(untestedFunctions);
    
    if (priorityFunctions.length === 0) {
      return this.generateAdvancedScenario();
    }

    const scenarioFunctions = this.selectOptimalFunctionSet(priorityFunctions);
    const scenario = this.createScenario(scenarioFunctions);
    
    this.scenarios.set(scenario.id, scenario);
    
    console.log(`üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
    console.log(`üìã –§—É–Ω–∫—Ü–∏–∏: ${scenario.functions.join(', ')}`);
    
    return scenario;
  }

  private getUntestedFunctions(): string[] {
    const untested: string[] = [];
    this.coverage.forEach((coverage, id) => {
      if (!coverage.tested) {
        untested.push(id);
      }
    });
    return untested;
  }

  private getPriorityFunctions(functionIds: string[]): string[] {
    const priorityOrder = ['critical', 'high', 'medium', 'low'];
    
    return functionIds.sort((a, b) => {
      const funcA = this.functions.get(a)!;
      const funcB = this.functions.get(b)!;
      
      const priorityA = priorityOrder.indexOf(funcA.priority);
      const priorityB = priorityOrder.indexOf(funcB.priority);
      
      return priorityA - priorityB;
    });
  }

  private selectOptimalFunctionSet(functions: string[]): string[] {
    const selected: string[] = [];
    const maxDuration = 300; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏–π
    let currentDuration = 0;

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    for (const funcId of functions) {
      const func = this.functions.get(funcId)!;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      const canAdd = this.canAddFunction(funcId, selected);
      
      if (canAdd && currentDuration + func.estimatedDuration <= maxDuration) {
        selected.push(funcId);
        currentDuration += func.estimatedDuration;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã
        this.addDependencies(funcId, selected);
        
        if (selected.length >= 8) break; // –ú–∞–∫—Å–∏–º—É–º 8 —Ñ—É–Ω–∫—Ü–∏–π –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      }
    }

    return selected;
  }

  private canAddFunction(funcId: string, selectedFunctions: string[]): boolean {
    const func = this.functions.get(funcId)!;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for (const depId of func.dependencies) {
      const depCoverage = this.coverage.get(depId)!;
      
      // –ï—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–±–æ—Ä–µ
      if (!depCoverage.tested && !selectedFunctions.includes(depId)) {
        return false;
      }
    }
    
    return true;
  }

  private addDependencies(funcId: string, selected: string[]): void {
    const func = this.functions.get(funcId)!;
    
    for (const depId of func.dependencies) {
      const depCoverage = this.coverage.get(depId)!;
      
      if (!depCoverage.tested && !selected.includes(depId)) {
        selected.unshift(depId); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
      }
    }
  }

  private createScenario(functionIds: string[]): TestScenario {
    const id = `SCENARIO_${Date.now()}`;
    const functions = functionIds.map(id => this.functions.get(id)!);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
    const hasCritical = functions.some(f => f.priority === 'critical');
    const hasHigh = functions.some(f => f.priority === 'high');
    
    let priority: 'critical' | 'high' | 'medium' | 'low';
    if (hasCritical) priority = 'critical';
    else if (hasHigh) priority = 'high';
    else priority = 'medium';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    const categories = [...new Set(functions.map(f => f.category))];
    const categoryNames = categories.map(cat => this.getCategoryDisplayName(cat));
    const name = `${categoryNames.join(' + ')} - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ`;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const estimatedDuration = functions.reduce((sum, f) => sum + f.estimatedDuration, 0);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    const prerequisites = this.getPrerequisites(functionIds);

    return {
      id,
      name,
      description: `–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–π ${functions.length} —Ñ—É–Ω–∫—Ü–∏–π: ${functions.map(f => f.name).join(', ')}`,
      functions: functionIds,
      priority,
      estimatedDuration,
      prerequisites,
      expectedOutcome: '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –µ–¥–∏–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏',
      status: 'pending',
      coverage: 0,
      gaps: [],
      createdAt: new Date(),
      executedAt: null
    };
  }

  private generateAdvancedScenario(): TestScenario {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π
    const testedFunctions = Array.from(this.coverage.entries())
      .filter(([_, coverage]) => coverage.tested)
      .map(([id, _]) => id);

    // –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
    const oldFunctions = testedFunctions
      .filter(id => {
        const coverage = this.coverage.get(id)!;
        const daysSinceTest = coverage.lastTested ? 
          (Date.now() - coverage.lastTested.getTime()) / (1000 * 60 * 60 * 24) : 
          999;
        return daysSinceTest > 7; // –ë–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
      })
      .slice(0, 5);

    if (oldFunctions.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      return this.createIntegrationScenario();
    }

    return this.createScenario(oldFunctions);
  }

  private createIntegrationScenario(): TestScenario {
    // –í—ã–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const categories = ['auth', 'billing', 'ai', 'referral'] as const;
    const integrationFunctions: string[] = [];

    categories.forEach(category => {
      const categoryFunctions = Array.from(this.functions.values())
        .filter(f => f.category === category && this.coverage.get(f.id)!.tested)
        .slice(0, 2);
      
      integrationFunctions.push(...categoryFunctions.map(f => f.id));
    });

    const scenario = this.createScenario(integrationFunctions);
    scenario.name = '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –ú–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å';
    scenario.priority = 'high';
    
    return scenario;
  }

  private getPrerequisites(functionIds: string[]): string[] {
    const allDeps = new Set<string>();
    
    functionIds.forEach(id => {
      const func = this.functions.get(id)!;
      func.dependencies.forEach(dep => allDeps.add(dep));
    });

    // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    functionIds.forEach(id => allDeps.delete(id));
    
    return Array.from(allDeps);
  }

  private getCategoryDisplayName(category: string): string {
    const names = {
      auth: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
      billing: '–ë–∏–ª–ª–∏–Ω–≥',
      ai: 'AI –°–µ—Ä–≤–∏—Å—ã',
      referral: '–†–µ—Ñ–µ—Ä–∞–ª—ã',
      corporate: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
    };
    return names[category as keyof typeof names] || category;
  }

  // ========================================
  // –í–´–ü–û–õ–ù–ï–ù–ò–ï –ò –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
  // ========================================

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  startScenario(scenarioId: string): void {
    const scenario = this.scenarios.get(scenarioId);
    if (scenario) {
      scenario.status = 'running';
      scenario.executedAt = new Date();
      this.executionHistory.push(scenarioId);
      console.log(`üöÄ –ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name}`);
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
   */
  markFunctionTested(
    functionId: string, 
    scenarioId: string, 
    success: boolean,
    responseTime?: number,
    issues?: string[]
  ): void {
    const coverage = this.coverage.get(functionId);
    if (!coverage) return;

    coverage.tested = true;
    coverage.testCount++;
    coverage.lastTested = new Date();
    
    if (!coverage.scenarios.includes(scenarioId)) {
      coverage.scenarios.push(scenarioId);
    }

    if (issues) {
      coverage.issues.push(...issues);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (responseTime) {
      const prevAvg = coverage.performance.averageResponseTime;
      const count = coverage.testCount;
      coverage.performance.averageResponseTime = 
        (prevAvg * (count - 1) + responseTime) / count;
    }

    if (success) {
      coverage.performance.successRate = 
        (coverage.performance.successRate * (coverage.testCount - 1) + 1) / coverage.testCount;
    } else {
      coverage.performance.errorRate = 
        (coverage.performance.errorRate * (coverage.testCount - 1) + 1) / coverage.testCount;
    }

    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${functionId} –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ (${success ? 'SUCCESS' : 'FAILED'})`);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
   */
  completeScenario(
    scenarioId: string, 
    status: 'passed' | 'failed' | 'partial',
    gaps?: string[]
  ): void {
    const scenario = this.scenarios.get(scenarioId);
    if (!scenario) return;

    scenario.status = status;
    scenario.gaps = gaps || [];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    const testedCount = scenario.functions.filter(id => 
      this.coverage.get(id)?.tested
    ).length;
    
    scenario.coverage = (testedCount / scenario.functions.length) * 100;

    console.log(`üèÅ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${scenario.name} (${status.toUpperCase()})`);
    console.log(`üìä –ü–æ–∫—Ä—ã—Ç–∏–µ: ${scenario.coverage.toFixed(1)}%`);
  }

  // ========================================
  // –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´
  // ========================================

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
   */
  getCoverageStats(): {
    totalFunctions: number;
    testedFunctions: number;
    coveragePercentage: number;
    categoryCoverage: Record<string, number>;
    untested: string[];
    recentlyTested: string[];
  } {
    const totalFunctions = this.functions.size;
    const testedCount = Array.from(this.coverage.values())
      .filter(c => c.tested).length;
    
    const coveragePercentage = (testedCount / totalFunctions) * 100;

    // –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryCoverage: Record<string, number> = {};
    const categoryFunctions: Record<string, number> = {};
    const categoryTested: Record<string, number> = {};

    this.functions.forEach((func, id) => {
      const category = func.category;
      categoryFunctions[category] = (categoryFunctions[category] || 0) + 1;
      
      if (this.coverage.get(id)!.tested) {
        categoryTested[category] = (categoryTested[category] || 0) + 1;
      }
    });

    Object.keys(categoryFunctions).forEach(category => {
      const tested = categoryTested[category] || 0;
      const total = categoryFunctions[category];
      categoryCoverage[category] = (tested / total) * 100;
    });

    // –ù–µ–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const untested = Array.from(this.coverage.entries())
      .filter(([_, coverage]) => !coverage.tested)
      .map(([id, _]) => id);

    // –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
    const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const recentlyTested = Array.from(this.coverage.entries())
      .filter(([_, coverage]) => 
        coverage.lastTested && coverage.lastTested > oneDayAgo
      )
      .map(([id, _]) => id);

    return {
      totalFunctions,
      testedFunctions: testedCount,
      coveragePercentage,
      categoryCoverage,
      untested,
      recentlyTested
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
   */
  generateRecommendations(): {
    missing: Array<{
      function: string;
      severity: 'critical' | 'high' | 'medium' | 'low';
      recommendation: string;
    }>;
    performance: Array<{
      function: string;
      issue: string;
      impact: string;
    }>;
    quality: Array<{
      function: string;
      issues: string[];
      suggestion: string;
    }>;
  } {
    const missing: any[] = [];
    const performance: any[] = [];
    const quality: any[] = [];

    this.coverage.forEach((coverage, id) => {
      const func = this.functions.get(id)!;

      // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
      if (!coverage.tested) {
        missing.push({
          function: id,
          severity: func.priority,
          recommendation: `–§—É–Ω–∫—Ü–∏—è "${func.name}" –Ω–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞. ${func.description}`
        });
      }

      // –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (coverage.performance.averageResponseTime > 5000) { // > 5 —Å–µ–∫—É–Ω–¥
        performance.push({
          function: id,
          issue: `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫: ${coverage.performance.averageResponseTime}ms`,
          impact: '–£—Ö—É–¥—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞'
        });
      }

      if (coverage.performance.errorRate > 0.1) { // > 10% –æ—à–∏–±–æ–∫
        performance.push({
          function: id,
          issue: `–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: ${(coverage.performance.errorRate * 100).toFixed(1)}%`,
          impact: '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã'
        });
      }

      // –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞
      if (coverage.issues.length > 0) {
        quality.push({
          function: id,
          issues: coverage.issues,
          suggestion: `–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ "${func.name}"`
        });
      }
    });

    return { missing, performance, quality };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateDetailedReport(): string {
    const stats = this.getCoverageStats();
    const recommendations = this.generateRecommendations();
    
    let report = '# üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–û–ö–†–´–¢–ò–Æ –≠–ö–û–°–ò–°–¢–ï–ú–´ –•–ê–ë–£–°\n\n';
    
    report += `## üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    report += `- **–í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π**: ${stats.totalFunctions}\n`;
    report += `- **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ**: ${stats.testedFunctions}\n`;
    report += `- **–ü–æ–∫—Ä—ã—Ç–∏–µ**: ${stats.coveragePercentage.toFixed(1)}%\n\n`;

    report += `## üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n`;
    Object.entries(stats.categoryCoverage).forEach(([category, coverage]) => {
      const displayName = this.getCategoryDisplayName(category);
      const progress = '‚ñà'.repeat(Math.floor(coverage / 5)) + '‚ñë'.repeat(20 - Math.floor(coverage / 5));
      report += `- **${displayName}**: ${coverage.toFixed(1)}% ${progress}\n`;
    });

    report += `\n## ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n`;
    recommendations.missing
      .filter(r => r.severity === 'critical')
      .forEach(r => {
        report += `- **${r.function}**: ${r.recommendation}\n`;
      });

    report += `\n## üìã –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n`;
    recommendations.performance.forEach(p => {
      report += `- **${p.function}**: ${p.issue} - ${p.impact}\n`;
    });

    report += `\n## üîß –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞\n`;
    recommendations.quality.slice(0, 10).forEach(q => {
      report += `- **${q.function}**: ${q.suggestion}\n`;
    });

    report += `\n## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n`;
    const nextScenario = this.generateNextScenario();
    report += `- **–°–ª–µ–¥—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π**: ${nextScenario.name}\n`;
    report += `- **–§—É–Ω–∫—Ü–∏–∏**: ${nextScenario.functions.join(', ')}\n`;
    report += `- **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç**: ${nextScenario.priority}\n`;
    report += `- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: ${nextScenario.estimatedDuration} —Å–µ–∫\n`;

    return report;
  }

  // ========================================
  // –£–¢–ò–õ–ò–¢–´
  // ========================================

  getFunction(id: string): MicroFunction | undefined {
    return this.functions.get(id);
  }

  getFunctionCoverage(id: string): FunctionCoverage | undefined {
    return this.coverage.get(id);
  }

  getScenario(id: string): TestScenario | undefined {
    return this.scenarios.get(id);
  }

  getAllScenarios(): TestScenario[] {
    return Array.from(this.scenarios.values());
  }

  getExecutionHistory(): string[] {
    return [...this.executionHistory];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const coverageManager = new CoverageManager();