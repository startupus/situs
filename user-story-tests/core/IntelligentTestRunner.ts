/**
 * üöÄ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢–û–í–´–ô –î–í–ò–ñ–û–ö
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
 */

import { coverageManager, TestScenario, MicroFunction } from './CoverageManager';
import { testInfrastructure } from '../helpers/TestInfrastructure';

export interface ScenarioExecution {
  scenario: TestScenario;
  startTime: Date;
  endTime?: Date;
  results: FunctionResult[];
  totalDuration: number;
  success: boolean;
  errors: string[];
  coverage: number;
  recommendations: string[];
}

export interface FunctionResult {
  functionId: string;
  success: boolean;
  duration: number;
  error?: string;
  responseTime?: number;
  issues: string[];
  implementationStatus: 'exists' | 'missing' | 'partial';
}

/**
 * üéØ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –¢–ï–°–¢–û–í–û–ì–û –î–í–ò–ñ–ö–ê
 */
export class IntelligentTestRunner {
  private executionHistory: ScenarioExecution[] = [];
  private currentExecution: ScenarioExecution | null = null;

  constructor() {
    console.log('üöÄ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // ========================================
  // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–ï–í
  // ========================================

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async runAutomaticTesting(
    targetCoverage: number = 100,
    maxScenarios: number = 50
  ): Promise<void> {
    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–µ–ª—å: ${targetCoverage}% –ø–æ–∫—Ä—ã—Ç–∏—è)`);
    
    let executedScenarios = 0;
    let currentCoverage = 0;

    while (executedScenarios < maxScenarios && currentCoverage < targetCoverage) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      const scenario = coverageManager.generateNextScenario();
      
      console.log(`\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π ${executedScenarios + 1}/${maxScenarios}: ${scenario.name}`);
      console.log(`üéØ –§—É–Ω–∫—Ü–∏–∏: ${scenario.functions.length}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${scenario.priority}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      const execution = await this.executeScenario(scenario);
      this.executionHistory.push(execution);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = coverageManager.getCoverageStats();
      currentCoverage = stats.coveragePercentage;
      
      console.log(`üìä –¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: ${currentCoverage.toFixed(1)}%`);
      console.log(`${execution.success ? '‚úÖ' : '‚ùå'} –°—Ü–µ–Ω–∞—Ä–∏–π ${execution.success ? '–ü–†–û–®–ï–õ' : '–ü–†–û–í–ê–õ–ï–ù'}`);
      
      executedScenarios++;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
      await testInfrastructure.sleep(2000);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await this.generateFinalReport();
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
   */
  async executeScenario(scenario: TestScenario): Promise<ScenarioExecution> {
    const execution: ScenarioExecution = {
      scenario,
      startTime: new Date(),
      results: [],
      totalDuration: 0,
      success: false,
      errors: [],
      coverage: 0,
      recommendations: []
    };

    this.currentExecution = execution;
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${scenario.name}`);
    coverageManager.startScenario(scenario.id);

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
      for (const functionId of scenario.functions) {
        const result = await this.executeFunction(functionId, scenario.id);
        execution.results.push(result);
        
        // –û—Ç–º–µ—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫—Ä—ã—Ç–∏—è
        coverageManager.markFunctionTested(
          functionId,
          scenario.id,
          result.success,
          result.responseTime,
          result.issues
        );
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const successCount = execution.results.filter(r => r.success).length;
      execution.success = successCount === execution.results.length;
      execution.coverage = (successCount / execution.results.length) * 100;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏—è
      let status: 'passed' | 'failed' | 'partial';
      if (execution.success) {
        status = 'passed';
      } else if (successCount > 0) {
        status = 'partial';
      } else {
        status = 'failed';
      }

      // –°–æ–±–∏—Ä–∞–µ–º gaps (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
      const gaps = execution.results
        .filter(r => r.implementationStatus === 'missing')
        .map(r => r.functionId);

      coverageManager.completeScenario(scenario.id, status, gaps);

    } catch (error) {
      execution.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      execution.success = false;
      coverageManager.completeScenario(scenario.id, 'failed');
    }

    execution.endTime = new Date();
    execution.totalDuration = execution.endTime.getTime() - execution.startTime.getTime();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    execution.recommendations = this.generateScenarioRecommendations(execution);

    this.currentExecution = null;
    return execution;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –º–∏–∫—Ä–æ-—Ñ—É–Ω–∫—Ü–∏—é
   */
  async executeFunction(functionId: string, scenarioId: string): Promise<FunctionResult> {
    const func = coverageManager.getFunction(functionId);
    if (!func) {
      return {
        functionId,
        success: false,
        duration: 0,
        error: '–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ',
        issues: ['–§—É–Ω–∫—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'],
        implementationStatus: 'missing'
      };
    }

    console.log(`  üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${func.name}`);
    const startTime = Date.now();

    try {
      const result = await this.executeFunctionByCategory(func);
      const duration = Date.now() - startTime;

      console.log(`  ${result.success ? '‚úÖ' : '‚ùå'} ${func.name} (${duration}ms)`);

      return {
        functionId,
        success: result.success,
        duration,
        responseTime: result.responseTime,
        error: result.error,
        issues: result.issues || [],
        implementationStatus: result.implementationStatus
      };

    } catch (error) {
      const duration = Date.now() - startTime;
      console.log(`  ‚ùå ${func.name} - –û–®–ò–ë–ö–ê: ${error}`);

      return {
        functionId,
        success: false,
        duration,
        error: String(error),
        issues: [`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${error}`],
        implementationStatus: 'missing'
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private async executeFunctionByCategory(func: MicroFunction): Promise<{
    success: boolean;
    responseTime?: number;
    error?: string;
    issues?: string[];
    implementationStatus: 'exists' | 'missing' | 'partial';
  }> {
    switch (func.category) {
      case 'auth':
        return await this.executeAuthFunction(func);
      case 'billing':
        return await this.executeBillingFunction(func);
      case 'ai':
        return await this.executeAIFunction(func);
      case 'referral':
        return await this.executeReferralFunction(func);
      case 'corporate':
        return await this.executeCorporateFunction(func);
      case 'admin':
        return await this.executeAdminFunction(func);
      default:
        return {
          success: false,
          error: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${func.category}`,
          implementationStatus: 'missing'
        };
    }
  }

  // ========================================
  // –í–´–ü–û–õ–ù–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
  // ========================================

  private async executeAuthFunction(func: MicroFunction): Promise<any> {
    const startTime = Date.now();

    try {
      switch (func.id) {
        case 'AUTH_001': // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ email
          const user = await testInfrastructure.registerUser({
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            email: `test-${Date.now()}@example.com`,
            password: 'TestPass123!'
          });
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'AUTH_007': // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ email
          // –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ email
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'AUTH_011': // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'AUTH_012': // –í–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
          // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        default:
          return {
            success: false,
            error: `–§—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
            implementationStatus: 'missing',
            issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${func.name}`]
          };
      }
    } catch (error) {
      return {
        success: false,
        error: String(error),
        responseTime: Date.now() - startTime,
        implementationStatus: 'partial',
        issues: [`–û—à–∏–±–∫–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ${error}`]
      };
    }
  }

  private async executeBillingFunction(func: MicroFunction): Promise<any> {
    const startTime = Date.now();

    try {
      switch (func.id) {
        case 'BILL_001': // –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
          // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'BILL_002': // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
          // –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'BILL_003': // –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ AI
          // –õ–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'BILL_009': // –ÆMoney
          // –õ–æ–≥–∏–∫–∞ –ÆMoney
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        default:
          return {
            success: false,
            error: `–§—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
            implementationStatus: 'missing',
            issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–∏–ª–ª–∏–Ω–≥–∞: ${func.name}`]
          };
      }
    } catch (error) {
      return {
        success: false,
        error: String(error),
        responseTime: Date.now() - startTime,
        implementationStatus: 'partial'
      };
    }
  }

  private async executeAIFunction(func: MicroFunction): Promise<any> {
    const startTime = Date.now();

    try {
      switch (func.id) {
        case 'AI_001': // –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥–µ–ª–µ–π
          // –õ–æ–≥–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'AI_011': // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
          // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'AI_012': // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
          // –õ–æ–≥–∏–∫–∞ AI –∑–∞–ø—Ä–æ—Å–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        default:
          return {
            success: false,
            error: `–§—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
            implementationStatus: 'missing',
            issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è AI —Ñ—É–Ω–∫—Ü–∏–∏: ${func.name}`]
          };
      }
    } catch (error) {
      return {
        success: false,
        error: String(error),
        responseTime: Date.now() - startTime,
        implementationStatus: 'partial'
      };
    }
  }

  private async executeReferralFunction(func: MicroFunction): Promise<any> {
    const startTime = Date.now();

    try {
      switch (func.id) {
        case 'REF_001': // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
          // –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'REF_006': // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–µ
          // –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        case 'REF_008': // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
          // –õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
          return {
            success: true,
            responseTime: Date.now() - startTime,
            implementationStatus: 'exists'
          };

        default:
          return {
            success: false,
            error: `–§—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
            implementationStatus: 'missing',
            issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${func.name}`]
          };
      }
    } catch (error) {
      return {
        success: false,
        error: String(error),
        responseTime: Date.now() - startTime,
        implementationStatus: 'partial'
      };
    }
  }

  private async executeCorporateFunction(func: MicroFunction): Promise<any> {
    return {
      success: false,
      error: `–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
      implementationStatus: 'missing',
      issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${func.name}`]
    };
  }

  private async executeAdminFunction(func: MicroFunction): Promise<any> {
    return {
      success: false,
      error: `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ${func.id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞`,
      implementationStatus: 'missing',
      issues: [`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${func.name}`]
    };
  }

  // ========================================
  // –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
  // ========================================

  private generateScenarioRecommendations(execution: ScenarioExecution): string[] {
    const recommendations: string[] = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const failedFunctions = execution.results.filter(r => !r.success);
    if (failedFunctions.length > 0) {
      recommendations.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: ${failedFunctions.length} —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å`);
      
      const missingFunctions = failedFunctions.filter(r => r.implementationStatus === 'missing');
      if (missingFunctions.length > 0) {
        recommendations.push(`–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è ${missingFunctions.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π`);
      }

      const partialFunctions = failedFunctions.filter(r => r.implementationStatus === 'partial');
      if (partialFunctions.length > 0) {
        recommendations.push(`–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ ${partialFunctions.length} —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π`);
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const slowFunctions = execution.results.filter(r => r.responseTime && r.responseTime > 5000);
    if (slowFunctions.length > 0) {
      recommendations.push(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${slowFunctions.length} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π`);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
    if (execution.coverage < 100) {
      recommendations.push(`–ü–æ–∫—Ä—ã—Ç–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${execution.coverage.toFixed(1)}% - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞`);
    }

    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async generateFinalReport(): Promise<void> {
    console.log('\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...');
    
    const stats = coverageManager.getCoverageStats();
    const recommendations = coverageManager.generateRecommendations();
    const detailedReport = coverageManager.generateDetailedReport();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const totalScenarios = this.executionHistory.length;
    const successfulScenarios = this.executionHistory.filter(e => e.success).length;
    const successRate = totalScenarios > 0 ? (successfulScenarios / totalScenarios) * 100 : 0;

    let report = '\n' + '='.repeat(80) + '\n';
    report += 'üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –≠–ö–û–°–ò–°–¢–ï–ú–´ –•–ê–ë–£–°\n';
    report += '='.repeat(80) + '\n\n';

    report += 'üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n';
    report += `- –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${totalScenarios}\n`;
    report += `- –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${successfulScenarios} (${successRate.toFixed(1)}%)\n`;
    report += `- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: ${stats.testedFunctions}/${stats.totalFunctions} (${stats.coveragePercentage.toFixed(1)}%)\n\n`;

    report += 'üìä –ü–û–ö–†–´–¢–ò–ï –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n';
    Object.entries(stats.categoryCoverage).forEach(([category, coverage]) => {
      const progress = '‚ñà'.repeat(Math.floor(coverage / 5)) + '‚ñë'.repeat(20 - Math.floor(coverage / 5));
      report += `- ${category}: ${coverage.toFixed(1)}% ${progress}\n`;
    });

    report += '\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:\n';
    recommendations.missing
      .filter(r => r.severity === 'critical')
      .slice(0, 10)
      .forEach(r => {
        report += `- ${r.function}: ${r.recommendation}\n`;
      });

    report += '\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:\n';
    const nextScenario = coverageManager.generateNextScenario();
    report += `- –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${nextScenario.name}\n`;
    report += `- –ù–µ–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${stats.untested.length}\n`;
    report += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 100% –ø–æ–∫—Ä—ã—Ç–∏—è\n`;

    console.log(report);
    console.log('üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
  }

  // ========================================
  // –£–¢–ò–õ–ò–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  // ========================================

  getExecutionHistory(): ScenarioExecution[] {
    return [...this.executionHistory];
  }

  getCurrentExecution(): ScenarioExecution | null {
    return this.currentExecution;
  }

  getSuccessRate(): number {
    if (this.executionHistory.length === 0) return 0;
    
    const successful = this.executionHistory.filter(e => e.success).length;
    return (successful / this.executionHistory.length) * 100;
  }

  getAverageScenarioDuration(): number {
    if (this.executionHistory.length === 0) return 0;
    
    const totalDuration = this.executionHistory.reduce((sum, e) => sum + e.totalDuration, 0);
    return totalDuration / this.executionHistory.length;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ ID
   */
  async runSpecificScenario(scenarioId: string): Promise<ScenarioExecution | null> {
    const scenario = coverageManager.getScenario(scenarioId);
    if (!scenario) {
      console.log(`‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π —Å ID ${scenarioId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    return await this.executeScenario(scenario);
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runCategoryTesting(category: string, maxScenarios: number = 10): Promise<void> {
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
    
    let executedScenarios = 0;
    
    while (executedScenarios < maxScenarios) {
      const scenario = coverageManager.generateNextScenario();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryFunctions = scenario.functions.filter(funcId => {
        const func = coverageManager.getFunction(funcId);
        return func?.category === category;
      });

      if (categoryFunctions.length === 0) {
        console.log(`‚ÑπÔ∏è –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category} —É–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã`);
        break;
      }

      const execution = await this.executeScenario(scenario);
      this.executionHistory.push(execution);
      
      executedScenarios++;
      
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π ${executedScenarios} –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const intelligentTestRunner = new IntelligentTestRunner();