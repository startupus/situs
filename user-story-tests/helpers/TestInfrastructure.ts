/**
 * üõ†Ô∏è –¢–ï–°–¢–û–í–ê–Ø –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ê
 * 
 * –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –•–∞–±—É—Å
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, 
 * –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤.
 */

export interface TestUser {
  id?: string;
  name: string;
  email: string;
  password: string;
  token?: string;
  balance?: number;
  emailVerified?: boolean;
  referralCode?: string;
  referralLink?: string;
}

export interface TestChat {
  id: string;
  model: string;
  title: string;
  messages: TestMessage[];
}

export interface TestMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  tokens?: number;
  cost?: number;
}

export interface TestTransaction {
  id: string;
  amount: number;
  currency: string;
  type: 'deposit' | 'withdrawal' | 'ai_usage' | 'referral_bonus';
  status: 'pending' | 'completed' | 'failed';
  description: string;
  timestamp: Date;
}

export interface TestAIModel {
  id: string;
  name: string;
  provider: string;
  costPer1000Tokens: number;
  maxTokens: number;
  supportedFeatures: string[];
}

export interface TestPayment {
  operationId: string;
  amount: number;
  currency: string;
  status: 'success' | 'pending' | 'failed';
  paymentMethod: string;
}

/**
 * üéØ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –¢–ï–°–¢–û–í–û–ô –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
 */
export class TestInfrastructure {
  private baseUrls = {
    auth: 'http://localhost:3001',
    billing: 'http://localhost:3002', 
    chat: 'http://localhost:3003',
    gateway: 'http://localhost:3000',
    referral: 'http://localhost:3004'
  };

  private createdUsers: TestUser[] = [];
  private createdChats: TestChat[] = [];

  // ========================================
  // –£–¢–ò–õ–ò–¢–´ –î–õ–Ø HTTP –ó–ê–ü–†–û–°–û–í
  // ========================================

  private async makeRequest(
    url: string, 
    options: RequestInit = {}
  ): Promise<Response> {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    return response;
  }

  async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // ========================================
  // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
  // ========================================

  async registerUser(userData: Omit<TestUser, 'id' | 'token'>): Promise<TestUser> {
    const user: TestUser = { ...userData };
    
    try {
      const response = await this.makeRequest(`${this.baseUrls.auth}/api/register`, {
        method: 'POST',
        body: JSON.stringify({
          name: user.name,
          email: user.email,
          password: user.password
        })
      });

      const result = await response.json() as any;
      user.id = result.user?.id;
      user.emailVerified = result.user?.emailVerified || false;
      
      this.createdUsers.push(user);
      return user;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
      user.id = `mock_${Date.now()}`;
      user.emailVerified = false;
      this.createdUsers.push(user);
      return user;
    }
  }

  async verifyEmail(user: TestUser, code: string): Promise<boolean> {
    if (!user.id) return false;

    try {
      const response = await this.makeRequest(`${this.baseUrls.auth}/api/verify-email`, {
        method: 'POST',
        body: JSON.stringify({
          userId: user.id,
          code: code
        })
      });

      user.emailVerified = true;
      return true;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –¥–ª—è ${user.email}`);
      user.emailVerified = true;
      return true;
    }
  }

  async loginUser(email: string, password: string): Promise<string> {
    const user = this.createdUsers.find(u => u.email === email);
    
    try {
      const response = await this.makeRequest(`${this.baseUrls.auth}/api/login`, {
        method: 'POST',
        body: JSON.stringify({ email, password })
      });

      const result = await response.json() as any;
      if (user) {
        user.token = result.token;
      }
      
      return result.token;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è ${email}`);
      const token = `mock_token_${Date.now()}`;
      if (user) {
        user.token = token;
      }
      return token;
    }
  }

  // ========================================
  // –ë–ò–õ–õ–ò–ù–ì –ò –ü–õ–ê–¢–ï–ñ–ò
  // ========================================

  async getBalance(token: string): Promise<number> {
    try {
      const response = await this.makeRequest(`${this.baseUrls.billing}/api/balance`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const result = await response.json() as any;
      const user = this.createdUsers.find(u => u.token === token);
      if (user) {
        user.balance = result.MNT || 0;
      }
      
      return result.MNT || 0;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –±–∞–ª–∞–Ω—Å: 500 MNT`);
      const user = this.createdUsers.find(u => u.token === token);
      if (user) {
        user.balance = 500;
      }
      return 500;
    }
  }

  async chargeForAI(
    token: string, 
    amount: number, 
    model: string
  ): Promise<boolean> {
    try {
      await this.makeRequest(`${this.baseUrls.billing}/api/charge`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: JSON.stringify({
          amount,
          currency: 'MNT',
          description: `AI –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ ${model}`
        })
      });

      return true;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock —Å–ø–∏—Å–∞–Ω–∏–µ ${amount} MNT –∑–∞ AI`);
      return true;
    }
  }

  async processPayment(
    token: string,
    amount: number,
    paymentMethod: string = 'yumoney'
  ): Promise<TestPayment> {
    try {
      const response = await this.makeRequest(`${this.baseUrls.billing}/api/payment`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: JSON.stringify({
          amount,
          currency: 'RUB',
          method: paymentMethod
        })
      });

      const paymentData = await response.json() as any;
      
      return {
        operationId: paymentData.operationId,
        amount,
        currency: 'RUB',
        status: 'success',
        paymentMethod
      };
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –ø–ª–∞—Ç–µ–∂ ${amount} RUB —á–µ—Ä–µ–∑ ${paymentMethod}`);
      return {
        operationId: `mock_${Date.now()}`,
        amount,
        currency: 'RUB', 
        status: 'success',
        paymentMethod
      };
    }
  }

  async getTransactionHistory(token: string): Promise<TestTransaction[]> {
    try {
      const response = await this.makeRequest(`${this.baseUrls.billing}/api/transactions`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      return await response.json() as TestTransaction[];
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      return [
        {
          id: 'mock_1',
          amount: 500,
          currency: 'MNT',
          type: 'deposit',
          status: 'completed',
          description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å',
          timestamp: new Date()
        }
      ];
    }
  }

  // ========================================
  // AI –°–ï–†–í–ò–°–´ –ò –ß–ê–¢–´
  // ========================================

  async getAvailableModels(): Promise<TestAIModel[]> {
    try {
      const response = await this.makeRequest(`${this.baseUrls.chat}/api/models`);
      return await response.json() as TestAIModel[];
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock —Å–ø–∏—Å–æ–∫ AI –º–æ–¥–µ–ª–µ–π`);
      return [
        {
          id: 'gpt-3.5-turbo',
          name: 'GPT-3.5 Turbo',
          provider: 'OpenAI',
          costPer1000Tokens: 100,
          maxTokens: 4096,
          supportedFeatures: ['text', 'chat']
        },
        {
          id: 'claude-3-haiku',
          name: 'Claude 3 Haiku',
          provider: 'Anthropic',
          costPer1000Tokens: 80,
          maxTokens: 200000,
          supportedFeatures: ['text', 'chat']
        }
      ];
    }
  }

  async createChat(
    token: string,
    model: string,
    title: string = '–ù–æ–≤—ã–π —á–∞—Ç'
  ): Promise<TestChat> {
    const chat: TestChat = {
      id: `chat_${Date.now()}`,
      model,
      title,
      messages: []
    };

    try {
      const response = await this.makeRequest(`${this.baseUrls.chat}/api/chats`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: JSON.stringify({ model, title })
      });

      const result = await response.json() as any;
      chat.id = result.id || chat.id;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ —Å ${model}`);
    }

    this.createdChats.push(chat);
    return chat;
  }

  async sendMessage(
    token: string,
    chatId: string,
    content: string
  ): Promise<TestMessage> {
    const message: TestMessage = {
      id: `msg_${Date.now()}`,
      role: 'user',
      content,
      timestamp: new Date()
    };

    try {
      const response = await this.makeRequest(`${this.baseUrls.chat}/api/chats/${chatId}/messages`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: JSON.stringify({ content })
      });

      const result = await response.json() as any;
      message.tokens = result.tokens;
      message.cost = result.cost;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç`);
      message.tokens = 50;
      message.cost = 5; // 5 MNT
    }

    const chat = this.createdChats.find(c => c.id === chatId);
    if (chat) {
      chat.messages.push(message);
    }

    return message;
  }

  // ========================================
  // –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê
  // ========================================

  async generateReferralLink(token: string): Promise<string> {
    const user = this.createdUsers.find(u => u.token === token);
    
    try {
      const response = await this.makeRequest(`${this.baseUrls.referral}/api/generate`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` }
      });

      const result = await response.json() as any;
      if (user) {
        user.referralCode = result.code;
      }
      
      return result.link;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏`);
      const code = `REF${Date.now()}`;
      const link = `https://habus.ai/ref/${code}`;
      
      if (user) {
        user.referralCode = code;
        user.referralLink = link;
      }
      
      return link;
    }
  }

  async registerUserByReferral(
    referralCode: string,
    userData: Omit<TestUser, 'id' | 'token'>
  ): Promise<TestUser> {
    try {
      const response = await this.makeRequest(`${this.baseUrls.auth}/api/register`, {
        method: 'POST',
        body: JSON.stringify({
          ...userData,
          referralCode
        })
      });

      const result = await response.json() as any;
      const user: TestUser = {
        ...userData,
        id: result.user?.id,
        emailVerified: false
      };
      
      this.createdUsers.push(user);
      return user;
    } catch (error) {
      console.log(`‚ö†Ô∏è Mock —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`);
      const user: TestUser = {
        ...userData,
        id: `ref_${Date.now()}`,
        emailVerified: false
      };
      
      this.createdUsers.push(user);
      return user;
    }
  }

  // ========================================
  // –û–ß–ò–°–¢–ö–ê –ò –£–¢–ò–õ–ò–¢–´
  // ========================================

  async cleanup(): Promise<void> {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of this.createdUsers) {
      try {
        if (user.token) {
          await this.makeRequest(`${this.baseUrls.auth}/api/cleanup/${user.id}`, {
            method: 'DELETE',
            headers: { Authorization: `Bearer ${user.token}` }
          });
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    for (const chat of this.createdChats) {
      try {
        await this.makeRequest(`${this.baseUrls.chat}/api/chats/${chat.id}`, {
          method: 'DELETE'
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
      }
    }

    this.createdUsers = [];
    this.createdChats = [];
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // ========================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ========================================

  getCreatedUsers(): TestUser[] {
    return [...this.createdUsers];
  }

  getCreatedChats(): TestChat[] {
    return [...this.createdChats];
  }

  findUserByEmail(email: string): TestUser | undefined {
    return this.createdUsers.find(u => u.email === email);
  }

  async waitForCondition(
    condition: () => Promise<boolean>,
    timeoutMs: number = 10000,
    intervalMs: number = 500
  ): Promise<boolean> {
    const startTime = Date.now();
    
    while (Date.now() - startTime < timeoutMs) {
      if (await condition()) {
        return true;
      }
      await this.sleep(intervalMs);
    }
    
    return false;
  }

  generateTestEmail(): string {
    return `test${Date.now()}@example.com`;
  }

  generateTestUser(name?: string): Omit<TestUser, 'id' | 'token'> {
    return {
      name: name || `–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${Date.now()}`,
      email: this.generateTestEmail(),
      password: 'TestPass123!'
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const testInfrastructure = new TestInfrastructure();