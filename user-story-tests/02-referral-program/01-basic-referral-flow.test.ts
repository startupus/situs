import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../helpers/TestHelpers';

/**
 * üß™ USER STORY: –ë–∞–∑–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤
 *
 * –°–¶–ï–ù–ê–†–ò–ô –∏–∑ –¢–ó:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ª—É—á–∞–µ—Ç 500‚ÇΩ –±–æ–Ω—É—Å–Ω—ã—Ö
 * 2. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ò–ò —á–µ—Ä–µ–∑ OpenRouter
 * 3. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫ –∞–∫–∫–∞—É–Ω—Ç—É –∫–æ–ª–ª–µ–≥—É, —Å–æ–∑–¥–∞–≤–∞—è —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
 * 4. –ö–æ–ª–ª–µ–≥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ OpenRouter
 * 5. –ö–æ–ª–ª–µ–≥–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–∞ 5000‚ÇΩ
 * 6. –ü–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏—Ö–æ–¥–∏—Ç 10% –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ (500‚ÇΩ)
 */
class BasicReferralFlowTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üîó Basic Referral Flow', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should complete full referral flow with bonus calculation', async () => {
        // üë§ –≠–¢–ê–ü 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—Ñ–µ—Ä–µ—Ä)
        const referrer = await this.createTestUser('ivan', {
          email: 'ivan@company.com',
          phone: '+7999111222',
        });

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        let referrerBalance = await ServiceClients.getBalance(referrer.id);
        expect(referrerBalance.bonusBalance).toBe(TEST_CONSTANTS.REGISTRATION_BONUS);

        console.log(
          `‚úÖ Referrer registered: ${referrer.email} with ${TEST_CONSTANTS.REGISTRATION_BONUS}‚ÇΩ bonus`,
        );

        // ü§ñ –≠–¢–ê–ü 2: –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç AI
        const aiRequest1 = await ServiceClients.makeAIRequest(
          referrer.id,
          'gpt-4',
          '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏',
        );

        expect(aiRequest1.userId).toBe(referrer.id);
        expect(aiRequest1.baseCost).toBeGreaterThan(0);

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        await ValidationHelpers.waitForTransactionProcessing();
        referrerBalance = await ServiceClients.getBalance(referrer.id);
        const expectedBalanceAfterAI = TEST_CONSTANTS.REGISTRATION_BONUS - aiRequest1.finalCost;
        ValidationHelpers.validateBalance(referrerBalance.bonusBalance, expectedBalanceAfterAI);

        console.log(`‚úÖ AI request processed: -${aiRequest1.finalCost}‚ÇΩ`);

        // üîó –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        const referralLink = await ServiceClients.createReferralLink(referrer.id);
        expect(referralLink).toMatch(/^https:\/\/platform\.com\/ref\//);

        console.log(`‚úÖ Referral link created: ${referralLink}`);

        // üë• –≠–¢–ê–ü 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–≥–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        const referralCode = referralLink.split('/').pop()!;
        const colleague = await ServiceClients.registerByReferral(referralCode, {
          email: 'colleague@company.com',
          phone: '+7999333444',
        });

        expect(colleague.referredBy).toBe(referralCode);
        expect(colleague.bonusBalance).toBe(TEST_CONSTANTS.REGISTRATION_BONUS);

        console.log(`‚úÖ Colleague registered via referral: ${colleague.email}`);

        // ü§ñ –≠–¢–ê–ü 5: –ö–æ–ª–ª–µ–≥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç AI
        const aiRequest2 = await ServiceClients.makeAIRequest(
          colleague.id,
          'gpt-3.5-turbo',
          '–ü–æ–º–æ–≥–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö',
        );

        expect(aiRequest2.userId).toBe(colleague.id);

        console.log(`‚úÖ Colleague tested AI: ${aiRequest2.model}`);

        // üèóÔ∏è –≠–¢–ê–ü 6: –ö–æ–ª–ª–µ–≥–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–µ–∫—Ç
        const colleagueProject = await this.createTestProject('colleague', {
          name: 'Independent Analytics Project',
          markup: 25, // 25% –Ω–∞–¥—Ü–µ–Ω–∫–∞
        });

        expect(colleagueProject.ownerId).toBe(colleague.id);

        console.log(`‚úÖ Independent project created: ${colleagueProject.name}`);

        // üí≥ –≠–¢–ê–ü 7: –ö–æ–ª–ª–µ–≥–∞ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 5000‚ÇΩ
        const topupAmount = 5000;
        const topupTransaction = await ServiceClients.topupBalance(
          colleague.id,
          topupAmount,
          'card',
        );

        expect(topupTransaction.amount).toBe(topupAmount);
        expect(topupTransaction.type).toBe('topup');

        // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await ValidationHelpers.waitForTransactionProcessing();

        console.log(`‚úÖ Colleague topped up: ${topupAmount}‚ÇΩ`);

        // üí∞ –≠–¢–ê–ü 8: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ (10% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        const expectedReferralBonus = topupAmount * (TEST_CONSTANTS.REFERRAL_COMMISSION_RATE / 100);

        const referralCommissions = await ServiceClients.getCommissionHistory(referrer.id);
        const topupCommission = referralCommissions.find(
          (c) =>
            c.type === 'referral' &&
            c.fromUserId === colleague.id &&
            c.amount === expectedReferralBonus,
        );

        expect(topupCommission).toBeDefined();
        ValidationHelpers.validateCommission(topupCommission!, {
          userId: referrer.id,
          fromUserId: colleague.id,
          type: 'referral',
          amount: expectedReferralBonus,
          rate: TEST_CONSTANTS.REFERRAL_COMMISSION_RATE,
        });

        console.log(
          `‚úÖ Referral bonus calculated: ${expectedReferralBonus}‚ÇΩ (${TEST_CONSTANTS.REFERRAL_COMMISSION_RATE}% of ${topupAmount}‚ÇΩ)`,
        );

        // üìä –≠–¢–ê–ü 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        const finalReferrerBalance = await ServiceClients.getBalance(referrer.id);
        const finalColleagueBalance = await ServiceClients.getBalance(colleague.id);

        // –†–µ—Ñ–µ—Ä–µ—Ä –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é
        const expectedReferrerTotal = referrerBalance.balance + expectedReferralBonus;
        ValidationHelpers.validateBalance(finalReferrerBalance.balance, expectedReferrerTotal);

        // –ö–æ–ª–ª–µ–≥–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        ValidationHelpers.validateBalance(finalColleagueBalance.balance, topupAmount);

        console.log(
          `‚úÖ Final balances - Referrer: ${finalReferrerBalance.balance}‚ÇΩ, Colleague: ${finalColleagueBalance.balance}‚ÇΩ`,
        );

        // üìà –≠–¢–ê–ü 10: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        const referrerReport = await ServiceClients.generateReport(referrer.id, 'user', {
          from: new Date(Date.now() - 24 * 60 * 60 * 1000),
          to: new Date(),
        });

        expect(referrerReport.commissions).toBeGreaterThanOrEqual(expectedReferralBonus);

        console.log(`üéâ FULL REFERRAL FLOW COMPLETED SUCCESSFULLY`);
        console.log(`üí∞ Total referral earnings: ${expectedReferralBonus}‚ÇΩ`);
        console.log(`üë• Referrals brought: 1 user with ${topupAmount}‚ÇΩ topup`);
      });

      await it('should handle multiple referral levels', async () => {
        // üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: A -> B -> C
        const userA = await this.createTestUser('userA');

        // A —Å–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const linkA = await ServiceClients.createReferralLink(userA.id);
        const codeA = linkA.split('/').pop()!;

        // B —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ A
        const userB = await ServiceClients.registerByReferral(codeA, {
          email: 'userB@test.com',
        });

        // B —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const linkB = await ServiceClients.createReferralLink(userB.id);
        const codeB = linkB.split('/').pop()!;

        // C —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ B
        const userC = await ServiceClients.registerByReferral(codeB, {
          email: 'userC@test.com',
        });

        // üí≥ C –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å
        const topupAmount = 3000;
        await ServiceClients.topupBalance(userC.id, topupAmount, 'card');
        await ValidationHelpers.waitForTransactionProcessing();

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
        const commissionsA = await ServiceClients.getCommissionHistory(userA.id);
        const commissionsB = await ServiceClients.getCommissionHistory(userB.id);

        // B –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é –∫–æ–º–∏—Å—Å–∏—é (10%)
        const directCommission = topupAmount * 0.1;
        const directCommissionB = commissionsB.find(
          (c) => c.fromUserId === userC.id && c.type === 'referral',
        );
        expect(directCommissionB?.amount).toBe(directCommission);

        // A –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        // –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MLM —Å–∏—Å—Ç–µ–º—ã

        console.log(
          `‚úÖ Multi-level referral: B earned ${directCommission}‚ÇΩ from C's ${topupAmount}‚ÇΩ topup`,
        );
      });

      await it('should prevent self-referrals and fraud', async () => {
        // üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await this.createTestUser('fraudUser');

        // üîó –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const referralLink = await ServiceClients.createReferralLink(user.id);
        const referralCode = referralLink.split('/').pop()!;

        // üö´ –ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
        const attemptSelfReferral = async () => {
          await ServiceClients.registerByReferral(referralCode, {
            email: user.email, // —Ç–æ—Ç –∂–µ email
            phone: user.phone, // —Ç–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω
          });
        };

        await expect(attemptSelfReferral()).rejects.toThrow('Self-referral not allowed');

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã
        const commissions = await ServiceClients.getCommissionHistory(user.id);
        const selfCommissions = commissions.filter((c) => c.fromUserId === user.id);
        expect(selfCommissions).toHaveLength(0);

        console.log(`‚úÖ Self-referral fraud prevention works`);
      });

      await it('should calculate referral bonuses correctly with different topup amounts', async () => {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        const testCases = [
          { amount: 1000, expectedBonus: 100 }, // 10% –æ—Ç 1000
          { amount: 10000, expectedBonus: 1000 }, // 10% –æ—Ç 10000
          { amount: 500, expectedBonus: 50 }, // 10% –æ—Ç 500
        ];

        for (const testCase of testCases) {
          // üë§ –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
          const referrer = await this.createTestUser(`referrer_${testCase.amount}`);
          const referralLink = await ServiceClients.createReferralLink(referrer.id);
          const referralCode = referralLink.split('/').pop()!;

          const referral = await ServiceClients.registerByReferral(referralCode, {
            email: `referral_${testCase.amount}@test.com`,
          });

          // üí≥ –†–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å
          await ServiceClients.topupBalance(referral.id, testCase.amount, 'card');
          await ValidationHelpers.waitForTransactionProcessing();

          // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
          const commissions = await ServiceClients.getCommissionHistory(referrer.id);
          const commission = commissions.find((c) => c.fromUserId === referral.id);

          expect(commission?.amount).toBe(testCase.expectedBonus);

          console.log(`‚úÖ Topup ${testCase.amount}‚ÇΩ -> Bonus ${testCase.expectedBonus}‚ÇΩ`);
        }
      });
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
export default async function runBasicReferralFlowTest(): Promise<void> {
  const test = new BasicReferralFlowTest();
  await test.runTest();
}
