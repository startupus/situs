import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../helpers/TestHelpers';

/**
 * üß™ USER STORY: AI —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –±–∏–ª–ª–∏–Ω–≥
 *
 * –°–¶–ï–ù–ê–†–ò–ô:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ (GPT-4, Claude, Gemini)
 * 2. –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω—ã
 * 3. –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å
 * 4. –°–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
 * 5. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
 */
class AIPricingBillingTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('ü§ñ AI Pricing and Billing', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should correctly bill different AI models with accurate pricing', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        const user = await this.createTestUser('ai_tester', {
          email: 'tester@ai.com',
        });

        // üí≥ –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        await ServiceClients.topupBalance(user.id, 10000, 'card');
        await ValidationHelpers.waitForTransactionProcessing();

        // ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        const aiModels = [
          {
            provider: 'openai',
            model: 'gpt-4',
            inputTokenPrice: 0.03, // $0.03 per 1K tokens
            outputTokenPrice: 0.06, // $0.06 per 1K tokens
            inputTokens: 1000,
            outputTokens: 500,
            prompt: '–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –±–∏–∑–Ω–µ—Å–∞',
          },
          {
            provider: 'anthropic',
            model: 'claude-3-sonnet',
            inputTokenPrice: 0.015, // $0.015 per 1K tokens
            outputTokenPrice: 0.075, // $0.075 per 1K tokens
            inputTokens: 1200,
            outputTokens: 800,
            prompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          },
          {
            provider: 'google',
            model: 'gemini-pro',
            inputTokenPrice: 0.001, // $0.001 per 1K tokens
            outputTokenPrice: 0.002, // $0.002 per 1K tokens
            inputTokens: 1500,
            outputTokens: 1000,
            prompt: '–ü–æ–¥—Å–æ–±—Ä–∞—Ç—å –∏–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞',
          },
          {
            provider: 'openrouter',
            model: 'deepseek-coder',
            inputTokenPrice: 0.0002, // $0.0002 per 1K tokens
            outputTokenPrice: 0.0008, // $0.0008 per 1K tokens
            inputTokens: 2000,
            outputTokens: 1500,
            prompt: '–ù–∞–ø–∏—à–∏ –∫–æ–¥ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
          },
        ];

        const aiResults: any[] = [];
        let totalExpectedCost = 0;

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for (const modelData of aiModels) {
          const aiRequest = await ServiceClients.makeAIRequest(
            user.id,
            modelData.model,
            modelData.prompt,
          );

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
          const inputCost = (modelData.inputTokens / 1000) * modelData.inputTokenPrice;
          const outputCost = (modelData.outputTokens / 1000) * modelData.outputTokenPrice;
          const baseCost = inputCost + outputCost;
          const serviceCost = baseCost * (1 + TEST_CONSTANTS.SERVICE_MARKUP / 100);

          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
          aiRequest.inputTokens = modelData.inputTokens;
          aiRequest.outputTokens = modelData.outputTokens;
          aiRequest.baseCost = baseCost;
          aiRequest.serviceCost = serviceCost;
          aiRequest.finalCost = serviceCost; // –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –Ω–∞–¥—Ü–µ–Ω–∫–∏
          aiRequest.provider = modelData.provider;

          aiResults.push({
            ...aiRequest,
            expectedBaseCost: baseCost,
            expectedServiceCost: serviceCost,
          });

          totalExpectedCost += serviceCost;

          console.log(`‚úÖ ${modelData.provider}/${modelData.model}:`);
          console.log(
            `   Input: ${modelData.inputTokens} tokens x $${modelData.inputTokenPrice}/1K = $${inputCost.toFixed(4)}`,
          );
          console.log(
            `   Output: ${modelData.outputTokens} tokens x $${modelData.outputTokenPrice}/1K = $${outputCost.toFixed(4)}`,
          );
          console.log(`   Base cost: $${baseCost.toFixed(4)}`);
          console.log(
            `   Service cost (+${TEST_CONSTANTS.SERVICE_MARKUP}%): $${serviceCost.toFixed(4)}`,
          );
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        const finalBalance = await ServiceClients.getBalance(user.id);
        const expectedFinalBalance = 10000 - totalExpectedCost;
        ValidationHelpers.validateBalance(finalBalance.balance, expectedFinalBalance);

        console.log(`üí∞ Total AI spending: $${totalExpectedCost.toFixed(4)}`);
        console.log(`üí∞ Remaining balance: $${finalBalance.balance.toFixed(4)}`);

        // üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const transactions = await ServiceClients.getTransactionHistory(user.id);
        const aiTransactions = transactions.filter((t) => t.type === 'spend');

        expect(aiTransactions.length).toBe(aiModels.length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        for (let i = 0; i < aiResults.length; i++) {
          const result = aiResults[i];
          const transaction = aiTransactions[i];

          ValidationHelpers.validateTransaction(transaction, {
            userId: user.id,
            type: 'spend',
            amount: result.expectedServiceCost,
          });
        }

        console.log(`‚úÖ All ${aiResults.length} AI transactions validated`);
      });

      await it('should handle insufficient balance gracefully', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–∞–ª—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        const user = await this.createTestUser('poor_user');

        // üí≥ –ü–æ–ø–æ–ª–Ω—è–µ–º –æ—á–µ–Ω—å –º–∞–ª–æ
        await ServiceClients.topupBalance(user.id, 0.5, 'card'); // $0.50
        await ValidationHelpers.waitForTransactionProcessing();

        // ü§ñ –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –∑–∞–ø—Ä–æ—Å
        const expensiveRequest = async () => {
          await ServiceClients.makeAIRequest(
            user.id,
            'gpt-4',
            '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–∏–º–µ—Ä–æ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π',
          );
        };

        // ‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
        await expect(expensiveRequest()).rejects.toThrow('Insufficient balance');

        // üí∞ –ë–∞–ª–∞–Ω—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        const balance = await ServiceClients.getBalance(user.id);
        expect(balance.balance).toBe(0.5);

        console.log(`‚úÖ Insufficient balance protection works`);
      });

      await it('should prioritize bonus balance over main balance', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–æ–Ω—É—Å–Ω—ã–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        const user = await this.createTestUser('bonus_user');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–∞ –±–∞–ª–∞–Ω—Å–∞
        user.bonusBalance = 100; // –±–æ–Ω—É—Å–Ω—ã–µ
        user.balance = 200; // –æ—Å–Ω–æ–≤–Ω—ã–µ

        // ü§ñ –î–µ–ª–∞–µ–º AI –∑–∞–ø—Ä–æ—Å –Ω–∞ $50
        const aiRequest = await ServiceClients.makeAIRequest(
          user.id,
          'gpt-3.5-turbo',
          '–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å',
        );

        const cost = 50;
        aiRequest.finalCost = cost;

        await ValidationHelpers.waitForTransactionProcessing();

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç—è—Ç—Å—è –±–æ–Ω—É—Å—ã
        const balance = await ServiceClients.getBalance(user.id);
        expect(balance.bonusBalance).toBe(50); // 100 - 50
        expect(balance.balance).toBe(200); // –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

        console.log(
          `‚úÖ Bonus balance prioritization works: bonus ${balance.bonusBalance}, main ${balance.balance}`,
        );
      });

      await it('should handle mixed balance usage', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–∞–ª—ã–º –±–æ–Ω—É—Å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        const user = await this.createTestUser('mixed_user');

        user.bonusBalance = 30; // –±–æ–Ω—É—Å–Ω—ã–µ
        user.balance = 100; // –æ—Å–Ω–æ–≤–Ω—ã–µ

        // ü§ñ –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ $50 (–±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤)
        const aiRequest = await ServiceClients.makeAIRequest(
          user.id,
          'gpt-4',
          '–ó–∞–ø—Ä–æ—Å –¥–æ—Ä–æ–∂–µ –±–æ–Ω—É—Å–æ–≤',
        );

        const cost = 50;
        aiRequest.finalCost = cost;

        await ValidationHelpers.waitForTransactionProcessing();

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–∞–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        const balance = await ServiceClients.getBalance(user.id);
        expect(balance.bonusBalance).toBe(0); // –ø–æ—Ç—Ä–∞—á–µ–Ω—ã –≤—Å–µ –±–æ–Ω—É—Å—ã (30)
        expect(balance.balance).toBe(80); // –ø–æ—Ç—Ä–∞—á–µ–Ω–æ 20 —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ (100 - 20)

        const transactions = await ServiceClients.getTransactionHistory(user.id);
        const spendTransactions = transactions.filter((t) => t.type === 'spend');

        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –±–æ–Ω—É—Å–Ω–∞—è –∏ –æ—Å–Ω–æ–≤–Ω–∞—è
        expect(spendTransactions.length).toBe(2);

        console.log(`‚úÖ Mixed balance usage: bonus spent ${30}, main spent ${20}`);
      });

      await it('should track AI usage analytics by provider', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const user = await this.createTestUser('analytics_user');
        await ServiceClients.topupBalance(user.id, 1000, 'card');

        // ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —Ä–∞–∑–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é
        const providerUsage = [
          { provider: 'openai', requests: 5 },
          { provider: 'anthropic', requests: 3 },
          { provider: 'google', requests: 2 },
          { provider: 'openrouter', requests: 1 },
        ];

        for (const { provider, requests } of providerUsage) {
          for (let i = 0; i < requests; i++) {
            await ServiceClients.makeAIRequest(
              user.id,
              `${provider}-model`,
              `Test request ${i + 1} for ${provider}`,
            );
          }
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const report = await ServiceClients.generateReport(user.id, 'user', {
          from: new Date(Date.now() - 24 * 60 * 60 * 1000),
          to: new Date(),
        });

        // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—á—Ç–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        const totalRequests = providerUsage.reduce((sum, p) => sum + p.requests, 0);
        expect(report.transactions).toBeGreaterThanOrEqual(totalRequests);

        console.log(`üìä AI Usage Analytics:`);
        console.log(`   Total requests: ${totalRequests}`);
        console.log(`   OpenAI: ${providerUsage[0].requests} requests`);
        console.log(`   Anthropic: ${providerUsage[1].requests} requests`);
        console.log(`   Google: ${providerUsage[2].requests} requests`);
        console.log(`   OpenRouter: ${providerUsage[3].requests} requests`);
      });

      await it('should apply currency conversion correctly', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä—É–±–ª—è—Ö
        const user = await this.createTestUser('rub_user');
        await ServiceClients.topupBalance(user.id, 100000, 'card'); // 100,000 ‚ÇΩ

        // ü§ñ AI –∑–∞–ø—Ä–æ—Å —Å –¥–æ–ª–ª–∞—Ä–æ–≤–æ–π —Ü–µ–Ω–æ–π
        const aiRequest = await ServiceClients.makeAIRequest(
          user.id,
          'gpt-4',
          'Request with currency conversion',
        );

        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –∫—É—Ä—Å 1 USD = 75 RUB
        const usdCost = 10; // $10
        const rubCost = usdCost * 75; // 750‚ÇΩ
        const exchangeRate = 75;

        aiRequest.baseCost = usdCost;
        aiRequest.finalCost = rubCost;

        await ValidationHelpers.waitForTransactionProcessing();

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä—É–±–ª—è—Ö
        const balance = await ServiceClients.getBalance(user.id);
        const expectedBalance = 100000 - rubCost;
        ValidationHelpers.validateBalance(balance.balance, expectedBalance);

        console.log(`üí± Currency conversion: $${usdCost} ‚Üí ${rubCost}‚ÇΩ (rate: ${exchangeRate})`);
        console.log(`üí∞ Balance after conversion: ${balance.balance}‚ÇΩ`);
      });

      await it('should handle concurrent AI requests correctly', async () => {
        // üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        const user = await this.createTestUser('concurrent_user');
        await ServiceClients.topupBalance(user.id, 1000, 'card');

        // ü§ñ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const concurrentPromises: any[] = [];
        const requestCount = 10;

        for (let i = 0; i < requestCount; i++) {
          concurrentPromises.push(
            ServiceClients.makeAIRequest(user.id, 'gpt-3.5-turbo', `Concurrent request ${i + 1}`),
          );
        }

        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const results = await Promise.all(concurrentPromises);
        await ValidationHelpers.waitForTransactionProcessing();

        // ‚úÖ –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
        expect(results.length).toBe(requestCount);
        results.forEach((result, index) => {
          expect(result.id).toBeDefined();
          expect(result.userId).toBe(user.id);
        });

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactions = await ServiceClients.getTransactionHistory(user.id);
        const aiTransactions = transactions.filter((t) => t.type === 'spend');
        expect(aiTransactions.length).toBe(requestCount);

        // üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–Ω—å—à–µ–Ω
        const balance = await ServiceClients.getBalance(user.id);
        expect(balance.balance).toBeLessThan(1000);

        console.log(`‚úÖ ${requestCount} concurrent AI requests processed successfully`);
        console.log(`üí∞ Final balance: ${balance.balance}`);
      });
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
export default async function runAIPricingBillingTest(): Promise<void> {
  const test = new AIPricingBillingTest();
  await test.runTest();
}
