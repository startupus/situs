import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { TestHelper } from '../helpers/TestHelper';
import { UserService } from '../helpers/UserService';
import { EmailService } from '../helpers/EmailService';
import { BalanceService } from '../helpers/BalanceService';

describe('User Registration with Email Verification', () => {
  let testHelper: TestHelper;
  let userService: UserService;
  let emailService: EmailService;
  let balanceService: BalanceService;

  beforeEach(async () => {
    testHelper = new TestHelper();
    userService = new UserService(testHelper);
    emailService = new EmailService(testHelper);
    balanceService = new BalanceService(testHelper);
    
    await testHelper.setup();
  });

  afterEach(async () => {
    await testHelper.cleanup();
  });

  it('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º', async () => {
    // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email
    const incorrectEmail = 'invalid-email@nonexistent.domain';
    const userData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: incorrectEmail,
      password: 'SecurePassword123!',
      phone: '+79991234567'
    };

    console.log('üîÑ –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º email...');
    const registrationResult = await userService.register(userData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    expect(registrationResult.success).toBe(true);
    expect(registrationResult.user.email).toBe(incorrectEmail);
    expect(registrationResult.user.emailVerified).toBe(false);
    
    const userId = registrationResult.user.id;
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è (–Ω–µ–≤–µ—Ä–Ω—ã–π –¥–æ–º–µ–Ω)
    console.log('üîÑ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ email...');
    const emailStatus = await emailService.checkEmailDelivery(incorrectEmail);
    expect(emailStatus.delivered).toBe(false);
    expect(emailStatus.error).toContain('domain not found');

    // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('üîÑ –®–∞–≥ 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email...');
    const loginAttempt = await userService.login({
      email: incorrectEmail,
      password: userData.password
    });
    
    expect(loginAttempt.success).toBe(false);
    expect(loginAttempt.error).toBe('EMAIL_NOT_VERIFIED');
    expect(loginAttempt.message).toContain('–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email');

    // –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç email –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    console.log('üîÑ –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π...');
    const correctEmail = 'test.user@gmail.com';
    const updateResult = await userService.updateEmail(userId, correctEmail);
    
    expect(updateResult.success).toBe(true);
    expect(updateResult.newEmail).toBe(correctEmail);

    // –®–∞–≥ 5: –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('üîÑ –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    const verificationEmail = await emailService.getLastEmail(correctEmail);
    expect(verificationEmail).toBeDefined();
    expect(verificationEmail.subject).toContain('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email');
    
    const verificationCode = emailService.extractVerificationCode(verificationEmail.body);
    expect(verificationCode).toMatch(/^\d{6}$/); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥

    // –®–∞–≥ 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç email
    console.log('üîÑ –®–∞–≥ 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∫–æ–¥–æ–º...');
    const confirmationResult = await userService.verifyEmail(userId, verificationCode);
    
    expect(confirmationResult.success).toBe(true);
    expect(confirmationResult.message).toContain('Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');

    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ email —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    const user = await userService.getUser(userId);
    expect(user.emailVerified).toBe(true);
    expect(user.emailVerifiedAt).toBeDefined();

    // –®–∞–≥ 8: –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏
    console.log('üîÑ –®–∞–≥ 8: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
    const successfulLogin = await userService.login({
      email: correctEmail,
      password: userData.password
    });
    
    expect(successfulLogin.success).toBe(true);
    expect(successfulLogin.token).toBeDefined();
    expect(successfulLogin.user.id).toBe(userId);

    // –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    console.log('üîÑ –®–∞–≥ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞...');
    const balance = await balanceService.getBalance(userId);
    
    expect(balance.MNT).toBe(500); // 500 –ú–æ–Ω–µ—Ç—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    expect(balance.transactions).toHaveLength(1);
    expect(balance.transactions[0]).toMatchObject({
      type: 'REGISTRATION_BONUS',
      amount: 500,
      currency: 'MNT',
      description: '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
    });

    // –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É welcome email
    console.log('üîÑ –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ welcome email...');
    const welcomeEmail = await emailService.getEmailsByType(correctEmail, 'WELCOME');
    expect(welcomeEmail).toHaveLength(1);
    expect(welcomeEmail[0].subject).toContain('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å');
    expect(welcomeEmail[0].body).toContain('500 –ú–æ–Ω–µ—Ç—É—Å');

    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìß Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${correctEmail}`);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.MNT} –ú–æ–Ω–µ—Ç—É—Å`);
    console.log(`üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã`);
  });

  it('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', async () => {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      name: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'repeat.user@gmail.com',
      password: 'SecurePassword123!'
    };

    const registrationResult = await userService.register(userData);
    const userId = registrationResult.user.id;

    // –ü–µ—Ä–≤—ã–π –∫–æ–¥
    const firstEmail = await emailService.getLastEmail(userData.email);
    const firstCode = emailService.extractVerificationCode(firstEmail.body);

    // –ñ–¥–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    await testHelper.wait(1000);
    
    const resendResult = await userService.resendVerificationCode(userId);
    expect(resendResult.success).toBe(true);

    // –í—Ç–æ—Ä–æ–π –∫–æ–¥
    const secondEmail = await emailService.getLastEmail(userData.email);
    const secondCode = emailService.extractVerificationCode(secondEmail.body);

    // –ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
    expect(firstCode).not.toBe(secondCode);

    // –°—Ç–∞—Ä—ã–π –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    const oldCodeResult = await userService.verifyEmail(userId, firstCode);
    expect(oldCodeResult.success).toBe(false);
    expect(oldCodeResult.error).toBe('CODE_EXPIRED');

    // –ù–æ–≤—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    const newCodeResult = await userService.verifyEmail(userId, secondCode);
    expect(newCodeResult.success).toBe(true);
  });

  it('–ó–∞—â–∏—Ç–∞ –æ—Ç –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', async () => {
    const userData = {
      name: '–ë—Ä—É—Ç—Ñ–æ—Ä—Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'bruteforce.user@gmail.com',
      password: 'SecurePassword123!'
    };

    const registrationResult = await userService.register(userData);
    const userId = registrationResult.user.id;

    // –ü–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–¥–æ–≤
    for (let i = 0; i < 5; i++) {
      const wrongCode = '123456';
      const result = await userService.verifyEmail(userId, wrongCode);
      expect(result.success).toBe(false);
    }

    // –ü–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    const correctEmail = await emailService.getLastEmail(userData.email);
    const correctCode = emailService.extractVerificationCode(correctEmail.body);
    
    const blockedResult = await userService.verifyEmail(userId, correctCode);
    expect(blockedResult.success).toBe(false);
    expect(blockedResult.error).toBe('ACCOUNT_TEMPORARILY_BLOCKED');
    expect(blockedResult.message).toContain('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫');
  });
});