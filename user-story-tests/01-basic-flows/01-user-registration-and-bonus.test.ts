import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../helpers/TestHelpers';

/**
 * üß™ USER STORY: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞
 *
 * –°–¶–ï–ù–ê–†–ò–ô:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ SMS/email
 * 2. –ü–æ–ª—É—á–∞–µ—Ç 500‚ÇΩ –±–æ–Ω—É—Å–Ω—ã—Ö –Ω–∞ —Å—á–µ—Ç
 * 3. –ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
 * 4. –ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ
 */
class UserRegistrationBonusTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üë§ User Registration and Bonus', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should register user and grant registration bonus', async () => {
        // üì± –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
        const newUser = await this.createTestUser('alex', {
          phone: '+7999123456',
          email: 'alex@example.com',
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        expect(newUser.id).toBeDefined();
        expect(newUser.email).toBe('alex@example.com');
        expect(newUser.phone).toBe('+7999123456');
        expect(newUser.isActive).toBe(true);

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        const balance = await ServiceClients.getBalance(newUser.id);
        expect(balance.bonusBalance).toBe(TEST_CONSTANTS.REGISTRATION_BONUS);
        expect(balance.balance).toBe(0); // –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç–æ–π

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–Ω—É—Å–∞
        const transactions = await ServiceClients.getTransactionHistory(newUser.id);
        const bonusTransaction = transactions.find((t) => t.type === 'bonus');

        expect(bonusTransaction).toBeDefined();
        ValidationHelpers.validateTransaction(bonusTransaction!, {
          userId: newUser.id,
          type: 'bonus',
          amount: TEST_CONSTANTS.REGISTRATION_BONUS,
          description: 'Registration bonus',
        });

        console.log(
          `‚úÖ User ${newUser.email} registered with ${TEST_CONSTANTS.REGISTRATION_BONUS}‚ÇΩ bonus`,
        );
      });

      await it('should prevent duplicate registration bonus', async () => {
        // üì± –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const user1 = await this.createTestUser('duplicate1', {
          email: 'duplicate@example.com',
          phone: '+7999123456',
        });

        // üì± –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ–º –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        const attemptDuplicate = async () => {
          await this.createTestUser('duplicate2', {
            email: 'duplicate2@example.com',
            phone: '+7999123456', // —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä
          });
        };

        // ‚úÖ –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        await expect(attemptDuplicate()).rejects.toThrow('Phone number already registered');

        // ‚úÖ –ë–æ–Ω—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        const transactions = await ServiceClients.getTransactionHistory(user1.id);
        const bonusTransactions = transactions.filter((t) => t.type === 'bonus');
        expect(bonusTransactions).toHaveLength(1);
      });

      await it('should handle SMS verification flow', async () => {
        // üì± –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å SMS
        const phoneNumber = '+7999555777';

        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É SMS
        const smsCode = '123456'; // –º–æ–∫-–∫–æ–¥

        // üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const user = await ServiceClients.registerUser({
          phone: phoneNumber,
          email: 'sms-user@example.com',
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        expect(user.phone).toBe(phoneNumber);
        expect(user.isActive).toBe(true);

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å
        const balance = await ServiceClients.getBalance(user.id);
        expect(balance.bonusBalance).toBe(TEST_CONSTANTS.REGISTRATION_BONUS);

        console.log(`‚úÖ SMS registration completed for ${phoneNumber}`);
      });

      await it('should track registration analytics', async () => {
        // üì± –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await Promise.all([
          this.createTestUser('analytics1'),
          this.createTestUser('analytics2'),
          this.createTestUser('analytics3'),
        ]);

        // üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
        const analyticsReport = await ServiceClients.generateReport('admin', 'admin', {
          from: new Date(Date.now() - 24 * 60 * 60 * 1000), // –∑–∞ —Å—É—Ç–∫–∏
          to: new Date(),
        });

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        expect(analyticsReport.users).toBeGreaterThanOrEqual(3);
        expect(analyticsReport.transactions).toBeGreaterThanOrEqual(3); // –±–æ–Ω—É—Å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        // üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤
        const totalBonuses = users.length * TEST_CONSTANTS.REGISTRATION_BONUS;
        // –í –æ—Ç—á–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤—ã–¥–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã

        console.log(`‚úÖ Registration analytics: ${users.length} users, ${totalBonuses}‚ÇΩ bonuses`);
      });
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
export default async function runUserRegistrationBonusTest(): Promise<void> {
  const test = new UserRegistrationBonusTest();
  await test.runTest();
}
