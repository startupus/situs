import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../../helpers/TestHelpers';

/**
 * üß™ USER STORY: SMS Registration ‚Üí Bonus ‚Üí AI Testing ‚Üí Referral Chain
 *
 * –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ SMS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
 * 2. –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 500‚ÇΩ
 * 3. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —á–µ—Ä–µ–∑ OpenRouter (—Ç—Ä–∞—Ç–∏—Ç —á–∞—Å—Ç—å –±–æ–Ω—É—Å–∞)
 * 4. –ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫–æ–ª–ª–µ–≥—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
 * 5. –ö–æ–ª–ª–µ–≥–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø—Ä–æ–µ–∫—Ç
 * 6. –ö–æ–ª–ª–µ–≥–∞ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 5000‚ÇΩ
 * 7. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 10% —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (500‚ÇΩ)
 * 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å—ã
 */
class SmsRegistrationReferralChainTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üì± SMS Registration ‚Üí Bonus ‚Üí AI Testing ‚Üí Referral Chain', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should execute complete SMS registration and referral chain scenario', async () => {
        console.log('\nüöÄ Starting SMS Registration & Referral Chain Test...\n');

        // === –≠–¢–ê–ü 1: SMS –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –° –ë–û–ù–£–°–û–ú ===
        console.log('üì± STEP 1: SMS Registration with Welcome Bonus');

        // –°–∏–º—É–ª–∏—Ä—É–µ–º SMS –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        const phoneNumber = '+79991234567';
        const smsCode = '123456';

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥
        const smsResponse = await ServiceClients.sendSmsCode(phoneNumber);
        expect(smsResponse.success).toBe(true);
        expect(smsResponse.codeId).toBeDefined();

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–¥ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        const user = await ServiceClients.confirmSmsAndRegister(smsResponse.codeId, smsCode, {
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          email: 'ivan.petrov@company.com',
        });

        expect(user.id).toBeDefined();
        expect(user.phone).toBe(phoneNumber);
        expect(user.isPhoneVerified).toBe(true);

        console.log(`‚úÖ User registered: ${user.id} (${user.phone})`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 500‚ÇΩ
        await ValidationHelpers.waitForTransactionProcessing();
        const initialBalance = await ServiceClients.getBalance(user.id);

        expect(initialBalance.bonusBalance).toBe(500);
        expect(initialBalance.balance).toBe(0);

        console.log(`üí∞ Welcome bonus credited: ${initialBalance.bonusBalance}‚ÇΩ`);

        // === –≠–¢–ê–ü 2: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ß–ï–†–ï–ó OPENROUTER ===
        console.log('\nü§ñ STEP 2: AI Testing through OpenRouter');

        const aiTests = [
          {
            model: 'openai/gpt-3.5-turbo',
            prompt: '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–¢',
            expectedCost: 15, // ‚ÇΩ
          },
          {
            model: 'anthropic/claude-3-haiku',
            prompt: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π',
            expectedCost: 25, // ‚ÇΩ
          },
          {
            model: 'google/gemini-pro',
            prompt: '–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏',
            expectedCost: 10, // ‚ÇΩ
          },
        ];

        let totalAiCost = 0;
        for (const test of aiTests) {
          const aiResponse = await ServiceClients.makeAIRequest(user.id, test.model, test.prompt);

          expect(aiResponse.success).toBe(true);
          expect(aiResponse.response).toBeDefined();
          expect(aiResponse.cost).toBeCloseTo(test.expectedCost, 1);

          totalAiCost += test.expectedCost;

          console.log(`‚úÖ AI request to ${test.model}: ${test.expectedCost}‚ÇΩ`);
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ AI —Ç–µ—Å—Ç–æ–≤
        const balanceAfterAI = await ServiceClients.getBalance(user.id);
        const expectedBonusBalance = 500 - totalAiCost;

        expect(balanceAfterAI.bonusBalance).toBe(expectedBonusBalance);
        expect(balanceAfterAI.balance).toBe(0);

        console.log(`üí∞ Balance after AI tests: ${balanceAfterAI.bonusBalance}‚ÇΩ bonus remaining`);

        // === –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ===
        console.log('\nüîó STEP 3: Creating Referral Link');

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        const partner = await ServiceClients.registerPartner(user.id);
        expect(partner.id).toBeDefined();
        expect(partner.userId).toBe(user.id);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const referralLink = await ServiceClients.generateReferralLink(partner.id, {
          utmSource: 'personal',
          description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–ª–ª–µ–≥–∏',
        });

        expect(referralLink.code).toBeDefined();
        expect(referralLink.partnerId).toBe(partner.id);

        console.log(`‚úÖ Referral link created: ${referralLink.code}`);

        // === –≠–¢–ê–ü 4: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–û–õ–õ–ï–ì–ò –ü–û –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ï ===
        console.log('\nüë• STEP 4: Colleague Registration via Referral Link');

        // –ö–æ–ª–ª–µ–≥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
        const colleaguePhone = '+79997654321';
        const colleagueSmsResponse = await ServiceClients.sendSmsCode(colleaguePhone);

        const colleague = await ServiceClients.confirmSmsAndRegister(
          colleagueSmsResponse.codeId,
          '654321',
          {
            name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            email: 'maria.sidorova@company.com',
            referralCode: referralLink.code, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
          },
        );

        expect(colleague.id).toBeDefined();
        expect(colleague.phone).toBe(colleaguePhone);

        console.log(`‚úÖ Colleague registered: ${colleague.id} via referral`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —Ä–µ—Ñ–µ—Ä–∞–ª-–ø–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω–∞
        const referralConnection = await ServiceClients.getReferralConnection(
          partner.id,
          colleague.id,
        );

        expect(referralConnection.referrerId).toBe(user.id);
        expect(referralConnection.referredId).toBe(colleague.id);

        console.log(`‚úÖ Referral connection established`);

        // === –≠–¢–ê–ü 5: –ö–û–õ–õ–ï–ì–ê –°–û–ó–î–ê–ï–¢ –ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –ü–†–û–ï–ö–¢ ===
        console.log('\nüèóÔ∏è STEP 5: Colleague Creates Independent Project');

        const project = await ServiceClients.createProject(colleague.id, {
          name: 'Mobile App Development',
          description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
          type: 'development',
        });

        expect(project.id).toBeDefined();
        expect(project.ownerId).toBe(colleague.id);

        console.log(`‚úÖ Project created: ${project.id} (${project.name})`);

        // === –≠–¢–ê–ü 6: –ö–û–õ–õ–ï–ì–ê –ü–û–ü–û–õ–ù–Ø–ï–¢ –ë–ê–õ–ê–ù–° –ù–ê 5000‚ÇΩ ===
        console.log('\nüí≥ STEP 6: Colleague Deposits 5000‚ÇΩ');

        const depositAmount = 5000;
        const depositResponse = await ServiceClients.topupBalance(
          colleague.id,
          depositAmount,
          'card',
          {
            paymentMethod: 'credit_card',
            currency: 'RUB',
          },
        );

        expect(depositResponse.success).toBe(true);
        expect(depositResponse.amount).toBe(depositAmount);

        await ValidationHelpers.waitForTransactionProcessing();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ–ª–ª–µ–≥–∏
        const colleagueBalance = await ServiceClients.getBalance(colleague.id);
        expect(colleagueBalance.balance).toBe(depositAmount);

        console.log(`‚úÖ Colleague deposited: ${depositAmount}‚ÇΩ`);

        // === –≠–¢–ê–ü 7: –ù–ê–ß–ò–°–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–û–ì–û –ë–û–ù–£–°–ê ===
        console.log('\nüéÅ STEP 7: Referral Bonus Calculation');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 10% —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        const referralBonusRate = 0.1; // 10%
        const expectedReferralBonus = depositAmount * referralBonusRate; // 500‚ÇΩ

        await ValidationHelpers.waitForReferralProcessing();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const finalUserBalance = await ServiceClients.getBalance(user.id);
        const expectedFinalBonusBalance = expectedBonusBalance + expectedReferralBonus;

        expect(finalUserBalance.bonusBalance).toBe(expectedFinalBonusBalance);
        expect(finalUserBalance.balance).toBe(0);

        console.log(`‚úÖ Referral bonus credited: ${expectedReferralBonus}‚ÇΩ`);
        console.log(`üí∞ Final user bonus balance: ${finalUserBalance.bonusBalance}‚ÇΩ`);

        // === –≠–¢–ê–ü 8: –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
        console.log('\nüìä STEP 8: Transaction Validation');

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userTransactions = await ServiceClients.getTransactionHistory(user.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        const welcomeBonusTransaction = userTransactions.find(
          (t) => t.type === 'bonus' && t.subtype === 'welcome',
        );
        expect(welcomeBonusTransaction).toBeDefined();
        expect(welcomeBonusTransaction!.amount).toBe(500);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ AI
        const aiTransactions = userTransactions.filter(
          (t) => t.type === 'spend' && t.subtype === 'ai_request',
        );
        expect(aiTransactions.length).toBe(aiTests.length);

        const totalAiSpent = aiTransactions.reduce((sum, t) => sum + t.amount, 0);
        expect(totalAiSpent).toBe(totalAiCost);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        const referralBonusTransaction = userTransactions.find(
          (t) => t.type === 'bonus' && t.subtype === 'referral',
        );
        expect(referralBonusTransaction).toBeDefined();
        expect(referralBonusTransaction!.amount).toBe(expectedReferralBonus);
        expect(referralBonusTransaction!.relatedEntity).toBe(colleague.id);

        console.log(`‚úÖ All transactions validated:`);
        console.log(`   - Welcome bonus: 500‚ÇΩ`);
        console.log(`   - AI spending: ${totalAiCost}‚ÇΩ`);
        console.log(`   - Referral bonus: ${expectedReferralBonus}‚ÇΩ`);

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ–ª–ª–µ–≥–∏
        const colleagueTransactions = await ServiceClients.getTransactionHistory(colleague.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç –∫–æ–ª–ª–µ–≥–∏
        const depositTransaction = colleagueTransactions.find(
          (t) => t.type === 'deposit' && t.amount === depositAmount,
        );
        expect(depositTransaction).toBeDefined();

        console.log(`‚úÖ Colleague deposit transaction validated: ${depositAmount}‚ÇΩ`);

        // === –≠–¢–ê–ü 9: –ü–†–û–í–ï–†–ö–ê –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò ===
        console.log('\nüìà STEP 9: Partner Analytics Validation');

        const partnerStats = await ServiceClients.getPartnerStats(partner.id);

        expect(partnerStats.totalReferrals).toBe(1);
        expect(partnerStats.totalEarnings).toBe(expectedReferralBonus);
        expect(partnerStats.activeReferrals).toBe(1);

        console.log(`‚úÖ Partner stats validated:`);
        console.log(`   - Total referrals: ${partnerStats.totalReferrals}`);
        console.log(`   - Total earnings: ${partnerStats.totalEarnings}‚ÇΩ`);
        console.log(`   - Active referrals: ${partnerStats.activeReferrals}`);

        // === –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
        console.log('\nüéØ FINAL VALIDATION:');
        console.log(`üë§ Original user (${user.id}):`);
        console.log(`   - Started with: 500‚ÇΩ welcome bonus`);
        console.log(`   - Spent on AI: ${totalAiCost}‚ÇΩ`);
        console.log(`   - Earned referral: ${expectedReferralBonus}‚ÇΩ`);
        console.log(`   - Final balance: ${finalUserBalance.bonusBalance}‚ÇΩ bonus`);
        console.log(`üë• Colleague (${colleague.id}):`);
        console.log(`   - Deposited: ${depositAmount}‚ÇΩ`);
        console.log(`   - Current balance: ${colleagueBalance.balance}‚ÇΩ`);
        console.log(`üîó Referral system:`);
        console.log(`   - Bonus rate: ${referralBonusRate * 100}%`);
        console.log(`   - Bonus amount: ${expectedReferralBonus}‚ÇΩ`);

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        expect(finalUserBalance.bonusBalance).toBe(500 - totalAiCost + expectedReferralBonus);
        expect(colleagueBalance.balance).toBe(depositAmount);

        console.log('\n‚úÖ SMS Registration ‚Üí Referral Chain Test COMPLETED SUCCESSFULLY! üéâ\n');
      });

      await it('should handle referral bonus limits and caps', async () => {
        console.log('\nüîí Testing Referral Bonus Limits...\n');

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const user = await this.createTestUser('power_referrer');
        const partner = await ServiceClients.registerPartner(user.id);
        const referralLink = await ServiceClients.generateReferralLink(partner.id);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const referralDeposits = [
          { amount: 10000, expectedBonus: 1000 }, // 10% –æ—Ç 10,000‚ÇΩ
          { amount: 15000, expectedBonus: 1500 }, // 10% –æ—Ç 15,000‚ÇΩ
          { amount: 50000, expectedBonus: 5000 }, // 10% –æ—Ç 50,000‚ÇΩ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        ];

        let totalExpectedBonus = 0;
        let referralCount = 0;

        for (const deposit of referralDeposits) {
          referralCount++;

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
          const referral = await this.createTestUser(`referral_${referralCount}`);
          await ServiceClients.registerReferral(referral.id, referralLink.code);

          // –†–µ—Ñ–µ—Ä–∞–ª –¥–µ–ª–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç
          await ServiceClients.topupBalance(referral.id, deposit.amount, 'card');

          await ValidationHelpers.waitForReferralProcessing();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π)
          const balance = await ServiceClients.getBalance(user.id);

          // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–∫—Å–∏–º—É–º 2000‚ÇΩ –∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞)
          const maxBonusPerReferral = 2000;
          const actualExpectedBonus = Math.min(deposit.expectedBonus, maxBonusPerReferral);
          totalExpectedBonus += actualExpectedBonus;

          console.log(
            `‚úÖ Referral ${referralCount}: ${deposit.amount}‚ÇΩ ‚Üí ${actualExpectedBonus}‚ÇΩ bonus`,
          );
        }

        const finalBalance = await ServiceClients.getBalance(user.id);

        console.log(`üí∞ Total referral bonus earned: ${finalBalance.bonusBalance}‚ÇΩ`);
        console.log(`üìä Expected total: ${totalExpectedBonus}‚ÇΩ`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª–∏–º–∏—Ç—ã
        expect(finalBalance.bonusBalance).toBeLessThanOrEqual(totalExpectedBonus);
      });

      await it('should track referral source analytics', async () => {
        console.log('\nüìä Testing Referral Source Analytics...\n');

        const user = await this.createTestUser('analytics_referrer');
        const partner = await ServiceClients.registerPartner(user.id);

        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        const referralSources = [
          { utmSource: 'telegram', utmMedium: 'social' },
          { utmSource: 'email', utmMedium: 'newsletter' },
          { utmSource: 'website', utmMedium: 'banner' },
        ];

        const referralLinks = [];
        for (const source of referralSources) {
          const link = await ServiceClients.generateReferralLink(partner.id, source);
          referralLinks.push({ ...link, ...source });
        }

        // –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        for (let i = 0; i < referralLinks.length; i++) {
          const link = referralLinks[i];
          const referral = await this.createTestUser(`source_referral_${i}`);

          await ServiceClients.registerReferral(referral.id, link.code);
          await ServiceClients.topupBalance(referral.id, 1000, 'card');
        }

        await ValidationHelpers.waitForReferralProcessing();

        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        const sourceAnalytics = await ServiceClients.getReferralSourceAnalytics(partner.id);

        expect(sourceAnalytics.sources).toHaveLength(3);

        for (const sourceData of sourceAnalytics.sources) {
          expect(sourceData.referrals).toBe(1);
          expect(sourceData.revenue).toBe(1000);
          expect(sourceData.bonusEarned).toBe(100); // 10%
        }

        console.log(`‚úÖ Source analytics validated for ${referralSources.length} channels`);
      });
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞
export default async function runSmsRegistrationReferralChainTest(): Promise<void> {
  const test = new SmsRegistrationReferralChainTest();
  await test.runTest();
}
