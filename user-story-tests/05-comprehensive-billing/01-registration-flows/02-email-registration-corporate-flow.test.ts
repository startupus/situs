import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { UserStoryTest } from '../../helpers/UserStoryTest';

/**
 * üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ Email
 *
 * –°—Ü–µ–Ω–∞—Ä–∏–π:
 * 1. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ email
 * 2. –ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å 1000‚ÇΩ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ)
 * 3. –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * 4. –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç 300‚ÇΩ –±–æ–Ω—É—Å–∞
 * 5. –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å—ã (GPT-4, Claude-3-Opus)
 * 6. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞
 * 7. –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–∞ 15000‚ÇΩ
 * 8. –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 15% –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å (2250‚ÇΩ)
 * 9. –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å 5% (750‚ÇΩ)
 * 10. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

class EmailRegistrationCorporateFlowTest extends UserStoryTest {
  private corporateUser: any;
  private teamMembers: any[] = [];
  private partner: any;
  private corporateProject: any;
  private partnerProject: any;

  async runTest(): Promise<void> {
    await this.step1_CorporateEmailRegistration();
    await this.step2_ReceiveCorporateBonus();
    await this.step3_CreateTeamMembers();
    await this.step4_TeamMembersBonuses();
    await this.step5_TeamAiTesting();
    await this.step6_InvitePartner();
    await this.step7_PartnerProjectAndDeposit();
    await this.step8_CorporatePartnerBonus();
    await this.step9_TeamCollectiveBonus();
    await this.step10_CorporateActivityReport();
  }

  private async step1_CorporateEmailRegistration(): Promise<void> {
    this.corporateUser = await this.userService.registerUser({
      email: 'corp@bigcompany.com',
      password: 'SecurePass123!',
      accountType: 'corporate',
      companyName: 'Big Tech Corp',
      companySize: 'large',
      industry: 'technology',
    });

    expect(this.corporateUser).toBeDefined();
    expect(this.corporateUser.email).toBe('corp@bigcompany.com');
    expect(this.corporateUser.accountType).toBe('corporate');

    this.logStep('‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ email');
  }

  private async step2_ReceiveCorporateBonus(): Promise<void> {
    // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å 1000‚ÇΩ
    const welcomeBonus = await this.billingService.processWelcomeBonus(this.corporateUser.id, {
      amount: 1000,
      currency: 'RUB',
      type: 'corporate_welcome',
    });

    expect(welcomeBonus.amount).toBe(1000);
    expect(welcomeBonus.currency).toBe('RUB');
    expect(welcomeBonus.type).toBe('corporate_welcome');

    const balance = await this.billingService.getBalance(this.corporateUser.id);
    expect(balance.RUB).toBe(1000);

    this.logStep('‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å 1000‚ÇΩ –∑–∞—á–∏—Å–ª–µ–Ω');
  }

  private async step3_CreateTeamMembers(): Promise<void> {
    const teamEmails = [
      'dev1@bigcompany.com',
      'dev2@bigcompany.com',
      'designer@bigcompany.com',
      'manager@bigcompany.com',
      'analyst@bigcompany.com',
    ];

    for (const email of teamEmails) {
      const member = await this.userService.registerUser({
        email,
        password: 'TeamPass123!',
        invitedBy: this.corporateUser.id,
        teamRole: email.includes('dev')
          ? 'developer'
          : email.includes('designer')
            ? 'designer'
            : email.includes('manager')
              ? 'manager'
              : 'analyst',
      });

      this.teamMembers.push(member);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    const team = await this.userService.createTeam({
      ownerId: this.corporateUser.id,
      name: 'Big Tech Development Team',
      members: this.teamMembers.map((m) => m.id),
    });

    expect(this.teamMembers).toHaveLength(5);
    expect(team.members).toHaveLength(5);

    this.logStep('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–∑ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞');
  }

  private async step4_TeamMembersBonuses(): Promise<void> {
    // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∞–µ—Ç 300‚ÇΩ
    for (const member of this.teamMembers) {
      const teamBonus = await this.billingService.processTeamMemberBonus(member.id, {
        amount: 300,
        currency: 'RUB',
        type: 'team_member_welcome',
      });

      expect(teamBonus.amount).toBe(300);

      const balance = await this.billingService.getBalance(member.id);
      expect(balance.RUB).toBe(300);
    }

    this.logStep('‚úÖ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–∏–ª –±–æ–Ω—É—Å 300‚ÇΩ');
  }

  private async step5_TeamAiTesting(): Promise<void> {
    // –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–º–∏—É–º AI —Å–µ—Ä–≤–∏—Å—ã
    const aiServices = [
      { model: 'gpt-4', provider: 'openai', cost: 0.03 },
      { model: 'claude-3-opus', provider: 'anthropic', cost: 0.015 },
      { model: 'gpt-4-turbo', provider: 'openai', cost: 0.01 },
    ];

    let totalSpent = 0;

    for (const member of this.teamMembers) {
      for (const service of aiServices) {
        const usage = await this.aiService.processUsage({
          userId: member.id,
          model: service.model,
          provider: service.provider,
          tokens: 1000,
          costPerToken: service.cost,
        });

        totalSpent += usage.totalCost;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ AI
    expect(totalSpent).toBeGreaterThan(0);

    this.logStep(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∞ AI —Å–µ—Ä–≤–∏—Å—ã, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.toFixed(2)}‚ÇΩ`);
  }

  private async step6_InvitePartner(): Promise<void> {
    // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞
    const referralLink = await this.userService.generateReferralLink(this.corporateUser.id, {
      type: 'corporate_partner',
      bonusRate: 0.15,
    });

    expect(referralLink).toBeDefined();
    expect(referralLink.bonusRate).toBe(0.15);

    // –ü–∞—Ä—Ç–Ω–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    this.partner = await this.userService.registerUser({
      email: 'partner@techpartner.com',
      password: 'PartnerPass123!',
      referralCode: referralLink.code,
      accountType: 'business',
      companyName: 'Tech Partner LLC',
    });

    expect(this.partner).toBeDefined();
    expect(this.partner.referredBy).toBe(this.corporateUser.id);

    this.logStep('‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
  }

  private async step7_PartnerProjectAndDeposit(): Promise<void> {
    // –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç
    this.partnerProject = await this.projectService.createProject({
      userId: this.partner.id,
      name: 'Partner AI Integration',
      type: 'ai_development',
      budget: 15000,
    });

    expect(this.partnerProject).toBeDefined();

    // –ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ø–æ–ª–Ω—è–µ—Ç —Å—á–µ—Ç –Ω–∞ 15000‚ÇΩ
    const deposit = await this.billingService.processDeposit({
      userId: this.partner.id,
      amount: 15000,
      currency: 'RUB',
      method: 'bank_transfer',
      projectId: this.partnerProject.id,
    });

    expect(deposit.amount).toBe(15000);
    expect(deposit.status).toBe('completed');

    const partnerBalance = await this.billingService.getBalance(this.partner.id);
    expect(partnerBalance.RUB).toBe(15000);

    this.logStep('‚úÖ –ü–∞—Ä—Ç–Ω–µ—Ä —Å–æ–∑–¥–∞–ª –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –Ω–∞ 15000‚ÇΩ');
  }

  private async step8_CorporatePartnerBonus(): Promise<void> {
    // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 15% –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å
    const partnerBonus = await this.billingService.processReferralBonus({
      referrerId: this.corporateUser.id,
      referredUserId: this.partner.id,
      transactionAmount: 15000,
      bonusRate: 0.15,
      type: 'corporate_partner_bonus',
    });

    expect(partnerBonus.amount).toBe(2250); // 15% –æ—Ç 15000‚ÇΩ
    expect(partnerBonus.type).toBe('corporate_partner_bonus');

    const corporateBalance = await this.billingService.getBalance(this.corporateUser.id);
    expect(corporateBalance.RUB).toBe(1000 + 2250); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å + –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π

    this.logStep('‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å 2250‚ÇΩ');
  }

  private async step9_TeamCollectiveBonus(): Promise<void> {
    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å 5% –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
    const collectiveBonus = 15000 * 0.05; // 750‚ÇΩ
    const bonusPerMember = collectiveBonus / this.teamMembers.length; // 150‚ÇΩ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ

    for (const member of this.teamMembers) {
      const teamBonus = await this.billingService.processTeamBonus({
        userId: member.id,
        amount: bonusPerMember,
        currency: 'RUB',
        type: 'team_collective_bonus',
        sourceTransaction: 'partner_deposit',
      });

      expect(teamBonus.amount).toBe(bonusPerMember);
    }

    this.logStep('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –±–æ–Ω—É—Å 750‚ÇΩ (150‚ÇΩ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ)');
  }

  private async step10_CorporateActivityReport(): Promise<void> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const report = await this.reportingService.generateCorporateReport({
      userId: this.corporateUser.id,
      period: 'current_month',
      includeTeam: true,
      includePartners: true,
    });

    expect(report).toBeDefined();
    expect(report.totalEarnings).toBe(2250); // –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –±–æ–Ω—É—Å
    expect(report.teamMembers).toBe(5);
    expect(report.partnersReferred).toBe(1);
    expect(report.totalTeamSpending).toBeGreaterThan(0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞
    expect(report.bonusBreakdown).toEqual({
      corporate_welcome: 1000,
      corporate_partner_bonus: 2250,
      team_collective_bonus: 750,
    });

    this.logStep('‚úÖ –û—Ç—á–µ—Ç –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  }
}

describe('üìß Email Registration Corporate Flow', () => {
  let test: EmailRegistrationCorporateFlowTest;

  beforeEach(async () => {
    test = new EmailRegistrationCorporateFlowTest();
    await test.setup();
  });

  afterEach(async () => {
    await test.cleanup();
  });

  it('should complete corporate email registration flow with team and partner bonuses', async () => {
    await test.runTest();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    const finalCorporateBalance = await test.billingService.getBalance(test.corporateUser.id);
    expect(finalCorporateBalance.RUB).toBe(3250); // 1000 + 2250

    const teamTotalBalance = await Promise.all(
      test.teamMembers.map((member) => test.billingService.getBalance(member.id)),
    );

    // –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å: 300‚ÇΩ (welcome) + 150‚ÇΩ (collective) - –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ AI
    teamTotalBalance.forEach((balance) => {
      expect(balance.RUB).toBeGreaterThan(400); // –ú–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ —Ç—Ä–∞—Ç –Ω–∞ AI
    });
  });

  it('should handle corporate referral limits', async () => {
    await test.runTest();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralStats = await test.userService.getReferralStats(test.corporateUser.id);
    expect(referralStats.corporatePartnersCount).toBe(1);
    expect(referralStats.canInviteMore).toBe(true); // –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –±–æ–ª—å—à–µ
  });

  it('should track team performance metrics', async () => {
    await test.runTest();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    const teamMetrics = await test.analyticsService.getTeamMetrics(test.corporateUser.id);
    expect(teamMetrics.totalMembers).toBe(5);
    expect(teamMetrics.activeMembers).toBe(5); // –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ AI
    expect(teamMetrics.totalAiUsage).toBeGreaterThan(0);
    expect(teamMetrics.averageUsagePerMember).toBeGreaterThan(0);
  });
});
