import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { UserStoryTest } from '../../helpers/UserStoryTest';

/**
 * üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–æ–¥–ø–∏—Å–∫–∏
 *
 * –°—Ü–µ–Ω–∞—Ä–∏–π:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞–µ—Ç 7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–∞–ª
 * 2. –ê–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–∏–∞–ª–∞
 * 3. –ù–∞ 5-–π –¥–µ–Ω—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏
 * 4. –ü–æ–∫—É–ø–∞–µ—Ç Premium –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü (2000‚ÇΩ)
 * 5. –ü–æ–ª—É—á–∞–µ—Ç 20% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü (1600‚ÇΩ)
 * 6. –ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
 * 7. –ü–æ–ª—É—á–∞–µ—Ç cashback 15% (300‚ÇΩ) –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª
 * 8. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
 * 9. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
 * 10. –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π 50%
 */

class SubscriptionLifecycleFlowTest extends UserStoryTest {
  private mainUser: any;
  private referredUser: any;
  private subscription: any;
  private referredSubscription: any;
  private trialPeriod: number = 7; // –¥–Ω–µ–π

  async runTest(): Promise<void> {
    await this.step1_RegistrationWithTrial();
    await this.step2_ActiveTrialUsage();
    await this.step3_TrialExpirationNotification();
    await this.step4_PurchasePremiumSubscription();
    await this.step5_FirstMonthDiscount();
    await this.step6_InviteFriendSubscription();
    await this.step7_ReferralCashback();
    await this.step8_AutoRenewal();
    await this.step9_CancelSubscription();
    await this.step10_WinBackOffer();
  }

  private async step1_RegistrationWithTrial(): Promise<void> {
    this.mainUser = await this.userService.registerUser({
      email: 'trial@example.com',
      password: 'TrialPass123!',
      source: 'organic',
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º 7-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–∞–ª
    const trial = await this.subscriptionService.activateTrial({
      userId: this.mainUser.id,
      plan: 'premium_trial',
      duration: this.trialPeriod,
      features: ['unlimited_ai', 'priority_support', 'advanced_analytics'],
    });

    expect(trial.isActive).toBe(true);
    expect(trial.daysRemaining).toBe(7);
    expect(trial.plan).toBe('premium_trial');

    this.logStep('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å 7-–¥–Ω–µ–≤–Ω—ã–º —Ç—Ä–∏–∞–ª–æ–º');
  }

  private async step2_ActiveTrialUsage(): Promise<void> {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 4 –¥–Ω–µ–π
    const dailyUsage = [
      { day: 1, requests: 50, tokens: 25000, models: ['gpt-3.5-turbo', 'claude-3-haiku'] },
      { day: 2, requests: 75, tokens: 40000, models: ['gpt-4', 'claude-3-sonnet'] },
      { day: 3, requests: 100, tokens: 60000, models: ['gpt-4-turbo', 'claude-3-opus'] },
      { day: 4, requests: 120, tokens: 80000, models: ['gpt-4', 'claude-3-sonnet', 'gemini-pro'] },
    ];

    let totalTokens = 0;
    let totalRequests = 0;

    for (const usage of dailyUsage) {
      const dayUsage = await this.aiService.simulateDailyUsage({
        userId: this.mainUser.id,
        day: usage.day,
        requests: usage.requests,
        tokens: usage.tokens,
        models: usage.models,
      });

      totalTokens += usage.tokens;
      totalRequests += usage.requests;

      expect(dayUsage.processed).toBe(true);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const usageStats = await this.analyticsService.getTrialUsageStats(this.mainUser.id);
    expect(usageStats.totalTokens).toBe(totalTokens);
    expect(usageStats.totalRequests).toBe(totalRequests);
    expect(usageStats.averageRequestsPerDay).toBe(totalRequests / 4);

    this.logStep(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤, ${totalTokens} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  private async step3_TrialExpirationNotification(): Promise<void> {
    // –ù–∞ 5-–π –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞
    const notification = await this.notificationService.sendTrialExpirationWarning({
      userId: this.mainUser.id,
      daysRemaining: 2,
      usageStats: {
        totalRequests: 345,
        totalTokens: 205000,
        favoriteModels: ['gpt-4', 'claude-3-sonnet'],
      },
    });

    expect(notification.sent).toBe(true);
    expect(notification.type).toBe('trial_expiration_warning');
    expect(notification.daysRemaining).toBe(2);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    expect(notification.content).toContain('gpt-4');
    expect(notification.content).toContain('claude-3-sonnet');
    expect(notification.offerDiscount).toBe(20); // 20% —Å–∫–∏–¥–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    this.logStep('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }

  private async step4_PurchasePremiumSubscription(): Promise<void> {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç Premium –ø–æ–¥–ø–∏—Å–∫—É
    this.subscription = await this.subscriptionService.purchaseSubscription({
      userId: this.mainUser.id,
      plan: 'premium_monthly',
      basePrice: 2000,
      currency: 'RUB',
      paymentMethod: 'card',
      promoCode: 'TRIAL20', // 20% —Å–∫–∏–¥–∫–∞
    });

    expect(this.subscription.plan).toBe('premium_monthly');
    expect(this.subscription.status).toBe('active');
    expect(this.subscription.basePrice).toBe(2000);
    expect(this.subscription.discountApplied).toBe(400); // 20% –æ—Ç 2000‚ÇΩ

    this.logStep('‚úÖ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º TRIAL20');
  }

  private async step5_FirstMonthDiscount(): Promise<void> {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å–æ —Å–∫–∏–¥–∫–æ–π
    const payment = await this.billingService.processSubscriptionPayment({
      subscriptionId: this.subscription.id,
      amount: 1600, // 2000‚ÇΩ - 400‚ÇΩ —Å–∫–∏–¥–∫–∞
      currency: 'RUB',
      period: 'first_month',
    });

    expect(payment.amount).toBe(1600);
    expect(payment.discount).toBe(400);
    expect(payment.status).toBe('completed');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = await this.billingService.getBalance(this.mainUser.id);
    expect(userBalance.RUB).toBe(-1600); // –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É

    this.logStep('‚úÖ –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –æ–ø–ª–∞—á–µ–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π 20% (1600‚ÇΩ)');
  }

  private async step6_InviteFriendSubscription(): Promise<void> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const referralLink = await this.userService.generateReferralLink(this.mainUser.id, {
      type: 'subscription_referral',
      reward: 'cashback_15_percent',
    });

    // –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    this.referredUser = await this.userService.registerUser({
      email: 'friend@example.com',
      password: 'FriendPass123!',
      referralCode: referralLink.code,
    });

    // –î—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    this.referredSubscription = await this.subscriptionService.purchaseSubscription({
      userId: this.referredUser.id,
      plan: 'premium_monthly',
      basePrice: 2000,
      currency: 'RUB',
      paymentMethod: 'card',
      referredBy: this.mainUser.id,
    });

    expect(this.referredSubscription.plan).toBe('premium_monthly');
    expect(this.referredSubscription.status).toBe('active');
    expect(this.referredSubscription.referredBy).toBe(this.mainUser.id);

    this.logStep('‚úÖ –î—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ');
  }

  private async step7_ReferralCashback(): Promise<void> {
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç cashback 15% –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª
    const cashback = await this.billingService.processReferralCashback({
      referrerId: this.mainUser.id,
      referredUserId: this.referredUser.id,
      subscriptionAmount: 2000,
      cashbackRate: 0.15,
    });

    expect(cashback.amount).toBe(300); // 15% –æ—Ç 2000‚ÇΩ
    expect(cashback.type).toBe('subscription_referral_cashback');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cashback –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –±–∞–ª–∞–Ω—Å
    const balance = await this.billingService.getBalance(this.mainUser.id);
    expect(balance.RUB).toBe(-1600 + 300); // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å + cashback

    this.logStep('‚úÖ –ü–æ–ª—É—á–µ–Ω cashback 300‚ÇΩ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏');
  }

  private async step8_AutoRenewal(): Promise<void> {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    await this.timeService.advanceTime({ days: 30 });

    const renewal = await this.subscriptionService.processAutoRenewal({
      subscriptionId: this.subscription.id,
      amount: 2000, // –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏
      currency: 'RUB',
    });

    expect(renewal.amount).toBe(2000);
    expect(renewal.status).toBe('completed');
    expect(renewal.isRenewal).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞
    const updatedSubscription = await this.subscriptionService.getSubscription(
      this.subscription.id,
    );
    expect(updatedSubscription.status).toBe('active');
    expect(updatedSubscription.renewalCount).toBe(1);

    this.logStep('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å 2000‚ÇΩ');
  }

  private async step9_CancelSubscription(): Promise<void> {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
    const cancellation = await this.subscriptionService.cancelSubscription({
      subscriptionId: this.subscription.id,
      reason: 'cost_too_high',
      feedback: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –Ω–æ –¥–æ—Ä–æ–≥–æ –¥–ª—è –º–æ–∏—Ö –Ω—É–∂–¥',
      immediateCancel: false, // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    });

    expect(cancellation.status).toBe('cancelled');
    expect(cancellation.activeUntil).toBeDefined();
    expect(cancellation.reason).toBe('cost_too_high');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    const subscription = await this.subscriptionService.getSubscription(this.subscription.id);
    expect(subscription.status).toBe('active'); // –ï—â–µ –∞–∫—Ç–∏–≤–Ω–∞
    expect(subscription.willCancelAt).toBeDefined();

    this.logStep('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞');
  }

  private async step10_WinBackOffer(): Promise<void> {
    // –ß–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º win-back –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await this.timeService.advanceTime({ days: 3 });

    const winBackOffer = await this.marketingService.createWinBackOffer({
      userId: this.mainUser.id,
      previousPlan: 'premium_monthly',
      discount: 50,
      validFor: 7, // –¥–Ω–µ–π
      personalizedMessage: true,
    });

    expect(winBackOffer.discount).toBe(50);
    expect(winBackOffer.newPrice).toBe(1000); // 50% –æ—Ç 2000‚ÇΩ
    expect(winBackOffer.validUntil).toBeDefined();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ email
    const email = await this.emailService.sendWinBackEmail({
      userId: this.mainUser.id,
      offer: winBackOffer,
      usageStats: {
        favoriteModels: ['gpt-4', 'claude-3-sonnet'],
        averageMonthlyRequests: 2500,
      },
    });

    expect(email.sent).toBe(true);
    expect(email.personalized).toBe(true);

    this.logStep('‚úÖ Win-back –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π 50% –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }
}

describe('üí≥ Subscription Lifecycle Flow', () => {
  let test: SubscriptionLifecycleFlowTest;

  beforeEach(async () => {
    test = new SubscriptionLifecycleFlowTest();
    await test.setup();
  });

  afterEach(async () => {
    await test.cleanup();
  });

  it('should complete full subscription lifecycle from trial to cancellation', async () => {
    await test.runTest();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalSubscription = await test.subscriptionService.getSubscription(test.subscription.id);
    expect(finalSubscription.status).toBe('active'); // –ï—â–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    expect(finalSubscription.willCancelAt).toBeDefined();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const finalBalance = await test.billingService.getBalance(test.mainUser.id);
    expect(finalBalance.RUB).toBe(-3300); // -1600 (–ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü) + 300 (cashback) - 2000 (–≤—Ç–æ—Ä–æ–π –º–µ—Å—è—Ü)
  });

  it('should track subscription metrics correctly', async () => {
    await test.runTest();

    const metrics = await test.analyticsService.getSubscriptionMetrics(test.mainUser.id);
    expect(metrics.totalPaid).toBe(3600); // 1600 + 2000
    expect(metrics.totalDiscount).toBe(400); // –°–∫–∏–¥–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
    expect(metrics.referralCashback).toBe(300);
    expect(metrics.subscriptionDuration).toBe(2); // –º–µ—Å—è—Ü–∞
  });

  it('should handle win-back offer acceptance', async () => {
    await test.runTest();

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ win-back –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const winBackAcceptance = await test.subscriptionService.acceptWinBackOffer({
      userId: test.mainUser.id,
      offerId: 'winback_50_percent',
      newPrice: 1000,
    });

    expect(winBackAcceptance.accepted).toBe(true);
    expect(winBackAcceptance.newPrice).toBe(1000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞
    const renewedSubscription = await test.subscriptionService.getSubscription(
      test.subscription.id,
    );
    expect(renewedSubscription.status).toBe('active');
    expect(renewedSubscription.currentPrice).toBe(1000);
  });

  it('should calculate lifetime value correctly', async () => {
    await test.runTest();

    const ltv = await test.analyticsService.calculateCustomerLTV(test.mainUser.id);
    expect(ltv.totalRevenue).toBe(3600); // –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
    expect(ltv.totalCashback).toBe(300); // –í—ã–ø–ª–∞—á–µ–Ω–Ω—ã–π cashback
    expect(ltv.netRevenue).toBe(3300); // –ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞
    expect(ltv.monthsActive).toBe(2);
    expect(ltv.referralsGenerated).toBe(1);
  });
});
