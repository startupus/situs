import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { UserStoryTest } from '../../helpers/UserStoryTest';

/**
 * ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤
 *
 * –°—Ü–µ–Ω–∞—Ä–∏–π:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞–µ—Ç AI –∫—Ä–µ–¥–∏—Ç—ã
 * 2. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
 * 3. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç AI –ø–∞–∫–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π
 * 5. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
 * 6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * 7. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è volume discount
 * 8. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –∫–æ–ª–ª–µ–≥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * 9. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è team pooling –¥–ª—è AI –∫—Ä–µ–¥–∏—Ç–æ–≤
 * 10. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
 */

class AiUsageOptimizationFlowTest extends UserStoryTest {
  private mainUser: any;
  private colleague: any;
  private aiPackage: any;
  private usageStats: any;
  private team: any;

  async runTest(): Promise<void> {
    await this.step1_RegistrationWithAiCredits();
    await this.step2_TestDifferentAiModels();
    await this.step3_SystemOptimizationSuggestions();
    await this.step4_PurchaseAiPackageWithDiscount();
    await this.step5_DynamicPricingActivation();
    await this.step6_UsageLimitNotification();
    await this.step7_VolumeDiscountApplication();
    await this.step8_InviteColleagueForSharing();
    await this.step9_TeamPoolingActivation();
    await this.step10_CostOptimizationReport();
  }

  private async step1_RegistrationWithAiCredits(): Promise<void> {
    this.mainUser = await this.userService.registerUser({
      email: 'ai-user@example.com',
      password: 'AiUser123!',
      plan: 'developer',
    });

    // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ AI –∫—Ä–µ–¥–∏—Ç—ã
    const aiCredits = await this.billingService.grantAiCredits({
      userId: this.mainUser.id,
      amount: 1000, // 1000 AI –∫—Ä–µ–¥–∏—Ç–æ–≤
      type: 'welcome_bonus',
      validFor: 30, // –¥–Ω–µ–π
    });

    expect(aiCredits.amount).toBe(1000);
    expect(aiCredits.type).toBe('welcome_bonus');
    expect(aiCredits.validFor).toBe(30);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å AI –∫—Ä–µ–¥–∏—Ç–æ–≤
    const aiBalance = await this.billingService.getAiCreditsBalance(this.mainUser.id);
    expect(aiBalance.total).toBe(1000);
    expect(aiBalance.available).toBe(1000);

    this.logStep('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å 1000 AI –∫—Ä–µ–¥–∏—Ç–∞–º–∏');
  }

  private async step2_TestDifferentAiModels(): Promise<void> {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    const modelTests = [
      { model: 'gpt-3.5-turbo', tokens: 1000, cost: 2 }, // 2 –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
      { model: 'gpt-4', tokens: 1000, cost: 30 }, // 30 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
      { model: 'claude-3-haiku', tokens: 1000, cost: 1 }, // 1 –∫—Ä–µ–¥–∏—Ç –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
      { model: 'claude-3-sonnet', tokens: 1000, cost: 15 }, // 15 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
      { model: 'claude-3-opus', tokens: 1000, cost: 75 }, // 75 –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
      { model: 'gemini-pro', tokens: 1000, cost: 3 }, // 3 –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤
    ];

    let totalCreditsUsed = 0;
    const modelUsageStats = [];

    for (const test of modelTests) {
      const usage = await this.aiService.processAiRequest({
        userId: this.mainUser.id,
        model: test.model,
        tokens: test.tokens,
        creditsRequired: test.cost,
      });

      totalCreditsUsed += test.cost;
      modelUsageStats.push({
        model: test.model,
        tokens: test.tokens,
        credits: test.cost,
        responseTime: usage.responseTime,
        quality: usage.qualityScore,
      });

      expect(usage.success).toBe(true);
      expect(usage.creditsCharged).toBe(test.cost);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const updatedBalance = await this.billingService.getAiCreditsBalance(this.mainUser.id);
    expect(updatedBalance.available).toBe(1000 - totalCreditsUsed);

    this.usageStats = modelUsageStats;
    this.logStep(`‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ 6 AI –º–æ–¥–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${totalCreditsUsed} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
  }

  private async step3_SystemOptimizationSuggestions(): Promise<void> {
    // –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    const optimization = await this.aiService.analyzeUsageAndOptimize({
      userId: this.mainUser.id,
      usageHistory: this.usageStats,
    });

    expect(optimization.suggestions).toBeDefined();
    expect(optimization.potentialSavings).toBeGreaterThan(0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    expect(optimization.suggestions).toContain('use_claude_haiku_for_simple_tasks');
    expect(optimization.suggestions).toContain('batch_requests_for_discounts');
    expect(optimization.recommendations.alternativeModels).toBeDefined();

    // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
    expect(optimization.recommendations.simpleQueries).toBe('claude-3-haiku');
    expect(optimization.recommendations.complexAnalysis).toBe('claude-3-sonnet');
    expect(optimization.recommendations.creativeTasks).toBe('gpt-4');

    this.logStep('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é');
  }

  private async step4_PurchaseAiPackageWithDiscount(): Promise<void> {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç AI –ø–∞–∫–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    this.aiPackage = await this.billingService.purchaseAiPackage({
      userId: this.mainUser.id,
      packageType: 'smart_optimization',
      credits: 5000,
      basePrice: 2500, // 2500‚ÇΩ
      optimizationDiscount: 20, // 20% —Å–∫–∏–¥–∫–∞ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      currency: 'RUB',
    });

    expect(this.aiPackage.credits).toBe(5000);
    expect(this.aiPackage.basePrice).toBe(2500);
    expect(this.aiPackage.discount).toBe(500); // 20% –æ—Ç 2500‚ÇΩ
    expect(this.aiPackage.finalPrice).toBe(2000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∫—Ä–µ–¥–∏—Ç–æ–≤
    const updatedBalance = await this.billingService.getAiCreditsBalance(this.mainUser.id);
    expect(updatedBalance.total).toBe(5000 + (1000 - 126)); // –ù–æ–≤—ã–µ –∫—Ä–µ–¥–∏—Ç—ã + –æ—Å—Ç–∞—Ç–æ–∫

    this.logStep('‚úÖ –ö—É–ø–ª–µ–Ω AI –ø–∞–∫–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 20% (2000‚ÇΩ –∑–∞ 5000 –∫—Ä–µ–¥–∏—Ç–æ–≤)');
  }

  private async step5_DynamicPricingActivation(): Promise<void> {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const dynamicPricing = await this.aiService.activateDynamicPricing({
      userId: this.mainUser.id,
      packageId: this.aiPackage.id,
      rules: {
        volumeDiscounts: true,
        timeBasedPricing: true,
        modelOptimization: true,
      },
    });

    expect(dynamicPricing.active).toBe(true);
    expect(dynamicPricing.rules.volumeDiscounts).toBe(true);
    expect(dynamicPricing.rules.timeBasedPricing).toBe(true);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
    const pricingRules = await this.aiService.getDynamicPricingRules(this.mainUser.id);
    expect(pricingRules.volumeTiers).toBeDefined();
    expect(pricingRules.offPeakDiscount).toBe(15); // 15% —Å–∫–∏–¥–∫–∞ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
    expect(pricingRules.bulkRequestDiscount).toBe(10); // 10% —Å–∫–∏–¥–∫–∞ –∑–∞ –ø–∞–∫–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

    this.logStep('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ');
  }

  private async step6_UsageLimitNotification(): Promise<void> {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ 80% –ª–∏–º–∏—Ç–∞
    const intensiveUsage = await this.aiService.simulateIntensiveUsage({
      userId: this.mainUser.id,
      targetUsage: 0.8, // 80% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
      duration: 'hours',
      models: ['gpt-4', 'claude-3-opus'], // –î–æ—Ä–æ–≥–∏–µ –º–æ–¥–µ–ª–∏
    });

    expect(intensiveUsage.creditsUsed).toBeGreaterThan(4000); // 80% –æ—Ç ~5000

    // –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
    const notification = await this.notificationService.sendUsageLimitWarning({
      userId: this.mainUser.id,
      currentUsage: intensiveUsage.creditsUsed,
      totalCredits: 5874, // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
      warningThreshold: 0.8,
    });

    expect(notification.sent).toBe(true);
    expect(notification.type).toBe('usage_limit_warning');
    expect(notification.recommendations).toBeDefined();

    this.logStep('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
  }

  private async step7_VolumeDiscountApplication(): Promise<void> {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è volume discount –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    const volumeDiscount = await this.billingService.applyVolumeDiscount({
      userId: this.mainUser.id,
      monthlyUsage: 4500, // –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü
      tier: 'high_volume',
    });

    expect(volumeDiscount.applied).toBe(true);
    expect(volumeDiscount.discountRate).toBe(15); // 15% —Å–∫–∏–¥–∫–∞ –∑–∞ –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
    expect(volumeDiscount.creditsBonus).toBe(675); // 15% –±–æ–Ω—É—Å –∫—Ä–µ–¥–∏—Ç–æ–≤

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–Ω—É—Å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞—á–∏—Å–ª–µ–Ω—ã
    const balance = await this.billingService.getAiCreditsBalance(this.mainUser.id);
    expect(balance.bonus).toBe(675);

    this.logStep('‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ volume —Å–∫–∏–¥–∫–∞ 15% –∏ –∑–∞—á–∏—Å–ª–µ–Ω–æ 675 –±–æ–Ω—É—Å–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤');
  }

  private async step8_InviteColleagueForSharing(): Promise<void> {
    // –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –∫–æ–ª–ª–µ–≥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∫—Ä–µ–¥–∏—Ç–æ–≤
    const invitation = await this.userService.inviteColleague({
      inviterId: this.mainUser.id,
      email: 'colleague@example.com',
      role: 'ai_collaborator',
      sharedResources: ['ai_credits', 'usage_analytics'],
    });

    // –ö–æ–ª–ª–µ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è
    this.colleague = await this.userService.registerUser({
      email: 'colleague@example.com',
      password: 'Colleague123!',
      invitationCode: invitation.code,
    });

    expect(this.colleague.invitedBy).toBe(this.mainUser.id);
    expect(this.colleague.role).toBe('ai_collaborator');

    this.logStep('‚úÖ –ö–æ–ª–ª–µ–≥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∫—Ä–µ–¥–∏—Ç–æ–≤');
  }

  private async step9_TeamPoolingActivation(): Promise<void> {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º pooling AI –∫—Ä–µ–¥–∏—Ç–æ–≤
    this.team = await this.userService.createTeam({
      ownerId: this.mainUser.id,
      name: 'AI Development Team',
      members: [this.mainUser.id, this.colleague.id],
      sharedResources: ['ai_credits'],
    });

    const pooling = await this.aiService.activateTeamPooling({
      teamId: this.team.id,
      poolingRules: {
        shareCredits: true,
        sharedLimits: true,
        collaborativeDiscounts: true,
      },
    });

    expect(pooling.active).toBe(true);
    expect(pooling.sharedCredits).toBeGreaterThan(0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–≥–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã
    const colleagueUsage = await this.aiService.processAiRequest({
      userId: this.colleague.id,
      model: 'gpt-3.5-turbo',
      tokens: 1000,
      useTeamCredits: true,
    });

    expect(colleagueUsage.success).toBe(true);
    expect(colleagueUsage.creditsSource).toBe('team_pool');

    this.logStep('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω team pooling –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI –∫—Ä–µ–¥–∏—Ç–æ–≤');
  }

  private async step10_CostOptimizationReport(): Promise<void> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    const report = await this.reportingService.generateCostOptimizationReport({
      userId: this.mainUser.id,
      teamId: this.team.id,
      period: 'current_month',
    });

    expect(report.totalSavings).toBeGreaterThan(0);
    expect(report.optimizationScore).toBeGreaterThan(70); // –•–æ—Ä–æ—à–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞
    expect(report.breakdown.volumeDiscounts).toBeDefined();
    expect(report.breakdown.modelOptimization).toBeDefined();
    expect(report.breakdown.teamPoolingBenefits).toBeDefined();

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    expect(report.recommendations).toContain('increase_batch_processing');
    expect(report.recommendations).toContain('use_off_peak_hours');
    expect(report.futureProjections.monthlySavings).toBeGreaterThan(500);

    this.logStep('‚úÖ –û—Ç—á–µ—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  }
}

describe('ü§ñ AI Usage Optimization Flow', () => {
  let test: AiUsageOptimizationFlowTest;

  beforeEach(async () => {
    test = new AiUsageOptimizationFlowTest();
    await test.setup();
  });

  afterEach(async () => {
    await test.cleanup();
  });

  it('should complete AI usage optimization flow with team pooling', async () => {
    await test.runTest();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    const finalReport = await test.reportingService.generateCostOptimizationReport({
      userId: test.mainUser.id,
      teamId: test.team.id,
      period: 'current_month',
    });

    expect(finalReport.totalSavings).toBeGreaterThan(1000); // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è
    expect(finalReport.optimizationScore).toBeGreaterThan(80); // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  });

  it('should track AI model performance and costs', async () => {
    await test.runTest();

    const modelAnalytics = await test.analyticsService.getModelPerformanceAnalytics(
      test.mainUser.id,
    );
    expect(modelAnalytics.mostEfficientModel).toBe('claude-3-haiku');
    expect(modelAnalytics.bestValueModel).toBe('gpt-3.5-turbo');
    expect(modelAnalytics.totalCreditsUsed).toBeGreaterThan(4000);
  });

  it('should handle team credit sharing correctly', async () => {
    await test.runTest();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
    const teamBalance = await test.billingService.getTeamAiCreditsBalance(test.team.id);
    expect(teamBalance.totalShared).toBeGreaterThan(0);
    expect(teamBalance.memberUsage).toHaveLength(2);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã
    const mainUserAccess = teamBalance.memberUsage.find((m) => m.userId === test.mainUser.id);
    const colleagueAccess = teamBalance.memberUsage.find((m) => m.userId === test.colleague.id);

    expect(mainUserAccess.canUseSharedCredits).toBe(true);
    expect(colleagueAccess.canUseSharedCredits).toBe(true);
  });

  it('should calculate ROI from AI optimization', async () => {
    await test.runTest();

    const roi = await test.analyticsService.calculateAiOptimizationROI(test.mainUser.id);
    expect(roi.totalInvestment).toBe(2000); // –°—Ç–æ–∏–º–æ—Å—Ç—å AI –ø–∞–∫–µ—Ç–∞
    expect(roi.totalSavings).toBeGreaterThan(500); // –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    expect(roi.roiPercentage).toBeGreaterThan(25); // 25%+ ROI
    expect(roi.paybackPeriod).toBeLessThan(4); // –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –º–µ–Ω–µ–µ 4 –º–µ—Å—è—Ü–µ–≤
  });
});
