import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../../helpers/TestHelpers';

/**
 * üß™ USER STORY: Agency Markup & Revenue Sharing
 *
 * –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç (–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ)
 * 2. –î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞–¥—Ü–µ–Ω–∫–æ–π 30%
 * 3. –ö–ª–∏–µ–Ω—Ç –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞ 5000‚ÇΩ
 * 4. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º:
 *    - 70% –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≥–µ–Ω—Ç—Å—Ç–≤—É)
 *    - 30% –∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 * 5. 10% —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
 * 6. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –¥–æ—Ö–æ–¥–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
class AgencyMarkupRevenueSharing extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üè¢ Agency Markup & Revenue Sharing System', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should execute complete agency markup and revenue sharing scenario', async () => {
        console.log('\nüöÄ Starting Agency Markup & Revenue Sharing Test...\n');

        // === –≠–¢–ê–ü 1: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ê–ì–ï–ù–¢–°–¢–í–ê ===
        console.log('üè¢ STEP 1: Agency Registration & Project Setup');

        const agency = await this.createTestUser('digital_agency', {
          email: 'agency@digitalstudio.com',
          name: 'Digital Studio Agency',
        });

        console.log(`‚úÖ Agency registered: ${agency.id} (${agency.email})`);

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
        const project = await this.createTestProject('digital_agency', {
          name: 'E-commerce Platform Development',
          description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞',
          markup: 30, // 30% –Ω–∞–¥—Ü–µ–Ω–∫–∞
          type: 'development',
        });

        expect(project.ownerId).toBe(agency.id);
        expect(project.markup).toBe(30);

        console.log(`‚úÖ Project created: ${project.id} with ${project.markup}% markup`);

        // === –≠–¢–ê–ü 2: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê ===
        console.log('\nüë§ STEP 2: Adding Client to Project');

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const clientInvite = await ServiceClients.addClientToProject(
          project.id,
          'client@retailcompany.com',
        );

        expect(clientInvite.inviteLink).toBeDefined();
        console.log(`‚úÖ Client invite created: ${clientInvite.inviteLink}`);

        // –ö–ª–∏–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        const client = await this.createTestUser('retail_client', {
          email: 'client@retailcompany.com',
          name: 'Retail Company LLC',
        });

        await ServiceClients.acceptProjectInvite(clientInvite.inviteLink, client.id);
        console.log(`‚úÖ Client joined project: ${client.id}`);

        // === –≠–¢–ê–ü 3: –ö–õ–ò–ï–ù–¢ –ü–û–ü–û–õ–ù–Ø–ï–¢ –ë–ê–õ–ê–ù–° ===
        console.log('\nüí≥ STEP 3: Client Deposits 5000‚ÇΩ');

        const depositAmount = 5000;
        const depositTransaction = await ServiceClients.topupBalance(
          client.id,
          depositAmount,
          'bank_transfer',
          {
            projectId: project.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø—Ä–æ–µ–∫—Ç—É
            currency: 'RUB',
          },
        );

        expect(depositTransaction.amount).toBe(depositAmount);
        console.log(`‚úÖ Client deposited: ${depositAmount}‚ÇΩ to project ${project.id}`);

        await ValidationHelpers.waitForTransactionProcessing();

        // === –≠–¢–ê–ü 4: –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–†–ï–î–°–¢–í ===
        console.log('\nüí∞ STEP 4: Automatic Revenue Distribution');

        // –†–∞—Å—á–µ—Ç—ã:
        // –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: 5000‚ÇΩ
        // –ù–∞–¥—Ü–µ–Ω–∫–∞ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞: 30% = 1500‚ÇΩ
        // –û–±—â–∞—è —Å—É–º–º–∞ —Å –Ω–∞–¥—Ü–µ–Ω–∫–æ–π: 6500‚ÇΩ

        const baseAmount = depositAmount;
        const markupAmount = baseAmount * (project.markup / 100); // 1500‚ÇΩ
        const totalWithMarkup = baseAmount + markupAmount; // 6500‚ÇΩ

        // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–¥—Ü–µ–Ω–∫–∏:
        // 70% –∞–≥–µ–Ω—Ç—Å—Ç–≤—É: 1500‚ÇΩ * 0.7 = 1050‚ÇΩ
        // 30% –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: 1500‚ÇΩ * 0.3 = 450‚ÇΩ

        const agencyShare = markupAmount * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100); // 1050‚ÇΩ
        const platformShare = markupAmount * (TEST_CONSTANTS.SERVICE_COMMISSION / 100); // 450‚ÇΩ

        console.log(`üìä Revenue Distribution Calculation:`);
        console.log(`   Base amount: ${baseAmount}‚ÇΩ`);
        console.log(`   Markup (${project.markup}%): ${markupAmount}‚ÇΩ`);
        console.log(`   Total with markup: ${totalWithMarkup}‚ÇΩ`);
        console.log(`   Agency share (70%): ${agencyShare}‚ÇΩ`);
        console.log(`   Platform share (30%): ${platformShare}‚ÇΩ`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
        const agencyBalance = await ServiceClients.getBalance(agency.id);
        expect(agencyBalance.balance).toBe(agencyShare);

        console.log(`‚úÖ Agency balance updated: ${agencyBalance.balance}‚ÇΩ`);

        // === –≠–¢–ê–ü 5: AI –°–ï–†–í–ò–°–´ –° –ù–ê–î–¶–ï–ù–ö–û–ô ===
        console.log('\nü§ñ STEP 5: AI Services with Markup Applied');

        // –ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç
        const aiRequests = [
          {
            model: 'openai/gpt-4',
            prompt: 'Generate product descriptions for e-commerce',
            baseCost: 100, // ‚ÇΩ
          },
          {
            model: 'anthropic/claude-3-sonnet',
            prompt: 'Create marketing copy for product pages',
            baseCost: 150, // ‚ÇΩ
          },
          {
            model: 'openai/dall-e-3',
            prompt: 'Generate product images for catalog',
            baseCost: 200, // ‚ÇΩ
          },
        ];

        let totalAiBaseCost = 0;
        let totalAiFinalCost = 0;

        for (const request of aiRequests) {
          const aiResponse = await ServiceClients.makeAIRequest(
            client.id,
            request.model,
            request.prompt,
            project.id, // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞–¥—Ü–µ–Ω–∫–æ–π
          );

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞–¥—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞
          const serviceCost = request.baseCost * (1 + TEST_CONSTANTS.SERVICE_MARKUP / 100); // +20%
          const finalCost = serviceCost * (1 + project.markup / 100); // +30%

          totalAiBaseCost += request.baseCost;
          totalAiFinalCost += finalCost;

          expect(aiResponse.baseCost).toBeCloseTo(request.baseCost, 1);
          expect(aiResponse.serviceCost).toBeCloseTo(serviceCost, 1);
          expect(aiResponse.finalCost).toBeCloseTo(finalCost, 1);

          console.log(
            `‚úÖ AI request: ${request.baseCost}‚ÇΩ ‚Üí ${finalCost.toFixed(2)}‚ÇΩ (with markup)`,
          );
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // === –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ü–û–°–õ–ï AI –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===
        console.log('\nüí∏ STEP 6: Balance Validation after AI Usage');

        const clientBalanceAfterAI = await ServiceClients.getBalance(client.id);
        const expectedClientBalance = depositAmount - totalAiFinalCost;

        expect(clientBalanceAfterAI.balance).toBeCloseTo(expectedClientBalance, 1);
        console.log(`‚úÖ Client balance after AI usage: ${clientBalanceAfterAI.balance}‚ÇΩ`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Ö–æ–¥—ã –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç AI –Ω–∞–¥—Ü–µ–Ω–æ–∫
        const agencyBalanceAfterAI = await ServiceClients.getBalance(agency.id);

        // –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ—é –¥–æ–ª—é –æ—Ç AI –Ω–∞–¥—Ü–µ–Ω–æ–∫
        const aiMarkupTotal = totalAiBaseCost * (project.markup / 100);
        const agencyAiRevenue = aiMarkupTotal * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100);
        const expectedAgencyBalance = agencyShare + agencyAiRevenue;

        expect(agencyBalanceAfterAI.balance).toBeCloseTo(expectedAgencyBalance, 1);
        console.log(`‚úÖ Agency balance with AI revenue: ${agencyBalanceAfterAI.balance}‚ÇΩ`);

        // === –≠–¢–ê–ü 7: –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ===
        console.log('\nüéÅ STEP 7: Referral Program Integration');

        // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –±—ã–ª–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        const referrer = await this.createTestUser('referrer_partner', {
          email: 'partner@marketing.com',
          name: 'Marketing Partner',
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å (—Å–∏–º—É–ª–∏—Ä—É–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –±—ã–ª–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ)
        await ServiceClients.setReferralConnection(referrer.id, agency.id);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Å –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã (–±–µ–∑ –Ω–∞–¥—Ü–µ–Ω–æ–∫)
        const referralBonusRate = TEST_CONSTANTS.REFERRAL_COMMISSION_RATE / 100; // 10%
        const referralBonus = totalAiBaseCost * referralBonusRate;

        await ValidationHelpers.waitForReferralProcessing();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        const referrerBalance = await ServiceClients.getBalance(referrer.id);
        expect(referrerBalance.bonusBalance).toBeCloseTo(referralBonus, 1);

        console.log(
          `‚úÖ Referral bonus calculated: ${referralBonus}‚ÇΩ (from base cost ${totalAiBaseCost}‚ÇΩ)`,
        );

        // === –≠–¢–ê–ü 8: –ö–û–ú–ò–°–°–ò–ò –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ===
        console.log('\nüìä STEP 8: Commission & Transaction Analysis');

        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∏—Å—Å–∏–π –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
        const agencyCommissions = await ServiceClients.getCommissionHistory(agency.id);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
        const depositCommission = agencyCommissions.find(
          (c) => c.type === 'client_markup' && c.sourceTransactionId === depositTransaction.id,
        );

        expect(depositCommission).toBeDefined();
        expect(depositCommission!.amount).toBeCloseTo(agencyShare, 1);
        expect(depositCommission!.rate).toBe(TEST_CONSTANTS.PROJECT_OWNER_SHARE);

        console.log(`‚úÖ Deposit commission validated: ${depositCommission!.amount}‚ÇΩ`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –æ—Ç AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const aiCommissions = agencyCommissions.filter((c) => c.type === 'client_markup');
        const totalAiCommissions = aiCommissions.reduce((sum, c) => sum + c.amount, 0);

        console.log(`‚úÖ AI commissions total: ${totalAiCommissions}‚ÇΩ`);

        // === –≠–¢–ê–ü 9: –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –û–¢–ß–ï–¢–´ ===
        console.log('\nüìà STEP 9: Weekly Revenue Reports');

        const reportPeriod = {
          from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥
          to: new Date(),
        };

        // –û—Ç—á–µ—Ç –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
        const agencyReport = await ServiceClients.generateReport(
          agency.id,
          'project',
          reportPeriod,
        );

        expect(agencyReport.revenue).toBeGreaterThan(0);
        expect(agencyReport.commissions).toBeGreaterThan(0);
        expect(agencyReport.clients).toBeGreaterThanOrEqual(1);

        console.log(`üìä Agency Weekly Report:`);
        console.log(`   Revenue: ${agencyReport.revenue}‚ÇΩ`);
        console.log(`   Commissions: ${agencyReport.commissions}‚ÇΩ`);
        console.log(`   Active clients: ${agencyReport.clients}`);
        console.log(`   AI requests: ${agencyReport.aiRequests || aiRequests.length}`);

        // –û—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const adminReport = await ServiceClients.generateReport('admin', 'admin', reportPeriod);

        expect(adminReport.totalRevenue).toBeGreaterThan(0);
        expect(adminReport.platformCommissions).toBeGreaterThan(0);
        expect(adminReport.activeProjects).toBeGreaterThanOrEqual(1);

        console.log(`üìä Admin Weekly Report:`);
        console.log(`   Total platform revenue: ${adminReport.totalRevenue}‚ÇΩ`);
        console.log(`   Platform commissions: ${adminReport.platformCommissions}‚ÇΩ`);
        console.log(`   Active projects: ${adminReport.activeProjects}`);
        console.log(`   Total users: ${adminReport.totalUsers}`);

        // === –≠–¢–ê–ü 10: –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–û–ì–û–í–û–ì–û –£–ß–ï–¢–ê ===
        console.log('\nüìã STEP 10: Tax and Compliance Validation');

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —É—á–µ—Ç–∞
        const taxReport = await ServiceClients.generateTaxReport(agency.id, reportPeriod);

        expect(taxReport.grossRevenue).toBeGreaterThan(0);
        expect(taxReport.platformFees).toBeGreaterThan(0);
        expect(taxReport.netRevenue).toBe(taxReport.grossRevenue - taxReport.platformFees);

        console.log(`üìã Tax Report for Agency:`);
        console.log(`   Gross revenue: ${taxReport.grossRevenue}‚ÇΩ`);
        console.log(`   Platform fees: ${taxReport.platformFees}‚ÇΩ`);
        console.log(`   Net revenue: ${taxReport.netRevenue}‚ÇΩ`);
        console.log(`   VAT applicable: ${taxReport.vatApplicable ? 'Yes' : 'No'}`);

        // === –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
        console.log('\nüéØ FINAL VALIDATION SUMMARY:');

        const finalAgencyBalance = await ServiceClients.getBalance(agency.id);
        const finalClientBalance = await ServiceClients.getBalance(client.id);
        const finalReferrerBalance = await ServiceClients.getBalance(referrer.id);

        console.log(`üë§ Agency (${agency.id}):`);
        console.log(`   Initial deposit share: ${agencyShare}‚ÇΩ`);
        console.log(`   AI markup revenue: ${agencyAiRevenue.toFixed(2)}‚ÇΩ`);
        console.log(`   Total balance: ${finalAgencyBalance.balance}‚ÇΩ`);

        console.log(`üë• Client (${client.id}):`);
        console.log(`   Deposited: ${depositAmount}‚ÇΩ`);
        console.log(`   Spent on AI (with markup): ${totalAiFinalCost.toFixed(2)}‚ÇΩ`);
        console.log(`   Remaining balance: ${finalClientBalance.balance}‚ÇΩ`);

        console.log(`üîó Referrer (${referrer.id}):`);
        console.log(`   Referral bonus: ${finalReferrerBalance.bonusBalance}‚ÇΩ`);

        console.log(`üìä Revenue Distribution:`);
        console.log(`   Client paid: ${totalWithMarkup + totalAiFinalCost}‚ÇΩ total`);
        console.log(`   Agency earned: ${finalAgencyBalance.balance}‚ÇΩ`);
        console.log(`   Platform earned: ${platformShare}‚ÇΩ + AI platform fees`);
        console.log(`   Referrer earned: ${finalReferrerBalance.bonusBalance}‚ÇΩ`);

        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        expect(finalAgencyBalance.balance).toBeGreaterThan(agencyShare);
        expect(finalClientBalance.balance).toBeLessThan(depositAmount);
        expect(finalReferrerBalance.bonusBalance).toBeGreaterThan(0);

        console.log('\n‚úÖ Agency Markup & Revenue Sharing Test COMPLETED SUCCESSFULLY! üéâ\n');
      });

      await it('should handle different markup tiers correctly', async () => {
        console.log('\nüìä Testing Different Markup Tiers...\n');

        const markupTiers = [
          { name: 'Basic', markup: 15, minVolume: 0 },
          { name: 'Standard', markup: 30, minVolume: 10000 },
          { name: 'Premium', markup: 50, minVolume: 50000 },
          { name: 'Enterprise', markup: 75, minVolume: 100000 },
        ];

        for (const tier of markupTiers) {
          const agency = await this.createTestUser(`agency_${tier.name.toLowerCase()}`);
          const project = await this.createTestProject(`agency_${tier.name.toLowerCase()}`, {
            markup: tier.markup,
            name: `${tier.name} Project`,
          });

          // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–µ–ø–æ–∑–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞
          const client = await this.createTestUser(`client_${tier.name.toLowerCase()}`);
          const testAmount = 1000;

          await ServiceClients.topupBalance(client.id, testAmount, 'card', {
            projectId: project.id,
          });

          await ValidationHelpers.waitForTransactionProcessing();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
          const agencyBalance = await ServiceClients.getBalance(agency.id);
          const expectedRevenue =
            testAmount * (tier.markup / 100) * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100);

          expect(agencyBalance.balance).toBeCloseTo(expectedRevenue, 1);

          console.log(
            `‚úÖ ${tier.name} tier (${tier.markup}%): ${testAmount}‚ÇΩ ‚Üí ${expectedRevenue}‚ÇΩ agency revenue`,
          );
        }
      });

      await it('should handle multi-client project revenue sharing', async () => {
        console.log('\nüë• Testing Multi-Client Project Revenue...\n');

        const agency = await this.createTestUser('multi_client_agency');
        const project = await this.createTestProject('multi_client_agency', {
          markup: 40,
          name: 'Multi-Client Development Project',
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        const clients = [];
        const deposits = [2000, 3500, 1500, 4000]; // —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤

        for (let i = 0; i < deposits.length; i++) {
          const client = await this.createTestUser(`multi_client_${i}`);
          clients.push(client);

          // –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
          const invite = await ServiceClients.addClientToProject(project.id, client.email);
          await ServiceClients.acceptProjectInvite(invite.inviteLink, client.id);

          // –î–µ–ø–æ–∑–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞
          await ServiceClients.topupBalance(client.id, deposits[i], 'card', {
            projectId: project.id,
          });
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
        const totalDeposits = deposits.reduce((sum, d) => sum + d, 0);
        const expectedAgencyRevenue =
          totalDeposits * (project.markup / 100) * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100);

        const agencyBalance = await ServiceClients.getBalance(agency.id);
        expect(agencyBalance.balance).toBeCloseTo(expectedAgencyRevenue, 1);

        console.log(
          `‚úÖ Multi-client revenue: ${totalDeposits}‚ÇΩ deposits ‚Üí ${expectedAgencyRevenue}‚ÇΩ agency revenue`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É
        const projectReport = await ServiceClients.getProjectReport(project.id);
        expect(projectReport.totalClients).toBe(clients.length);
        expect(projectReport.totalRevenue).toBeCloseTo(expectedAgencyRevenue, 1);

        console.log(
          `üìä Project report: ${projectReport.totalClients} clients, ${projectReport.totalRevenue}‚ÇΩ revenue`,
        );
      });

      await it('should calculate accurate platform commissions', async () => {
        console.log('\nüí∞ Testing Platform Commission Accuracy...\n');

        const scenarios = [
          { markup: 20, volume: 5000, expectedPlatformShare: 0.3 },
          { markup: 35, volume: 12000, expectedPlatformShare: 0.3 },
          { markup: 60, volume: 25000, expectedPlatformShare: 0.3 },
        ];

        let totalPlatformCommissions = 0;

        for (let i = 0; i < scenarios.length; i++) {
          const scenario = scenarios[i];
          const agency = await this.createTestUser(`platform_test_agency_${i}`);
          const client = await this.createTestUser(`platform_test_client_${i}`);

          const project = await this.createTestProject(`platform_test_agency_${i}`, {
            markup: scenario.markup,
          });

          await ServiceClients.topupBalance(client.id, scenario.volume, 'card', {
            projectId: project.id,
          });

          await ValidationHelpers.waitForTransactionProcessing();

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
          const markupAmount = scenario.volume * (scenario.markup / 100);
          const platformCommission = markupAmount * scenario.expectedPlatformShare;
          totalPlatformCommissions += platformCommission;

          console.log(
            `‚úÖ Scenario ${i + 1}: ${scenario.volume}‚ÇΩ √ó ${scenario.markup}% = ${platformCommission}‚ÇΩ platform commission`,
          );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        const platformStats = await ServiceClients.getPlatformStats();
        expect(platformStats.totalCommissions).toBeGreaterThanOrEqual(totalPlatformCommissions);

        console.log(`üí∞ Total platform commissions: ${totalPlatformCommissions}‚ÇΩ`);
      });
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞
export default async function runAgencyMarkupRevenueSharing(): Promise<void> {
  const test = new AgencyMarkupRevenueSharing();
  await test.runTest();
}
