import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import {
  UserStoryTest,
  ServiceClients,
  ValidationHelpers,
  TEST_CONSTANTS,
} from '../../helpers/TestHelpers';

/**
 * üß™ USER STORY: Cross-Border Multi-Currency Transactions
 *
 * –ü–û–õ–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô:
 * 1. –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ (EUR) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
 * 2. –†–æ—Å—Å–∏–π—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç (RUB) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
 * 3. –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç (USD) —Ç–∞–∫–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
 * 4. –ü—Ä–æ–≤–æ–¥—è—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö
 * 5. AI —Å–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –≤–∞–ª—é—Ç
 * 6. –ö–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
 * 7. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ
 * 8. –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ—Ç—á–µ—Ç—ã —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –≤–∞–ª—é—Ç
 */
class CrossBorderTransactionsTest extends UserStoryTest {
  async runTest(): Promise<void> {
    await describe('üåç Cross-Border Multi-Currency Transactions', async () => {
      beforeEach(async () => {
        await this.setup();
      });

      afterEach(async () => {
        await this.cleanup();
      });

      await it('should handle complex multi-currency cross-border transactions', async () => {
        console.log('\nüöÄ Starting Cross-Border Multi-Currency Test...\n');

        // === –≠–¢–ê–ü 1: –ù–ê–°–¢–†–û–ô–ö–ê –ö–£–†–°–û–í –í–ê–õ–Æ–¢ ===
        console.log('üí± STEP 1: Currency Exchange Rates Setup');

        const exchangeRates = {
          USD: 1.0, // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
          EUR: 0.85, // 1 USD = 0.85 EUR
          RUB: 75.0, // 1 USD = 75 RUB
          GBP: 0.73, // 1 USD = 0.73 GBP
          CNY: 7.2, // 1 USD = 7.2 CNY
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
        await ServiceClients.updateExchangeRates(exchangeRates);
        console.log('‚úÖ Exchange rates configured:', exchangeRates);

        // === –≠–¢–ê–ü 2: –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–û–ï –ê–ì–ï–ù–¢–°–¢–í–û (EUR) ===
        console.log('\nüè¢ STEP 2: International Agency Registration (EUR)');

        const agency = await this.createTestUser('international_agency', {
          email: 'agency@eurodesign.eu',
          baseCurrency: 'EUR',
          country: 'Germany',
          timeZone: 'Europe/Berlin',
        });

        // –°–æ–∑–¥–∞–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –≤–∞–ª—é—Ç–æ–π EUR
        const project = await this.createTestProject('international_agency', {
          name: 'Global E-commerce Platform',
          baseCurrency: 'EUR',
          markup: 25, // 25% –Ω–∞–¥—Ü–µ–Ω–∫–∞
          acceptedCurrencies: ['EUR', 'USD', 'RUB', 'GBP'],
        });

        console.log(`‚úÖ International agency registered: ${agency.id} (base: EUR)`);
        console.log(`‚úÖ Project created: ${project.id} with multi-currency support`);

        // === –≠–¢–ê–ü 3: –†–û–°–°–ò–ô–°–ö–ò–ô –ö–õ–ò–ï–ù–¢ (RUB) ===
        console.log('\nüá∑üá∫ STEP 3: Russian Client Registration (RUB)');

        const russianClient = await this.createTestUser('russian_client', {
          email: 'client@ruscompany.ru',
          baseCurrency: 'RUB',
          country: 'Russia',
          timeZone: 'Europe/Moscow',
        });

        // –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
        const russianInvite = await ServiceClients.addClientToProject(
          project.id,
          russianClient.email,
        );
        await ServiceClients.acceptProjectInvite(russianInvite.inviteLink, russianClient.id);

        console.log(`‚úÖ Russian client joined: ${russianClient.id} (base: RUB)`);

        // === –≠–¢–ê–ü 4: –ê–ú–ï–†–ò–ö–ê–ù–°–ö–ò–ô –ö–õ–ò–ï–ù–¢ (USD) ===
        console.log('\nüá∫üá∏ STEP 4: American Client Registration (USD)');

        const americanClient = await this.createTestUser('american_client', {
          email: 'client@usacorp.com',
          baseCurrency: 'USD',
          country: 'USA',
          timeZone: 'America/New_York',
        });

        const americanInvite = await ServiceClients.addClientToProject(
          project.id,
          americanClient.email,
        );
        await ServiceClients.acceptProjectInvite(americanInvite.inviteLink, americanClient.id);

        console.log(`‚úÖ American client joined: ${americanClient.id} (base: USD)`);

        // === –≠–¢–ê–ü 5: –î–ï–ü–û–ó–ò–¢–´ –í –†–ê–ó–ù–´–• –í–ê–õ–Æ–¢–ê–• ===
        console.log('\nüí≥ STEP 5: Multi-Currency Deposits');

        const deposits = [
          {
            client: russianClient,
            amount: 150000, // 150,000 RUB
            currency: 'RUB',
            expectedUSD: 150000 / exchangeRates.RUB, // $2,000 USD
          },
          {
            client: americanClient,
            amount: 3000, // $3,000 USD
            currency: 'USD',
            expectedUSD: 3000, // $3,000 USD
          },
        ];

        let totalDepositUSD = 0;

        for (const deposit of deposits) {
          const transaction = await ServiceClients.topupBalance(
            deposit.client.id,
            deposit.amount,
            'bank_transfer',
            {
              currency: deposit.currency,
              projectId: project.id,
            },
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –≤–∞–ª—é—Ç
          expect(transaction.amount).toBe(deposit.amount);
          expect(transaction.currency).toBe(deposit.currency);
          expect(transaction.amountUSD).toBeCloseTo(deposit.expectedUSD, 2);

          totalDepositUSD += deposit.expectedUSD;

          console.log(
            `‚úÖ ${deposit.currency} deposit: ${deposit.amount} ‚Üí $${deposit.expectedUSD} USD`,
          );
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // === –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –° –ö–û–ù–í–ï–†–°–ò–ï–ô ===
        console.log('\nüí∞ STEP 6: Multi-Currency Balance Validation');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const russianBalance = await ServiceClients.getBalance(russianClient.id);
        expect(russianBalance.balance).toBe(150000);
        expect(russianBalance.currency).toBe('RUB');
        expect(russianBalance.balanceUSD).toBeCloseTo(2000, 2);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const americanBalance = await ServiceClients.getBalance(americanClient.id);
        expect(americanBalance.balance).toBe(3000);
        expect(americanBalance.currency).toBe('USD');
        expect(americanBalance.balanceUSD).toBe(3000);

        console.log(`‚úÖ Russian balance: 150,000 RUB ($${russianBalance.balanceUSD})`);
        console.log(`‚úÖ American balance: $3,000 USD ($${americanBalance.balanceUSD})`);

        // === –≠–¢–ê–ü 7: AI –°–ï–†–í–ò–°–´ –° –í–ê–õ–Æ–¢–ù–û–ô –ö–û–ù–í–ï–†–°–ò–ï–ô ===
        console.log('\nü§ñ STEP 7: AI Services with Currency Conversion');

        const aiRequests = [
          {
            client: russianClient,
            model: 'openai/gpt-4',
            prompt: '–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
            expectedCostUSD: 50, // $50 USD –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
          },
          {
            client: americanClient,
            model: 'anthropic/claude-3-sonnet',
            prompt: 'Generate marketing content for US market',
            expectedCostUSD: 75, // $75 USD –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
          },
        ];

        for (const request of aiRequests) {
          const aiResponse = await ServiceClients.makeAIRequest(
            request.client.id,
            request.model,
            request.prompt,
            project.id,
          );

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞–¥—Ü–µ–Ω–∫–∞–º–∏ –≤ –≤–∞–ª—é—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞
          const serviceCostUSD =
            request.expectedCostUSD * (1 + TEST_CONSTANTS.SERVICE_MARKUP / 100);
          const finalCostUSD = serviceCostUSD * (1 + project.markup / 100);

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤–∞–ª—é—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
          const clientCurrency = request.client.baseCurrency;
          const finalCostClientCurrency = finalCostUSD * exchangeRates[clientCurrency];

          expect(aiResponse.baseCostUSD).toBeCloseTo(request.expectedCostUSD, 2);
          expect(aiResponse.finalCostUSD).toBeCloseTo(finalCostUSD, 2);
          expect(aiResponse.finalCost).toBeCloseTo(finalCostClientCurrency, 2);
          expect(aiResponse.currency).toBe(clientCurrency);

          console.log(
            `‚úÖ AI request (${clientCurrency}): $${request.expectedCostUSD} ‚Üí ${finalCostClientCurrency.toFixed(2)} ${clientCurrency}`,
          );
        }

        await ValidationHelpers.waitForTransactionProcessing();

        // === –≠–¢–ê–ü 8: –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–û–•–û–î–û–í –ê–ì–ï–ù–¢–°–¢–í–ê ===
        console.log('\nüíº STEP 8: Agency Revenue Distribution (EUR)');

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥—ã –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (EUR)
        const totalMarkupUSD = totalDepositUSD * (project.markup / 100);
        const agencyShareUSD = totalMarkupUSD * (TEST_CONSTANTS.PROJECT_OWNER_SHARE / 100);
        const agencyShareEUR = agencyShareUSD * exchangeRates.EUR;

        const agencyBalance = await ServiceClients.getBalance(agency.id);
        expect(agencyBalance.currency).toBe('EUR');
        expect(agencyBalance.balance).toBeCloseTo(agencyShareEUR, 2);
        expect(agencyBalance.balanceUSD).toBeCloseTo(agencyShareUSD, 2);

        console.log(
          `‚úÖ Agency revenue: ‚Ç¨${agencyShareEUR.toFixed(2)} EUR ($${agencyShareUSD.toFixed(2)} USD)`,
        );

        // === –≠–¢–ê–ü 9: –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –° –í–ê–õ–Æ–¢–ê–ú–ò ===
        console.log('\nüéÅ STEP 9: Multi-Currency Referral Program');

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏–∏ (GBP)
        const referrer = await this.createTestUser('uk_referrer', {
          email: 'partner@ukmarketing.co.uk',
          baseCurrency: 'GBP',
          country: 'UK',
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
        await ServiceClients.setReferralConnection(referrer.id, agency.id);

        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ AI –≤ USD
        const totalAiBaseCostUSD = aiRequests.reduce((sum, req) => sum + req.expectedCostUSD, 0);
        const referralBonusUSD =
          totalAiBaseCostUSD * (TEST_CONSTANTS.REFERRAL_COMMISSION_RATE / 100);
        const referralBonusGBP = referralBonusUSD * exchangeRates.GBP;

        await ValidationHelpers.waitForReferralProcessing();

        const referrerBalance = await ServiceClients.getBalance(referrer.id);
        expect(referrerBalance.currency).toBe('GBP');
        expect(referrerBalance.bonusBalance).toBeCloseTo(referralBonusGBP, 2);
        expect(referrerBalance.bonusBalanceUSD).toBeCloseTo(referralBonusUSD, 2);

        console.log(
          `‚úÖ Referral bonus: ¬£${referralBonusGBP.toFixed(2)} GBP ($${referralBonusUSD.toFixed(2)} USD)`,
        );

        // === –≠–¢–ê–ü 10: –í–ê–õ–Æ–¢–ù–´–ï –û–¢–ß–ï–¢–´ ===
        console.log('\nüìä STEP 10: Multi-Currency Reporting');

        const reportPeriod = {
          from: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
          to: new Date(),
        };

        // –û—Ç—á–µ—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤ –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ (EUR)
        const agencyReport = await ServiceClients.generateReport(
          agency.id,
          'project',
          reportPeriod,
          { currency: 'EUR' },
        );

        expect(agencyReport.currency).toBe('EUR');
        expect(agencyReport.revenue).toBeGreaterThan(0);
        expect(agencyReport.revenueUSD).toBeGreaterThan(0);

        console.log(`üìä Agency Report (EUR):`);
        console.log(`   Revenue: ‚Ç¨${agencyReport.revenue} (${agencyReport.revenueUSD} USD)`);
        console.log(`   Clients: ${agencyReport.clients} from ${agencyReport.countries} countries`);

        // –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ USD
        const platformReport = await ServiceClients.generateReport('admin', 'admin', reportPeriod, {
          currency: 'USD',
        });

        expect(platformReport.currency).toBe('USD');
        expect(platformReport.totalRevenue).toBeGreaterThan(0);

        console.log(`üìä Platform Report (USD):`);
        console.log(`   Total revenue: $${platformReport.totalRevenue}`);
        console.log(`   Active currencies: ${platformReport.activeCurrencies}`);
        console.log(`   Cross-border transactions: ${platformReport.crossBorderTransactions}`);

        // === –≠–¢–ê–ü 11: –í–ê–õ–Æ–¢–ù–´–ï –†–ò–°–ö–ò –ò –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–ï ===
        console.log('\n‚ö†Ô∏è STEP 11: Currency Risk Management');

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
        const newExchangeRates = {
          ...exchangeRates,
          RUB: 80.0, // RUB –æ—Å–ª–∞–±–ª—è–µ—Ç—Å—è
          EUR: 0.88, // EUR —É–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è
        };

        await ServiceClients.updateExchangeRates(newExchangeRates);
        console.log('‚úÖ Exchange rates updated (simulating market volatility)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫—É –±–∞–ª–∞–Ω—Å–æ–≤
        const updatedRussianBalance = await ServiceClients.getBalance(russianClient.id);
        const newBalanceUSD = updatedRussianBalance.balance / newExchangeRates.RUB;

        expect(updatedRussianBalance.balanceUSD).toBeCloseTo(newBalanceUSD, 2);
        console.log(
          `‚úÖ Russian balance revalued: ${updatedRussianBalance.balance} RUB ‚Üí $${updatedRussianBalance.balanceUSD} USD`,
        );

        // === –≠–¢–ê–ü 12: –ù–ê–õ–û–ì–û–û–ë–õ–û–ñ–ï–ù–ò–ï –ü–û –Æ–†–ò–°–î–ò–ö–¶–ò–Ø–ú ===
        console.log('\nüìã STEP 12: Multi-Jurisdiction Tax Compliance');

        const taxReports = [];

        // –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ (–ì–µ—Ä–º–∞–Ω–∏—è)
        const germanyTaxReport = await ServiceClients.generateTaxReport(agency.id, reportPeriod, {
          jurisdiction: 'DE',
          currency: 'EUR',
        });

        expect(germanyTaxReport.vatRate).toBe(0.19); // 19% –ù–î–° –≤ –ì–µ—Ä–º–∞–Ω–∏–∏
        expect(germanyTaxReport.grossRevenue).toBeGreaterThan(0);
        taxReports.push(germanyTaxReport);

        // –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        const russiaTaxReport = await ServiceClients.generateTaxReport(
          russianClient.id,
          reportPeriod,
          {
            jurisdiction: 'RU',
            currency: 'RUB',
          },
        );

        expect(russiaTaxReport.vatRate).toBe(0.2); // 20% –ù–î–° –≤ –†–æ—Å—Å–∏–∏
        taxReports.push(russiaTaxReport);

        console.log(`üìã Tax Reports Generated:`);
        console.log(`   Germany (VAT 19%): ‚Ç¨${germanyTaxReport.netRevenue}`);
        console.log(`   Russia (VAT 20%): ${russiaTaxReport.netRevenue} RUB`);

        // === –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===
        console.log('\nüéØ FINAL MULTI-CURRENCY VALIDATION:');

        const finalBalances = await Promise.all([
          ServiceClients.getBalance(agency.id),
          ServiceClients.getBalance(russianClient.id),
          ServiceClients.getBalance(americanClient.id),
          ServiceClients.getBalance(referrer.id),
        ]);

        console.log(
          `üè¢ Agency (EUR): ‚Ç¨${finalBalances[0].balance} ($${finalBalances[0].balanceUSD} USD)`,
        );
        console.log(
          `üá∑üá∫ Russian Client (RUB): ${finalBalances[1].balance} RUB ($${finalBalances[1].balanceUSD} USD)`,
        );
        console.log(`üá∫üá∏ American Client (USD): $${finalBalances[2].balance} USD`);
        console.log(
          `üá¨üáß UK Referrer (GBP): ¬£${finalBalances[3].bonusBalance} GBP ($${finalBalances[3].bonusBalanceUSD} USD)`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        const currencyIntegrityCheck = await ServiceClients.validateCurrencyIntegrity();
        expect(currencyIntegrityCheck.totalBalanceUSD).toBeGreaterThan(0);
        expect(currencyIntegrityCheck.exchangeRateAccuracy).toBeGreaterThan(0.99);

        console.log('\n‚úÖ Cross-Border Multi-Currency Test COMPLETED SUCCESSFULLY! üåç\n');
      });

      await it('should handle cryptocurrency transactions', async () => {
        console.log('\n‚Çø Testing Cryptocurrency Transactions...\n');

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        const cryptoRates = {
          BTC: 0.000023, // 1 USD = 0.000023 BTC
          ETH: 0.00035, // 1 USD = 0.00035 ETH
          USDT: 1.0, // 1 USD = 1 USDT (—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω)
        };

        await ServiceClients.updateCryptoRates(cryptoRates);

        const cryptoUser = await this.createTestUser('crypto_user', {
          baseCurrency: 'BTC',
          country: 'Switzerland',
        });

        // –î–µ–ø–æ–∑–∏—Ç –≤ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö
        const btcDeposit = await ServiceClients.topupBalance(
          cryptoUser.id,
          0.1, // 0.1 BTC
          'crypto_wallet',
          { currency: 'BTC' },
        );

        expect(btcDeposit.currency).toBe('BTC');
        expect(btcDeposit.amountUSD).toBeCloseTo(0.1 / cryptoRates.BTC, 2);

        console.log(`‚úÖ Crypto deposit: 0.1 BTC ‚Üí $${btcDeposit.amountUSD} USD`);
      });

      await it('should handle currency conversion limits and slippage', async () => {
        console.log('\nüìâ Testing Currency Conversion Limits...\n');

        // –ë–æ–ª—å—à–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∫—É—Ä—Å
        const largeTransactionUser = await this.createTestUser('whale_user');

        const largeAmount = 1000000; // $1M USD

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        const conversionLimits = await ServiceClients.getCurrencyConversionLimits('USD', 'RUB');

        if (largeAmount > conversionLimits.maxAmount) {
          console.log(
            `‚ö†Ô∏è Transaction exceeds limit: $${largeAmount} > $${conversionLimits.maxAmount}`,
          );

          // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          const chunks = Math.ceil(largeAmount / conversionLimits.maxAmount);
          const chunkSize = conversionLimits.maxAmount;

          for (let i = 0; i < chunks; i++) {
            const amount = Math.min(chunkSize, largeAmount - i * chunkSize);
            await ServiceClients.topupBalance(largeTransactionUser.id, amount, 'bank_transfer');

            // –ñ–¥–µ–º –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await new Promise((resolve) => setTimeout(resolve, 1000));
          }
        }

        console.log(`‚úÖ Large transaction processed with proper limits`);
      });
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–∞
export default async function runCrossBorderTransactionsTest(): Promise<void> {
  const test = new CrossBorderTransactionsTest();
  await test.runTest();
}
