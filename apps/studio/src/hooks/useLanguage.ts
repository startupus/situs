import { useState, useEffect, useCallback } from 'react'
import { useTranslation } from 'react-i18next'

export type Language = 'ru' | 'en'

interface UseLanguageReturn {
  language: Language
  setLanguage: (lang: Language) => void
  toggleLanguage: () => void
  t: (key: string, options?: any) => string
  isRussian: boolean
  isEnglish: boolean
}

const LANGUAGE_STORAGE_KEY = 'redaktus-language'

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
 */
export const useLanguage = (): UseLanguageReturn => {
  const { i18n, t } = useTranslation()
  
  // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const getInitialLanguage = useCallback((): Language => {
    if (typeof window === 'undefined') return 'ru'
    
    const saved = localStorage.getItem(LANGUAGE_STORAGE_KEY) as Language
    if (saved === 'ru' || saved === 'en') {
      return saved
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    const browserLang = navigator.language.toLowerCase()
    if (browserLang.startsWith('ru')) {
      return 'ru'
    }
    
    return 'en' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  }, [])
  
  const [language, setLanguageState] = useState<Language>(getInitialLanguage)
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å i18next –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const initialLang = getInitialLanguage()
    setLanguageState(initialLang)
    i18n.changeLanguage(initialLang)
  }, [i18n, getInitialLanguage])
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
  const setLanguage = useCallback((lang: Language) => {
    setLanguageState(lang)
    i18n.changeLanguage(lang)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem(LANGUAGE_STORAGE_KEY, lang)
    }
    
    console.log(`üåç Language changed to: ${lang}`)
  }, [i18n])
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  const toggleLanguage = useCallback(() => {
    const newLang: Language = language === 'ru' ? 'en' : 'ru'
    setLanguage(newLang)
  }, [language, setLanguage])
  
  return {
    language,
    setLanguage,
    toggleLanguage,
    t,
    isRussian: language === 'ru',
    isEnglish: language === 'en'
  }
} 